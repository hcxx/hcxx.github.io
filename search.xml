<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2022/07/04/20220704/</url>
    <content><![CDATA[<p>感觉今年的TODO又要鸽了。。。<br>
<img src="/2022/07/04/20220704/image-20220704222949640.png" style="zoom:40%;"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/06/03/20230603/</url>
    <content><![CDATA[<p>时间好快，这个域名使用就快要3年了。还是top便宜呀，点名批评one域名，中途涨价，翻了一倍价格。原本能买两年的钱，现在只能买一年了😭。</p>
<p>其实我也挺想知道这里统计的30天内的访问人次除了我还有真人吗？不会全是爬虫吧🤣。好像各个搜索引擎也没收录吧，居然还天天爬😥。</p>
<p>完蛋-全是爬虫。。。</p>
<p><img src="/2023/06/03/20230603/image-20230604235937735.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>AI For Everyone笔记</title>
    <url>/2023/05/29/AI-For-Everyone%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>已弃坑😂</strong>。<a href="https://baike.baidu.com/item/%E5%90%B4%E6%81%A9%E8%BE%BE">Andrew Ng</a>的《AI For Everyone》视频笔记，此课程主要是AI方向扫盲。学完只能让自己对AI相关的概念不再一无所知。并不能让自己具备AI相关的技能。</p>
<span id="more"></span>
<h1>第一篇</h1>
<h2 id="introduction">Introduction</h2>
<blockquote>
<p>ANI：全称artificial narrow intelligence，弱人工智能，能够完成某一特定方面的任务。例如智能音箱，自动驾驶等。</p>
</blockquote>
<blockquote>
<p>AGI：artificial general intelligence，通用人工智能（强人工智能），能够完成任何人类可以完成的事情</p>
</blockquote>
<p>目前我们所接触到的AI都是ANI，离AGI的发展至少还需要很多年。</p>
<h2 id="machine-learning">Machine Learning</h2>
<blockquote>
<p>监督学习：完成输入到输出的映射被称为监督学习，监督学习的数据都是有确定标注（label）的。</p>
</blockquote>
<p>例如输入A是一封邮件，输出B为是否为垃圾邮件（1或0），这就是用于构建垃圾邮件筛选的AI核心思想。<br>
对于广告推荐系统，输入一些广告信息，还有一些你的信息，然后试图预测，你是否会点击广告。<br>
还有其他诸如音频转文字、机器翻译、基于图像雷达的自动驾驶、视觉检查等。</p>
<p><strong>监督学习的飞速发展</strong>：<br>
监督学习的概念早已存在，直到最近（大概201X年左右？）才飞速发展。主要原因是互联网和计算机的兴起，信息可以被记录再计算机里，您可以拿到的数据量有了较大增长。</p>
<p>对于传统的人工智能，当你输入数据更多时，它的性能会好一点，当超过一定范围，性能并不会持续增长。(有点类似于最后趋近平的对数曲线）。<br>
但是对于现代人工智能技术以及神经网络，如果你训练的是一个稍大的神经网络，那么它的性能会比传统的人工智能性能更强。如果是一个更大规模的神经网络，那么它的性能也会变得越来越好。（最后也会趋近数据于平）</p>
<p><strong>如何具有更高的性能水平</strong>：</p>
<ol>
<li>拥有大数据量，即大数据，数据越多越好。</li>
<li>训练一个非常大的神经网络。</li>
</ol>
<p>人工智能中最重要的概念就是机器学习，包括监督学习，即从输入到输出的映射，数据能使它有很好的表现。</p>
<h2 id="what-is-data">What is data</h2>
<table>
<thead>
<tr>
<th style="text-align:center">房子大小</th>
<th style="text-align:center">卧室数量</th>
<th style="text-align:center">价格（1000$）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">523</td>
<td style="text-align:center">1</td>
<td style="text-align:center">115</td>
</tr>
<tr>
<td style="text-align:center">645</td>
<td style="text-align:center">1</td>
<td style="text-align:center">150</td>
</tr>
<tr>
<td style="text-align:center">708</td>
<td style="text-align:center">2</td>
<td style="text-align:center">210</td>
</tr>
</tbody>
</table>
<p>一个数据表格，也成为数据集，比如在一个如上的表格中。<br>
把A设定为房子大小，B设定为房子价格，多大的房子能卖多少钱，让AI系统去学习这个输入到输出的映射，也就是A到B映射。如果我们想增加额外的条件，例如房子卧室数量，这时A就是前两列数据。所以实际上，具体什么是A、B，取决于你或你的业务。<br>
又假设，我有一定的预算，我想知道我能买多大的房子，这时A是价格，B是房子大小。<br>
又假设，你有一组图片数据集，其中输入A代表一组不同的图像，输出B是他们的标签，某张照片是猫，某张不是猫。</p>
<p>PS：把猫作为一个谈论，是机器学习的惯例。</p>
<p><strong>如何获取数据</strong>：</p>
<p>手动标注。获取一些数据后，人工手动去标注你需要的数据关键信息，例如这张图片是猫、不是猫。手动标注，是一个让你同时拥有A和B数据集的有效方法。</p>
<p>观察用户的行为或其他类型行为。如电商平台上，不同的物品会有不同的价格，通过纪录用户是否购买产品，就可以收集到用户名，产品的价格，购买日期，以及购买行为等数据。<br>
例如工厂中的机器，你想要预测一台机器是否即将出现故障，那么你可以记录一个这样的数据集，机器序列号、机器的温度、机器里的压强、和机器之前是否出现过故障。可以选择机器序列号、机器的温度、机器里的压强作为输入A，机器之前是否出现过故障作为输出B。</p>
<p>从网站上下载或从合作伙伴那里获取。开放的互联网上有许多数据集可以免费下载，只遵守相关协议即可。</p>
<p><strong>数据是重要的，但也有2点误解</strong></p>
<ol>
<li><strong>先获取足够的数据，再构建AI团队</strong>；一旦开始收集数据，马上把数据给AI团队，AI团队可以反馈给IT团队需要哪些数据，或者需要更细致的数据。</li>
<li><strong>只要有数据，就会有结果</strong>；通常数据多确实比数据少要好，一些决策者认为大量数据给到AI团队，就一定能发掘这些数据的价值从而获得回报。并不总是如此。一个极端的例子，一家公司收购了许多其他医药公司的数据， 理论上讲这些数据是非常有价值的。 但是几年后， 他们的工程师们还是没有了弄明白如何使用这些数据，并且真正地从中创造价值。</li>
</ol>
<p>不要为了获取数据而过度投资，除非同时聘用一个AI团队来研究这些数据，因为他们能分析出哪些数据是有价值的。</p>
<p>数据是散乱的；如果数据的质量差，那么AI会学习出不准确的结果，AI团队要解决如何清理数据的问题。处理不正确的标签。</p>
<p>数据的类型有很多， 图片、视频和文本这些类型的数据，称之为<strong>非结构化数据</strong>，非结构化数据没有预定义的数据模型。结构化数据是高度组织和整齐格式化的数据，容易储存在一个巨大的电子表格里。处理非结构化数据的技术要比处理这些结构化数据的技术难一点。</p>
<h2 id="the-terminology-of-ai">The terminology of AI</h2>
<blockquote>
<p>机器学习系统的学习从输入A到输出B的映射，从而得到一个可以运行的AI系统。</p>
</blockquote>
<p>数据科学：数据科学的项目结论通常是一些帮助你做上商业决定的见解，比如建造那种房屋或者是投资翻新房子。<br>
机器学习：机器学习是一个让电脑在不被编程的情况下，就可以自己学习的研究领域，无需显示编程， 这是Arthur Samuel几十年前提出的定义。</p>
<blockquote>
<p>机器学习项目通常会带出一个运行的软件，用给定的A得到输出的B。与机器学习相比，数据科学通过挖掘数据来获取见解。通常的数据科学项目的结果是一组幻灯片。</p>
</blockquote>
<p>如今大型商业网站中大多都有AI系统，例如预测你是否会点击某个广告并推送。这是一个利润丰厚的AI系统。广告行业的数据科学项目，例如数据分析得到，旅游公司没有购买足够的广告，这时可以派出更多销售人员，说服他们使用更多的广告。<br>
即使是同一家公司，也会同时有不同的机器学习项目和数据科学项目，这两项都非常具有价值。</p>
<blockquote>
<p>深度学习是一种特殊的机器学习，他通过神经网络处理输入A到输入B的映射。为了区分人的大脑，也称为人工神经网络。</p>
</blockquote>
<p>人工神经网络其实是类比的人的神经网络，如下图中的小圈称为人工神经元，或简称神经元。这些神经元相互传递，<strong>神经网络其实是一个大的数据方程</strong>，根据输入A，告诉如何计算B。如今的神经网络一词几乎等同于深度学习。</p>
<p><img src="/2023/05/29/AI-For-Everyone%E7%AC%94%E8%AE%B0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.webp" alt="神经网络"></p>
<p>你可能也在媒体上听到其他流行语如无监督学习，强化学习，图形模型，计划，知识图表等。但是机器学习、数据科学、深度学习和神经网络也是非常重要的一部分。</p>
<p><img src="/2023/05/29/AI-For-Everyone%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%B3%E7%B3%BB.webp" alt="关系图，图片来源于网络，略有增改"></p>
<h2 id="what-makes-an-ai-company">What makes an AI company</h2>
<p>如何让公司擅长人工智能？从互联网的兴起中我们知道，互联网公司并不等于web网站+公司。同样，人工智能公司并不等同于使用人工智能的公司。</p>
<ol>
<li>人工智能公司擅长数据采集。也因此大型消费科技公司会有免费产品来帮助他们收集数据，并在别处产生收益。</li>
<li>人工智能公司会建立统一的数据仓库。如果有非常多个不同仓库，来分别获取数据并分析，那么几乎是不可能的。</li>
<li>人工智能公司擅长发现自动化的机会，</li>
<li>人工智能公司有很多新的岗位如MLE，和新分配任务的方式。</li>
</ol>
<p>一个公司想要变得擅长人工智能，意味着这个公司用人工智能去做某些事情，并把它做得很好。过去很多公司例如GOOGLE花费了一定时间成为擅长人工智能的公司。但这并不是一个不可复现的过程。转型人工智能公司有以下步骤：</p>
<ol>
<li>启动试点项目，从而了解人工智能，大概知道人工智能可以做什么，不可以做什么。</li>
<li>在公司内部建立一个人工智能团队，</li>
<li>提供广泛的人工智能培训，不仅要给工程师培训，还要提供给部门领导于高层管理人员。</li>
<li>制定公司的人工智能发展战略。</li>
<li>保证内外部对于人工智能发展战略沟通一致。所有的相关人员包括顾客到投资人都知道你的公司是如何在人工智能的兴起中找到前行方向的。</li>
</ol>
<h2 id="what-machine-learning-can-and-cannot-do">What machine learning can and cannot do</h2>
<div class="panel panel-info">
    <div class="panel-title">本章的一点个人看法</div>
    <div class="panel-body">
        <p>本章中吴恩达老师介绍的AI不能做事情，由于有一定的时间差，因此本章需要辩证看待。</p>

    </div>
    </div>
<p>通常，在开始一个人工智能项目之前，要做足够的技术调研，确保技术上是可行的。这意味着要看数据，看输入A能否完成到输出B的映射。</p>
<p>对于AI能做什么与不能做什么，有一个不完美的经验法则：<strong>人能够用一瞬间完成的事情，大部分都可以用监督学习来完成</strong>。例如判断周围车的距离，手机上的划痕，这些人通常耗时较短。<br>
对于AI不能做的事情，例如让AI写一份59页的市场分析报告，因为人类还不能一瞬间写完报告。</p>
<p>例如，对于邮件而言，AI能对邮件进行分类，也能判断邮件是否为一封垃圾邮件。但是想让AI针对某一封邮件写出具体的内容与回信，是’目前’AI所不能做到的。AI只能生成简单的回应，例如”感谢来信，谢谢，等“，或者AI生成的是各种错乱的内容。</p>
<p>判断AI项目是否可行的两个经验法则：</p>
<ol>
<li>机器只是学习一个简单的概念，这个概念不超过几秒，就可以得出一个正确的结论。例如分别一张图片是猫还是不是猫。观察其他车辆位置确定距离等。</li>
<li>有大量可用的数据，来学习输入A到输入B的映射。例如输入A是用户的电子邮件，输入B是用户的邮件属于什么类型，例如退款、运输、质量等。如果你有大量的A和B的电子邮件。那么该项目会更加可行。</li>
</ol>
<h2 id="more-examples-of-what-machine-learning-can-and-cannot-do">More examples of what machine learning can and cannot do</h2>
<p>只有我们亲眼目睹了AI成功与失败的例子，我们才能更加明确哪些AI项目能做，哪些不能做。接下来会给出更多例子。</p>
<p>对于自动驾驶项目，AI可以做的非常好。能通过相机、激光或者雷达等来分析他所在的位置，或者其他车的位置。这时输入A就是前方的图片或传感器数据，输出B就是其他车的位置。如今汽车行业已经收集了足够多的数据，且有相当好的算法。</p>
<p>现今AI无法做到的例子，例如给出一张人的手势图片，输出这个人的手势意图。这个的难点在于人的手势很多意图，不同的人的手势姿态不尽相同，因此AI通过人的手势来学习人的意图，是一个非常复杂的概念，更别说即使是人有时候也很难判断另一个人的手势的意图。<br>
另外，这是一个对人生命安全有着重要影响的AI。一个建筑工人的手势是想让你停车还是让你继续开车，理解正确有着极大影响。这使得AI项目更加困难。<br>
因此当今的自动驾驶汽车，有着很多的检测车辆部分的软件功能，但很少有自动驾驶团队试图依靠AI识别人类的人体姿势来安全驾驶。</p>
<p>使用X射线图检测肺炎的AI，输入A是X光片，输出B为是否肺炎，这是AI可以做的事情。但AI不能从解释肺炎的教科书中学习，然后检测出肺炎。但是人类可以读教科书，然后看上一小部分图像，就能对肺炎有大致的判断。AI是无法做到这一点的。</p>
<p>机器学习优缺点：</p>
<ol>
<li>AI擅长学习简单概念的事物，例如人几秒钟就可以做到的事情，以及有大量数据的事情。<br>
AI不擅长从少量数据学习复杂概念。</li>
<li>用AI系统从未见过的新类型数据执行任务时，往往表现不佳。例如通过X射线诊断肺炎的监督学习系统中，训练时都是使用高分辨率的胸部X射线。假如将这个系统应用于其他医院，这个医院的X射线图，用户是侧躺的，由于与之前数据的巨大差异，可能结果不再准确。<br>
一个优秀的AI团队要学会如何改善和减少这些问题。但这并不容易。如果是人，则会适应这种数据的巨大差异。</li>
</ol>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>B-Tree</title>
    <url>/2022/03/19/B-Tree/</url>
    <content><![CDATA[<p>B树概念简介，无代码实现</p>
<span id="more"></span>
<p>  之前的各种二叉树都是存储在内存中的，而如果数据量过大，则需要将数据存储在磁盘中。然而磁盘的读取(I/O)速率相比内存而言较为低下。即使是AVL树，平均查找为时间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">logN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>，对于1千万的数据，则大约需要24次对磁盘的访问。</p>
<h2 id="4-7-b-tree">4.7 B-Tree</h2>
<p>  B树是一棵自平衡的多路平衡查找树，一棵的M叉B树的最坏查找时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mfrac><mi>M</mi><mn>2</mn></mfrac></msub><mi>N</mi></mrow><annotation encoding="application/x-tex">log_{\frac{M}{2}}{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.200905em;vertical-align:-0.5064649999999999em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.734335em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8720928571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5064649999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></span>。M(叉)阶B树具有如下特点：</p>
<ol>
<li>所有数据都存储在树叶上，(其他节点只承担索引的作用)。</li>
<li>非叶子节点，存储最多M-1个关键字(索引)</li>
<li>如果根不是叶子节点，则根的子节点为[2, M]个</li>
<li>每个非叶子节点的子节点个数在[M/2, M]个，向上取整。</li>
<li>所有叶子节点都在同一高度。</li>
<li>所有叶子节点具有[L, L/2]个数据项(L不一定=M )</li>
</ol>
<img src="/2022/03/19/B-Tree/5阶B树.png" alt="5阶B树,并且L=5" style="zoom:80%;">
<h3 id="4-5-1-b树的插入">4.5.1 B树的插入</h3>
<p>  若树叶没有满的情况下，直接插入即可。较为复杂的插入情况：</p>
<img src="/2022/03/19/B-Tree/将57插入到5阶B树后.png" alt="将57插入到5阶B树后" style="zoom:80%;">
<h4 id="1-叶子满但能够分裂">1、叶子满但能够分裂</h4>
<p>  值55想要插入下图，该树叶已满，此时在满足树叶具有[L, L/2]的情况下，可以将树叶平均分裂成两个树叶后插入。这种插入变化情况是较少的。因为一次插入，就能保证下L/2次不会分裂。</p>
<img src="/2022/03/19/B-Tree/将55插入到5阶B树后引起分裂.png" alt="将55插入到5阶B树后引起分裂" style="zoom:80%;">
<h4 id="2-叶子满不能分裂父分裂">2. 叶子满不能分裂父分裂</h4>
<p>  值40想要插入时，插入位置树叶已满，同时父节点也已满（节点上最多具有M-1个个索引），可以将父节点分裂。（如果分裂后，父父节点满，则同时继续向上分裂），如果继续分裂到树根，如果继续分裂，则会的到两个树根，此时只能将树根分裂，并给他们建立一个新的树根（这是允许树根只有两个子节点的原因）。<br>
  这是B树增加高度的唯一方式。</p>
<img src="/2022/03/19/B-Tree/将40插入到5阶B树后引起父节点分裂.png" alt="将40插入到5阶B树后引起父节点分裂" style="zoom:80%;">
<h3 id="4-5-2-b树的删除">4.5.2 B树的删除</h3>
<h4 id="1-删除后可以从兄弟节点借">1. 删除后可以从兄弟节点借</h4>
<p>  如果叶子节点的值删除后，节点数量值小于L/2，但是相邻兄弟节点大于L/2，则可以从兄弟节点借。</p>
<h4 id="2-删除后与兄弟节点合并">2. 删除后与兄弟节点合并</h4>
<p>  兄弟节点也只有L/2，那么可以和兄弟节点合并，同时父节点会失去一个儿子。如果父节点失去子节点后也少于，则向兄弟节点借，如果不行，则继续与兄弟节点合并。。。，如果这个操作进一步导致根只有一个子节点，那么删除根，并让这个子节点作为根。<br>
  这是B树降低高度的唯一方式。</p>
<img src="/2022/03/19/B-Tree/继40后删除99节点引起的合并.png" alt="继上图后删除99节点引起的合并" style="zoom:80%;">
]]></content>
      <categories>
        <category>cs基础</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>ElementUI+Vue+PageHelp实现分页展示</title>
    <url>/2021/01/08/ElementUI-Vue-PageHelp%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>表格的分页展示不仅能让页面更清晰，还能够减轻数据库的负担。</p>
<span id="more"></span>
<h2 id="一-前端">一、前端</h2>
<p>前端主要实现两个功能(表格与分页使用elementUI)：</p>
<ol>
<li>用户进入时，查询所有</li>
<li>用户手动查询，查询出结果，并将用户跳转到第一页的结果</li>
</ol>
<h3 id="1-查询所有">1.查询所有</h3>
<ol>
<li>用户进入该页面就查询所有：则该方法必须在页面的 created() 函数中调用，同时查询语句queryString默认为null、当前页默认为1，使用findPage()方法</li>
<li>请求的数据全部封装在 pagination 中。</li>
<li>返回的所有查到的结果使用 dataList 数组接收，datalist 绑定了表格中的数据</li>
<li>用户切换当前页：调用 handleCurrentChange(currentPage) 方法 (<span style="color:red">注：currentPage：elementUI获取用户选择页码</span>)，赋值当前页后，再次分页查询findPage()</li>
</ol>
<h3 id="2-用户查询">2. 用户查询</h3>
<ol>
<li>用户输入绑定 queryString，则这次查询带条件，</li>
<li>用户查询后必须将用户定位到第一页(无论他现在在第几页)， 调用handleCurrentChange(1)，即可</li>
</ol>
<h3 id="3-实现">3.实现</h3>
<ul>
<li>重点看几处注释处和vue的js部分即可，</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 页面meta --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>分页查询<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../plugins/elementui/index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../plugins/font-awesome/css/font-awesome.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../css/style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;hold-transition&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;filter-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--v-model绑定用户输入的查询条件 pagination.queryString--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;项目编码/项目名称&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pagination.queryString&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">class</span>=<span class="string">&quot;filter-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户自己查询，查询后定位到第一页 handleCurrentChange(1)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;handleCurrentChange(1)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dalfBut&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- :data=&quot;dataList 绑定表格中的数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">current-row-key</span>=<span class="string">&quot;id&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;dataList&quot;</span> <span class="attr">stripe</span> <span class="attr">highlight-current-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;index&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">label</span>=<span class="string">&quot;序号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;code&quot;</span> <span class="attr">label</span>=<span class="string">&quot;项目编码&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;项目名称&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;适用性别&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--将0、1、2转换为对应的性别--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; scope.row.sex == &#x27;0&#x27; ? &#x27;不限&#x27; : scope.row.sex == &#x27;1&#x27; ? &#x27;男&#x27; : &#x27;女&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span> <span class="attr">label</span>=<span class="string">&quot;适用年龄&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;remark&quot;</span> <span class="attr">label</span>=<span class="string">&quot;项目说明&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--获取原有数据--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--scope.row相当于当前行的数据对象，可以获取id(row.id)查询数据，然后回显 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleUpdate(scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.row)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--分页参数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagination-container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">&quot;pagiantion&quot;</span>                          &lt;!<span class="attr">--这里注释会出现问题</span>，<span class="attr">使用请删除--</span>&gt;</span></span><br><span class="line">                    @current-change=&quot;handleCurrentChange&quot;       <span class="comment">&lt;!--当前页绑定的函数，切换当前页时调用--&gt;</span></span><br><span class="line">                    :current-page=&quot;pagination.currentPage&quot;      <span class="comment">&lt;!--当前页--&gt;</span></span><br><span class="line">                    :page-size=&quot;pagination.pageSize&quot;            <span class="comment">&lt;!--每页大小--&gt;</span></span><br><span class="line">                    layout=&quot;total, prev, pager, next, jumper&quot;</span><br><span class="line">                    :total=&quot;pagination.total&quot;&gt;                  <span class="comment">&lt;!--数据总条数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../plugins/elementui/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/axios-0.18.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">pagination</span>: &#123;<span class="comment">//分页相关模型数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">currentPage</span>: <span class="number">1</span>,<span class="comment">//当前页码</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">pageSize</span>: <span class="number">10</span>,<span class="comment">//每页显示的记录数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">total</span>: <span class="number">0</span>,<span class="comment">//总记录数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">queryString</span>: <span class="literal">null</span><span class="comment">//查询条件,默认为空，在用户进入页面时，默认查询全部，当用户在输入框查询，才赋值(v-model绑定)</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">dataList</span>: [],<span class="comment">//当前页要展示的分页列表数据</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//钩子函数，VUE对象初始化完成后自动执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 查询所有抽取成findPage便于复用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">findPage</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//分页查询</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">findPage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 查询所有检查项,post请求参数在逗号后面单独写，get请求的参数：url.do？参数变量名+参数值</span></span></span><br><span class="line"><span class="language-javascript">                axios.<span class="title function_">post</span>(<span class="string">&#x27;/checkitem/findPage.do&#x27;</span>, <span class="variable language_">this</span>.<span class="property">pagination</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">flag</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 绑定数据, res返回的结果包含total:数据库总共多少条，rows：分页查询到的结果</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// res.data是得到的后端的封装的数据，res.data.data是后端封装的数据中查询的分页的结果，</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// res.data.data.rows是后端封装的数据中查询的分页的结果中rows的值，具体查看com.songbirds.health.entity.Result实体类</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">rows</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 总记录数</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">total</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">total</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//切换页码</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handleCurrentChange</span>(<span class="params">currentPage</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 将当前的页码赋值给分页的当前页</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> = currentPage;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 赋值后查询</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">findPage</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 查询后应该将当前页码改为1(避免后面页没数据显示，但是是有数据的)，在html中调用该方法时要赋值currentPage=1</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 上面注释这个用在用户查询，用户查询直接调用handleCurrentChange(1)，用户查询后，将用户跳到第一页</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="二-后端">二、后端</h2>
<h3 id="0-结果封装类">0.结果封装类</h3>
<ol>
<li>前端分页请求查询数据的封装：QueryPageBean</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryPageBean</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer currentPage;<span class="comment">//页码</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;<span class="comment">//每页记录数(大小)</span></span><br><span class="line">    <span class="keyword">private</span> String queryString;<span class="comment">//查询条件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCurrentPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentPage;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// todo get与set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>后端查询到的分页结果的封装：PageResult&lt;&gt;</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long total;<span class="comment">//总记录数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; rows;<span class="comment">//当前页结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">(Long total, List&lt;T&gt; rows)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.total = total;</span><br><span class="line">        <span class="built_in">this</span>.rows = rows;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// todo get与set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>返回的结果封装：Result</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;<span class="comment">//执行结果，true为执行成功 false为执行失败</span></span><br><span class="line">    <span class="keyword">private</span> String message;<span class="comment">//返回结果信息</span></span><br><span class="line">    <span class="keyword">private</span> Object data;<span class="comment">//返回数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(<span class="type">boolean</span> flag, String message)</span> &#123; <span class="comment">// 保存、修改保存，(不需要返回数据结果)</span></span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(<span class="type">boolean</span> flag, String message, Object data)</span> &#123;<span class="comment">// 查询回显(需要返回数据结果)</span></span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// todo get与set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-controller层">1. controller层</h3>
<ol>
<li>由于发的是post请求，所以，请求的数据需要从请求体中获取。实现如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/checkitem&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckItemController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 分页查询</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: [queryPageBean] ：后端用来接受前端的查询的所有请求数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: com.songbirds.health.entity.Result ：返回的封装的结果数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: songbirds</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2021/1/7-21:19</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/findPage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">findPage</span><span class="params">(<span class="meta">@RequestBody</span> QueryPageBean queryPageBean)</span>&#123;  <span class="comment">// @RequestBody 指定从请求体获取</span></span><br><span class="line">        <span class="comment">// PageResult：用于封装数据库分页查询的结果</span></span><br><span class="line">        PageResult&lt;CheckItem&gt; pageResult = checkItemService.findPage(queryPageBean);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="literal">true</span>, <span class="string">&quot;查询成功&quot;</span>, pageResult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<h3 id="2-serviceimpl实现类层：-service层略">2. serviceImpl实现类层：(service层略)</h3>
<ol>
<li>需要判断是否有查询条件，如果有使用模糊查询。如果没有，查询全部</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(interfaceClass = CheckItemService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckItemServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CheckItemService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 分页查询</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: [queryPageBean]</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: PageResult&lt;CheckItem&gt; : 分页查询封装的结果</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: songbirds</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2021/1/7-18:20</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResult&lt;CheckItem&gt; <span class="title function_">findPage</span><span class="params">(QueryPageBean queryPageBean)</span> &#123;</span><br><span class="line">        <span class="comment">// 前端传来的pageSize不能无限大，根据前端传参进行分页</span></span><br><span class="line">        <span class="comment">// 此处可限制：queryPageBean.getPageSize() &gt; 50?50:queryPageBean.getPageSize();直接替换下面的第二个参数即可</span></span><br><span class="line">        <span class="comment">// 参数：arg0：当前页， arg1：每页大小</span></span><br><span class="line">        PageHelper.startPage(queryPageBean.getCurrentPage(), queryPageBean.getPageSize());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询条件不为空</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotEmpty(queryPageBean.getQueryString()))&#123;</span><br><span class="line">            <span class="comment">// 使用模糊查询</span></span><br><span class="line">            queryPageBean.setQueryString(<span class="string">&quot;%&quot;</span> + queryPageBean.getQueryString() + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">	    <span class="comment">// 使用查询条件查询</span></span><br><span class="line">        <span class="comment">// Page：com.github.pagehelper.Page，继承Arraylist,所以可以封装集合</span></span><br><span class="line">        <span class="comment">// 由于使用了PageHelper，他会自动拦截查询分页所需的结果(总条数，每页大小(在上面start</span></span><br><span class="line">        Page方法中已经设置了))</span><br><span class="line">        Page&lt;CheckItem&gt; page = checkItemDao.findByCondition(queryPageBean.getQueryString());</span><br><span class="line">        <span class="comment">// 获取com.github.pagehelper.Page中的total(总数)与Result(结果)</span></span><br><span class="line">        PageResult&lt;CheckItem&gt; pageResult = <span class="keyword">new</span> <span class="title class_">PageResult</span>&lt;&gt;(page.getTotal(),page.getResult());</span><br><span class="line">        <span class="keyword">return</span> pageResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-dao对应的xml-dao层略">3.dao对应的xml(dao层略)</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 由于使用了PageHelper，他会自动拦截查询分页所需的结果，这里只专注核心，查询用户需要的结果即可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;checkItem&quot;</span>&gt;</span></span><br><span class="line">       select * from t_checkitem</span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 动态条件判断时，参数为基础数据类型用value --&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 判断查询条件QueryString是否为空 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;value != null and value.length&gt;0&quot;</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 用户查询code编码或者名称皆可 --&gt;</span></span><br><span class="line">               code like #&#123;queryString&#125; or name like #&#123;queryString&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="三-结果展示">三、结果展示</h3>
<ol>
<li>进入页面查询全部</li>
</ol>
<p><img src="/2021/01/08/ElementUI-Vue-PageHelp%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E5%85%A8%E9%83%A8%E7%A0%81.png" alt></p>
<ol start="2">
<li>用户手动查询</li>
</ol>
<p><img src="/2021/01/08/ElementUI-Vue-PageHelp%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/%E7%94%A8%E6%88%B7%E6%89%8B%E5%8A%A8%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E7%A0%81.png" alt></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>ajax</tag>
        <tag>ElementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>HotSpot的细节实现</title>
    <url>/2021/03/30/HotSpot%E7%9A%84%E7%BB%86%E8%8A%82%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>HotSpot的细节实现 (读书笔记)</p>
<span id="more"></span>
<h3 id="1-根节点-gc-roots-枚举">1. 根节点(GC Roots)枚举</h3>
<blockquote>
<p>枚举出所有GC Roots根节点</p>
</blockquote>
<p>  可以作为GC Roots的节点主要有：全局性的引用与上下文执行，详见<a href="/2021/03/22/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/" title="JVM垃圾回收">JVM垃圾回收</a>的可达性分析小节。目前，所有收集器进行<strong>根节点(GC Roots)枚举</strong>必须STW。现在可达性分析算法耗时查找引用链可以与用户线程一起并发。<br>
  目前的Java虚拟机使用准确式垃圾回收集，所以当用户线程1后，并不需要检查完所有上下文和全局引用位置，虚拟机应当<strong>直接得到哪些地方存放对象引用</strong>。HotSpot使用OopMap的数据结构。(并不需要真的全部从方法区等GC Roots开始查找)。</p>
<table><br></table>
<h3 id="2-安全点-safepoint">2. 安全点(SafePoint)</h3>
<blockquote>
<p>在&quot;特定的位置&quot;记录修改引用关系的指令</p>
</blockquote>
<p>  在程序运行期间很多指令都是有可能修改引用关系的，即要修改OopMap，如果对每一条指令都生成OopMap，将会需要大量的空间存储数据结构。因此设置了SafePoint去强制用户程序执行到SafePoint暂停开始处理OopMap 并GC。<br>
  安全点位置的选取基本上是以“是否具有让程序长时间执行的特征”为标准进行选定的。(“长时间执行”的最明显特征就是指令序列的复用，与指令长短无关。例如方法调用、循环跳转、异常跳转 等都属于指令序列复用，所以只有具有这些功能的指令才会产生安全点)。</p>
<p>  需要考虑所有线程都在安全点停顿：<strong>抢先式中断、主动式中断</strong>。</p>
<ul>
<li>抢先式中断：GC时先中断所有用户线程，如果发现有线程没有到达安全点，恢复执行，直到所有线程到安全点(目前几乎不用)</li>
<li>主动式中断：GC时，不直接对线程操作，记录一个标志，各线程不断轮询这个标志(标志与安全点重合)，一旦发现中断标志为真时，在自己最近的中断点主动中断挂起。</li>
</ul>
<p>HotSpot为了提高轮询的效率，使用内存保护陷阱方式，将轮询操作精简至汇编指令。<br>
<strong>内存保护陷阱</strong>：需要暂停用户线程，把xx内存页设置不可读，执行test指令会产生一个自陷异常信号，被预先注册的异常挂起等待。</p>
<table><br></table>
<h3 id="3-安全区域">3. 安全区域</h3>
<blockquote>
<p>指能够确保在某一段代码片段之中，引用关系不会发生变化，因此，在这个区域中任意地方开始垃圾收集都是安全的。我们也可以把安全区域看作被扩展拉伸了的安全点。</p>
</blockquote>
<p>  长时间不执行的某段代码，该线程无法响应虚拟机的中断请求，必须引入安全区域(Safe Region)解决。</p>
<p>  当用户线程执行到<strong>安全区域</strong>里面的代码时，首先标识自己进入安全区域。垃圾收集时，不需要处理这些安全区域的线程。当线程离开安全区域，要检查虚拟机是否已经完成根节点枚举。如果完成，线程正常继续执行，否则一直等待，直到收到可以离开安全区域的信号。</p>
<table><br></table>
<h3 id="4-记忆集与卡表">4. 记忆集与卡表</h3>
<h4 id="4-1-记忆集">4.1 记忆集</h4>
<blockquote>
<p>记忆集：记录从非收集区域指向收集区域的指针集合的抽象数据结构。</p>
</blockquote>
<p>  记忆集是为了解决对象跨代引用的问题，新生代建立的数据结构，避免把老年代加入GC Roots扫描范围。如果不考虑效率和成本，最简单的实现可以用非收集区域中所有跨代引用的对象数组实现。垃圾收集器不需要这么完整的记录精度。</p>
<ul>
<li>字长精度：每个记录精确到一个机器字长(处理器寻址位，如32位、64位)，该字包含跨代指针。</li>
<li>对象精度：每个记录精确到一个对象，该对象字段含有一个跨代指针。</li>
<li>卡精度：每个记录精确到一块内存区域，该区域含有跨代指针。</li>
</ul>
<h4 id="4-2-卡表">4.2 卡表</h4>
<blockquote>
<p>上面的卡精度就是用卡表实现的记忆集，<strong>卡表就是记忆集的一种具体体现</strong>，它定义了记忆集的记录精度、与堆内存映射的关系(卡表与记忆集类比HashMap与Map的关系记忆)</p>
</blockquote>
<p>  卡表的最简单的形式可以只是一个字节数组，HotSpot默认卡表逻辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CARD_TABLE [this address &gt;&gt; 9] = 0;</span><br></pre></td></tr></table></figure>
<p>  字节数组CARD_TABLE的每一个元素都对应着其表示区域中一块大小的内存块，这个内存块被称作&quot;<strong>卡页</strong>&quot;(Card Page)。一般卡页都是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>字节数。如上代码，HotSpot虚拟机使用的卡页是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">2^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>，即512字节(地址右移9位，地址除以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">2^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>)。<br>
如果<strong>卡表</strong>标识内存区域的起始地址是0x0000的话，数组CARD_TABLE的第0、1、2号元素，分别对应了 地址范围为0x0000～0x01FF、0x0200～0x03FF、0x0400～0x05FF的卡页内存块。</p>
<img src="/2021/03/30/HotSpot%E7%9A%84%E7%BB%86%E8%8A%82%E5%AE%9E%E7%8E%B0/卡表对卡页寻址.png" alt="卡表对卡页寻址" style="zoom:80%;">
<p>  一个卡页的内存中通常包含不止一个对象，只要卡页内有一个（或更多）对象的字段存在着跨代 指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏（Dirty），没有则标识为0。在垃 圾收集发生时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，把它们加入GC Roots中一并扫描。</p>
<table><br></table>
<h3 id="5-写屏障">5. 写屏障</h3>
<p>  使用记忆集缩减GC Roots扫描范围后，还需要解决<strong>卡表</strong>的元素维护问题，例如它们何时变脏、谁把它们变脏。</p>
<ul>
<li>何时变脏：有其他分代区域对象引用本区域对象时，卡表变脏。</li>
<li>谁操作：写屏障(Writte Barrier)。</li>
</ul>
<blockquote>
<p>写屏障：看作虚拟机层面对&quot;引用类型字段赋值&quot;这个动作的AOP切面，在引用对象赋值时会产生一个环形通知，供程序执行额外动作。直至G1收集器出现之前，其他收集器都只用到了写后屏障。</p>
</blockquote>
<p>  开启写屏障会导致每次引用更新产生额的开销。<br>
  卡表在高并发场景下面临&quot;伪共享&quot;问题：现代处理器的缓存系统是以缓存行为单位存储的，当多线程修改互相独立的变量时，如果这些变量恰好位于同一个缓存行，会彼此影响(写回、无效化、同步)，导致性能降低。<br>
如果处理器的缓存行大小为64字节，由于一个卡表元素占1个字节，64个卡表元素将共享同一个缓存行，这64个卡表元素对应的卡页总内存为32KB(64*512字节)。如果不同线程更新的对象正好处于32KB的内存区域，导致更新卡表时正好写入同一个缓存而影响性能。</p>
<p>避免伪共享问题：先检查卡表标记，只有当卡表元素未被标记时才将其变脏。在JDK 7之后，HotSpot虚拟机增加了一个新的参数-XX：+UseCondCardMark，用来决定是否开启 卡表更新的条件判断。开启会增加一次额外判断的开销，但能够避免伪共享问题。</p>
<table><br></table>
<h3 id="6-并发的可达性分析">6. 并发的可达性分析</h3>
<blockquote>
<p>可达性分析理论上要求全部过程都基于一个能保证一致性的快照中才能进行分析。意味着要全程STW。</p>
</blockquote>
<p>  在根节点枚举中，由于OopsMap的存在，停顿相对固定，不与堆相关。但是GC Roots往下遍历耗时依旧与Java堆成正比例关系。</p>
<p>  为生么必须保证一致快照才能遍历？</p>
<h4 id="6-1-三色标记：">6.1 三色标记：</h4>
<ul>
<li>白色：对象尚未被垃圾收集器访问过。如果在分析结束阶段，仍是白色，则不可达。</li>
<li>黑色：对象已经被垃圾收集器访问过，且该对象的所有引用都访问过，黑色对象不可能直接指向白色对象。</li>
<li>灰色：对象已经被垃圾收集器访问过，但对象上至少还有一个引用每一被扫描过。</li>
</ul>
<h4 id="5-2-三色标记的过程：">5.2 三色标记的过程：</h4>
<p>  首先GCRots被染成灰色，从GCRoots向下遍历。将GCRoots指向白色的对象在染成灰色，在该GCRoots遍历完直接指向的对象后，该GCRoots染成黑色。再从被染灰色的对象向下遍历，重复上面的过程，遍历完成后。剩余的白色对象被判断为垃圾。</p>
<h4 id="5-3-并发三色标记的问题：">5.3 并发三色标记的问题：</h4>
<p>  如果用户收集线程与GC线程并发工作， 可能会出现两种问题。</p>
<ol>
<li>将原本消亡的对象标记为存活：<br>
GC线程将某对象标记为黑色，这时用户线程将该对象的引用去除，导致该对象实际应该消亡，但是被标记为黑色，导致存活。(可以忍受，称为浮动垃圾)。(独立的非GCRoots的黑色对象)</li>
<li>将原本存活的对象标记为垃圾：
<ol>
<li>赋值器插入了一条或多条从黑色对象到白色对象的新引用。(添加黑色指向白色)</li>
<li>赋值器删除了全部从灰色对象到该白色对象的直接或间接引用。(删除灰色指向白色的链接)</li>
</ol>
</li>
</ol>
<p>  由于GC不会再从黑色对象开始遍历，所以该白色对象不会再被标记。标记完成后，该对象被误判为垃圾。(不可忍受)，需要两个条件同时满足。</p>
<p><img src="/2021/03/30/HotSpot%E7%9A%84%E7%BB%86%E8%8A%82%E5%AE%9E%E7%8E%B0/%E5%AD%98%E6%B4%BB%E5%AF%B9%E8%B1%A1%E8%AF%AF%E5%88%A4%E4%B8%BA%E6%AD%BB%E4%BA%A1.png" alt></p>
<h4 id="5-4-三色并发标记问题的解决">5.4 三色并发标记问题的解决</h4>
<blockquote>
<p>由于必须同时满足两个条件，只需破坏其中一个即可。<br>
增量更新与原始快照。</p>
</blockquote>
<h5 id="5-4-1-增量更新">5.4.1 增量更新</h5>
<p>  增量更新破坏的是第一个条件，当黑色对象插入新的指向白色对象的引用关系时，将这个新的插入记录下来，等并发扫描结束后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。(一旦黑色对象指向指向白色对象，将黑色对象转变为灰色)。</p>
<h5 id="5-4-2-原始快照">5.4.2 原始快照</h5>
<p>  原始快照破坏第二个条件，当灰色对象删除指向白色对象的引用时，将这个要删除的引用记录下来，在并发扫描结束后，将这些记录过的灰色对象为根，从新扫描一次。(无论引用关系删除与否，按刚开始扫描的那一刻的对象快照搜索)。</p>
<h4 id="5-5-三色标记补充">5.5 三色标记补充</h4>
<p>  以上对引用关系的插入或删除，都是通过写屏障实现的。例如CMS是基于增量更新做并发标记，G1、Shenandoah使用原始快照。</p>
<table><br></table>
<h3 id="参考">参考</h3>
<ul>
<li>《深入理解Java虚拟机 JVM高级特性与最佳实践》第二部分第三章</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>Jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian11安装playwright依赖缺失问题解决</title>
    <url>/2022/04/10/Debian11%E5%AE%89%E8%A3%85playwright%E4%BE%9D%E8%B5%96%E7%BC%BA%E5%A4%B1%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>最近的在Debian11系统上安装playwright时出现安装问题，网上的解决方案较少(几乎没有)，本篇文章是记录我解决方案的步骤。</p>
<span id="more"></span>
<p>本篇文章写于2022年04月，以下只针对当时情况。</p>
<p>  开始按照提示，使用如下命令安装playwright（python环境下，py3 &gt; 3.7）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install playwright</span><br></pre></td></tr></table></figure>
<p><img src="/2022/04/10/Debian11%E5%AE%89%E8%A3%85playwright%E4%BE%9D%E8%B5%96%E7%BC%BA%E5%A4%B1%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/161674660-f07c3c5c-e1dd-43fa-a673-39508f8da4dc.png" alt></p>
<p>在安装后启动程序，报出install-deps出现问题，于是跟着提示执行安装install-deps。<br>
<img src="/2022/04/10/Debian11%E5%AE%89%E8%A3%85playwright%E4%BE%9D%E8%B5%96%E7%BC%BA%E5%A4%B1%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/161674718-b2a6d99f-3aa3-4bcd-8d06-6c74f849ae15.png" style="zoom:80%;"></p>
<p>如图接着报出依赖缺失问题，在仓库无法定位到几个包。接着查阅官方资料，发现官方对于linux系统，只主动支持了Ubuntu 18.04 and Ubuntu 20.04。<a href="https://playwright.dev/docs/library#system-requirements">Playwright系统要求官方文档</a><br>
  接着在另一个仓库下的issue下找到如下issue：<a href="https://github.com/brillout/vite-plugin-ssr/issues/283">Debian not supported by playwright · Issue #283</a>，按照其解决方案，<code>libjpeg-turbo8</code> 和 <code>libicu66</code>这两个软件包不存在debian官方仓库中，需要去下载ubuntu的软件包，然后手动安装。即可解决，具体解决步骤如下：<br>
本人使用的是Debian11，下载的是ubuntu20的软件安装包。</p>
<ol>
<li>在pkgs.org下载<a href="https://pkgs.org/download/libjpeg-turbo8">libjpeg-turbo8_2.0.3-0ubuntu1_amd64.deb</a></li>
<li>在pkgs.org下载<a href="https://pkgs.org/download/libicu66">libicu66_66.1-2ubuntu2_amd64.deb</a></li>
<li>手动执行<code>dpkg -i &lt;package&gt;.deb</code>命令安装</li>
<li>再重新安装<code>playwright install-deps</code>即可安装成功</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>Java小记</title>
    <url>/2022/02/26/Java%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>主要记录不常用的 java 用法</p>
<span id="more"></span>
<h3 id="1-数组转list">1 数组转List</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常用，但是转为List后不能修改List</span></span><br><span class="line"><span class="comment">// 注意，如果是int数组，则结果为List&lt;int[]&gt;</span></span><br><span class="line">String[]  strArr = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">List&lt;String&gt; aList = Arrays.asList(strArr);</span><br><span class="line">Integer[]  integerArr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; bList = Arrays.asList(integerArr);</span><br><span class="line"><span class="type">int</span>[]  intArr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">List&lt;<span class="type">int</span>[]&gt; cList = Arrays.asList(intArr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转为List后可以修改</span></span><br><span class="line"><span class="comment">// 基本类型(int等)需要先boxed()转包装类</span></span><br><span class="line">List&lt;Integer&gt; intList = Arrays.stream(arr).boxed().collect(Collectors.toList());</span><br><span class="line">List&lt;String&gt; strList = Arrays.stream(strArr).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐方式 可以修改</span></span><br><span class="line">String[] strArray = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">List&lt; String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(strArray.length);</span><br><span class="line">Collections.addAll(arrayList, strArray);</span><br></pre></td></tr></table></figure>
<h3 id="2-list转数组">2 List转数组</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转包装类数组</span></span><br><span class="line">List&lt;Integer&gt; alist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Integer[] integers1 = alist.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[collect.size()]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转基本类数组</span></span><br><span class="line"><span class="type">int</span>[] ints1 = alist.stream().mapToInt(i -&gt; i).toArray();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存区域</title>
    <url>/2021/02/22/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</url>
    <content><![CDATA[<p>Java的内存区域在jdk1.6时发生了变化，这里主要介绍jdk1.8的内存区域，同时会指明发生了那些变化。(读书笔记)</p>
<span id="more"></span>
<h3 id="一-运行时的数据区域">一、运行时的数据区域</h3>
<h4 id="1-内存区域划分图示">1. 内存区域划分图示</h4>
<h5 id="1-1-jdk1-7之前：">1.1 <strong>JDK1.7之前</strong>：</h5>
<p><img src="/2021/02/22/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/JDK1.6%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%88%92%E5%88%86.png" alt="JDK1.6内存区域划分"></p>
<h5 id="1-2-jdk1-8">1.2 <strong>JDK1.8</strong></h5>
<p><img src="/2021/02/22/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/JDK1.8%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%88%92%E5%88%86.png" alt="JDK1.8内存区域划分"></p>
<p>如上图所示：</p>
<ul>
<li>
<p>线程私有：虚拟机栈、本地方法栈、程序计数器</p>
</li>
<li>
<p>线程共享：堆、元空间(方法区)、直接内存(非运行时数据区的一部分)</p>
</li>
</ul>
<h4 id="2-虚拟机栈">2.虚拟机栈</h4>
<ol>
<li><strong>虚拟机栈可以简单的理解为执行Java 方法 (也就是字节码) 服务。描述的是 Java 方法执行的内存模型。</strong></li>
<li>Java 内存可以粗糙的区分为<strong>堆内存</strong>（Heap）和<strong>栈内存</strong> (Stack),其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。 （实际上，Java 虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。）</li>
<li><strong>Java虚拟机会出现两种错误：<code>StackOverFlowerError</code>与<code>OutOfMemoryError</code>(OOM)。</strong>
<ul>
<li><code>StackOverFlowerError</code>：<strong>栈内存溢出错误</strong>：若 Java 虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 <code>StackOverFlowError</code> 错误。</li>
<li><code>OutOfMemoryError</code>：<strong>堆内存溢出错误</strong>：若 Java 虚拟机堆中没有空闲内存，并且垃圾回收器也无法提供更多内存的话。就会抛出 OutOfMemoryError 错误。</li>
</ul>
</li>
<li>Java 栈可用类比数据结构中栈，Java 栈中保存的主要内容是栈帧，每一次函数调用都会有一个对应的栈帧被压入 Java 栈，每一个函数调用结束后，都会有一个栈帧被弹出。 Java 方法有两种返回方式：1. return 语句。2. 抛出异常。以上两种方式会导致栈帧弹栈。</li>
</ol>
<h4 id="3-本地方法栈">3.本地方法栈</h4>
<ol>
<li><strong>本地方法栈可以简单的理解为执行本地 方法 (也就是Native) 服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</li>
<li>本地方法栈的执行也会创建栈帧。</li>
<li>本地方法栈也会有<code>StackOverFlowerError</code>与<code>OutOfMemory</code>错误。</li>
</ol>
<h4 id="4-程序计数器">4.程序计数器</h4>
<ol>
<li><strong>程序计数器可以看作是当前线程所执行的字节码的行号指示器</strong>，字节码解释器通过改变这个计数器的值来选取下一条执行的字节码指令，分支、循环、跳转、异常处理、线程恢复(可以保存线程的执行现场) 等功能都需要依赖这个计数器来完成。</li>
<li>程序计数器是线程私有的，每个线程拥有自己的计数器，各计数器互不影响，目的是为了线程切换后能恢复到正确的执行位置。</li>
<li>程序计数器是唯一不会出现<code>OutOfMemory</code>错误，生命周期与自己的线程相同</li>
</ol>
<h4 id="5-堆">5.堆</h4>
<ol>
<li>堆是JVM中最大的地方，几乎所有的对象实例都在这里分配内存</li>
<li>Java的垃圾回收主要在堆中，因此也被称为GC堆，Java8采用的分代垃圾回收算法<br>
<span style="color:red"><a href="/2021/03/22/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/" title="JVM垃圾回收">JVM垃圾回收</a></span>。</li>
<li>堆内存分为：
<ol>
<li>新生代(Young Generation) :包括Eden区(复制算法，gc后存活的复制进入survivor或老生代(大对象))，Survivor From与Survivor To(复制)</li>
<li>老生代(Old Generation): (标记整理)</li>
<li>永生代(Permanent Generation)   || 元空间(JDK1.8)</li>
</ol>
</li>
</ol>
<p><img src="/2021/02/22/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/Java%E7%9A%84%E5%A0%86%E5%86%85%E5%AD%98(%E5%B9%B4%E9%BE%84%E4%BB%A3)%E5%88%92%E5%88%86.png" alt="Java的堆内存(年龄代)划分"></p>
<h4 id="6-方法区-元空间">6.方法区(元空间)</h4>
<p>线程共享，用于存放被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>
<ol>
<li>
<p>方法区与永久代的关系：</p>
<ul>
<li>永久代是HotSpot虚拟机中对方法区的一种实现。</li>
</ul>
</li>
<li>
<p>JDK1.8移除永久代替换为元空间的原因</p>
<ul>
<li>
<p>永久代存在OOM问题：永久代有JVM设置的固定大小，元空间受本机内存的限制，元空间OOM的几率会更小。</p>
</li>
<li>
<p>在 JDK8，合并 HotSpot 和 JRockit 的代码时, JRockit 从来没有一个叫永久代的东西, 合并之后就没有必要额外的设置这么一个永久代的地方了</p>
</li>
</ul>
</li>
</ol>
<h4 id="7-运行时常量池">7. 运行时常量池</h4>
<p>运行时常量池是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池表（用于存放编译期生成的各种字面量和符号引用）</p>
<ol>
<li>jdk1.7之前，运行时常量池包括字符串常量池在方法区，HotSpot的实现为永久代。</li>
<li>jdk1.7，字符串常量池从方法区移入堆中，运行时常量池依旧在方法区，HotSpot的实现为永久代。</li>
<li>jdk1.8，永久代移除，替换为元空间，运行时常量池也移入元空间。</li>
</ol>
<h4 id="8-直接内存">8. 直接内存</h4>
<p>直接内存不受java堆分配的限制，受本机总内存大小以及处理器寻址空间的限制。使用过多，依旧会出现OOM问题。</p>
<h3 id="二-hotspot虚拟机的对象管理">二、HotSpot虚拟机的对象管理</h3>
<h4 id="2-1-对象的创建">2.1、 对象的创建</h4>
<p><img src="/2021/02/22/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/Java%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B.png" alt></p>
<ol>
<li>
<p><strong>类加载检测</strong><br>
当虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。<br>
<span style="color:red">类加载机制：。。。</span></p>
</li>
<li>
<p><strong>分配内存</strong><br>
在<strong>类加载检查</strong>通过后，接下来虚拟机将为新生对象<strong>分配内存</strong>。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。<strong>分配方式</strong>有 <strong>“指针碰撞”</strong> 和 <strong>“空闲列表”</strong> 两种，<strong>选择哪种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定</strong>。</p>
<ol>
<li>指针碰撞：堆内存规整，用过的内存一边，没用过的另一半，中间一个分界指针，只需要向没用过的内存方向移动指针即可</li>
<li>空闲列表：对内存不规整，堆内存维护一个列表，列表记录那块内存可用，分配的时候找一个足够大的内存来划分对象实例。</li>
</ol>
<p>分配内存的线程安全问题：</p>
<ol>
<li>CAS+失败重试机制：虚拟机采用CAS再配上失败重试机制保证更新操作的原子性</li>
<li>TLAB：为每一个线程预先再EDEN区分配一块内存，JVM再给对象分配内存时首先在TLAB分配，当对象大于TLAB的剩余内存或TLAB的内存用尽时，再采用上述的CAS进行内存分配。</li>
</ol>
</li>
<li>
<p><strong>初始化零值</strong><br>
分配内存完毕之后，需要将分配的内存空间初始化为零值，保证对象实例字段不赋值也可以直接使用，能访问这些字段的数据类型对应的零值。</p>
</li>
<li>
<p><strong>设置对象头</strong><br>
初始化零值之后，对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 <strong>这些信息存放在对象头</strong></p>
</li>
<li>
<p><strong>执行init方法</strong><br>
对虚拟机而言，对象已经产生，但java程序而言，对象创建才刚开始，对象需要执行init方法，该方法把对象（实例变量）按照程序中定义的初始赋值进行初始化；</p>
</li>
</ol>
<h4 id="2-2-对象的内存布局">2.2、 对象的内存布局</h4>
<p>​    在HotSpot虚拟机中，对象在内存中可以分为三块区域：<strong>对象头、实例数据、对齐填充</strong></p>
<p><img src="/2021/02/22/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.png" alt></p>
<ol>
<li>对象头：包括两部分信息，第一部分<strong>存储对象的自身运行时数据</strong>(哈希码、GC分代年龄、锁状态的标志等等)，另一部分是<strong>类型指针</strong>，即对象指向它的类元数据的指针。</li>
<li>实例数据：存储有效信息，即存储程序所定义的各种类型的字段内容。</li>
<li>对齐填充：不必然存在，仅仅起一个占位的作用：由于HotSpot虚拟机要求对象起始地址必须是<strong>8字节的整数倍</strong>(对象的大小必须是8字节的整数倍)。填充数据不是必须存在的，仅仅是为了字节对齐。<br>
根据“计算机组成原理”，8个字节是计算机读取和存储的最佳实践</li>
</ol>
<h4 id="3-3-对象的访问定位">3.3 、对象的访问定位</h4>
<p>​    对象的访问由虚拟机决定，主流的有两种：1. 使用句柄、2.直接指针</p>
<ol>
<li>句柄访问：<br>
java会将堆划分出来一部分内存去作为句柄池，reference中存储的就是对象的句柄地址，句柄中则是包含的对象实例的数据的地址和对象类型数据(如对象的类型，实现的接口、方法、父类、field等)的具体地址信息。<br>
例：Object obj = new Object();<br>
Object obj 表示一个本地引用，存储在java栈的本地变量表中，表示一个reference类型的数据。<br>
new Object()作为实例对象存放在java堆中，同时java堆中还存储了Object类的信息(对象的类型、实现接口、方法等)的具体地址信息，这些地址信息所执行的数据类型存储在方法区</li>
</ol>
<p><img src="/2021/02/22/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D-%E4%BD%BF%E7%94%A8%E5%8F%A5%E6%9F%84.png" alt></p>
<ol start="2">
<li>直接指针访问：<br>
使用直接指针访问，java对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址，如果是访问对象本身的话，就不需要多一次间接访问的开销。</li>
</ol>
<p><img src="/2021/02/22/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D-%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88.png" alt></p>
<p>优劣势：</p>
<ol>
<li>句柄：最大的好处是reference中存储的是稳定的句柄地址，在对象被移动(如垃圾回收的移动)时，只会改变句柄中的实例数据指针，而reference本身不需要被修改。</li>
<li>指针：最大的好处是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java中非常频繁，因此这类开销积少成多也是一项即位可观的执行成本。</li>
</ol>
<h3 id="参考">参考</h3>
<ul>
<li>《深入理解java虚拟机 JVM高级特性与最佳实践》第二部分第二章</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>Jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM垃圾回收</title>
    <url>/2021/03/22/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
    <content><![CDATA[<p>JVM的GC读书笔记</p>
<span id="more"></span>
<ul>
<li>STW：Stop The World，GC时暂停用户的线程。</li>
<li>STAB：Snapshot At The Beginning，原始快照(保留开始时的对象图)。用于解决并发扫描时对象消失的问题。</li>
<li>TAMS：Top at Mark Start，G1为每个Region设计的两个名为TAMS的指针，并发回收时新分配的对象地址都必须要在这两个指针位置以上。</li>
</ul>
<h3 id="1-内存分配与回收策略">1. 内存分配与回收策略</h3>
<p>  Java堆是垃圾回收器管理的主要区域，因此也被称为GC堆。现代收集器基本采用分代垃圾回收算法。所以 Java 堆还可以细分为：新生代和老年代：再细致一点有：Eden 空间、From Survivor、To Survivor 空间、老生代等。<strong>进一步划分的目的是更好地回收内存，或者更快地分配内存。</strong><br>
  总结：Eden区：标记-复制； Survivor区：标记-复制； 老生代：标记整理。</p>
<p><img src="/2021/03/22/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/Java%E5%A0%86%E7%A9%BA%E9%97%B4%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png" alt><br>
  大部分情况下，对象首先在Eden区分配，在一次新生代GC后，如果对象还活着，则会进入S0或者S1，并且对象的年龄还会加1(Eden-&gt;Survivor区后对象的初始年龄变为1)，当它的年龄增加到一定的程度，就会晋升到老年代中，年龄阈值可以通过参数<code>-XX:MaxTenuringThreshold</code>设置。<br>
  动态年龄计算：“Hotspot 遍历所有对象时，按照年龄从小到大对其所占用的大小进行累积，当累积的某个年龄大小超过了 survivor 区的一半时，取这个年龄和 MaxTenuringThreshold 中更小的一个值，作为新的晋升年龄阈值”。</p>
<p>  对象首先在Eden区诞生，如果Eden区满了，执行Minor GC，将Eden区和Survivor From区存活对象复制到Survivor To区，清除Eden区和Survivor From区。<br>
  Eden区相当于标记-复制算法(标记后复制到Survivor To区，清除Eden区)。Survivor From/To区是标记-复制算法，Survivor区一分为二，From区对象经历一次标记后，复制到To区，清除From区。</p>
<h4 id="1-1-hotspot虚拟机gc">1.1 HotSpot虚拟机GC</h4>
<p>  针对HotSpot VM的实现，它里面的GC准确的分类只有两大种：</p>
<ol>
<li>
<p>部分GC(Partial GC):</p>
<ul>
<li>新生代收集(Minor GC / Young GC) ：只对新生代进行垃圾收集</li>
<li>老年代GC(Major GC / Old GC) ：只对老年代进行垃圾收集。(Major GC在有的语境下= Full GC，注意问清楚提问者意图)</li>
<li>混合收集(Mixed GC)：对整个新生代和部分老年代进行垃圾收集</li>
</ul>
</li>
<li>
<p>整堆收集(Full GC)：收集整个Java堆和方法区</p>
</li>
</ol>
<table><br></table>
<h3 id="2-对象已死？">2. 对象已死？</h3>
<p>  java堆是垃圾回收的主要区域，因此也成为GC堆。在进行回收前，需要判断对象是否死亡。算法：引用计数法、可达性分析算法。</p>
<h4 id="2-1-引用计数法">2.1 引用计数法</h4>
<p>  给对象添加一个引用计数器，每当有一个对象引用它，计数器加一；当引用失效时，计数器减一；任何时刻计数器为零的对象就是不可能在被使用的。</p>
<p>  这个方法原理简单，效率也高。但是，在<strong>主流Java虚拟机没有使用引用计数法来管理内存</strong>，主要原因是很难解决对象的相互循环引用的问题。(相互循环引用：对象A与对象B相互引用，除此之外再无其他引用，实际上这两个对象已经不能再被访问，但是他们相互引用着对方，导致他们的引用计数不为零，引用计数算法无法回收他们)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReferenceCountingGc</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ReferenceCountingGc</span> <span class="variable">objA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceCountingGc</span>();</span><br><span class="line">        <span class="type">ReferenceCountingGc</span> <span class="variable">objB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceCountingGc</span>();</span><br><span class="line">        objA.instance = objB;</span><br><span class="line">        objB.instance = objA;</span><br><span class="line">        objA = <span class="literal">null</span>;</span><br><span class="line">        objB = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-可达性分析算法">2.2 可达性分析算法</h4>
<p>  基本思路是通过一系列称为&quot;GC Roots&quot;的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索通过的路径称为&quot;引用链&quot;(Reference Chain)，如果某个对象到GC Roots没有任何引用链相连，则该对象是不可用的。</p>
<img src="/2021/03/22/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/GC_Roots判断对象是否可达.png" style="zoom:80%;">
<p>Java中，可以作为GC Roots的对象是：</p>
<ul>
<li>虚拟机栈(栈帧中的本地变量表)中引用的对象。</li>
<li>本地方法栈(Native方法)中引用的对象</li>
<li>在方法区中的类静态属性引用的对象</li>
<li>在方法区中常量引用的对象</li>
<li>所有被同步锁持有的对象</li>
</ul>
<h4 id="2-3-再谈引用">2.3 再谈引用</h4>
<p>  无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否引用链可达，判定对象是否存活都和“引用”离不开关系。希望描述一些对象：当内存空间足够时，能够保留在内存之中，如果内存空间在GC后仍然紧张，就可以抛弃这些对象。<br>
  在JDK1.2之后，Java对引用的概念进行了扩充，将引用分为强引用（Strongly Re-ference）、软引用（Soft Reference）、弱引用（Weak Reference）和虚引用（Phantom Reference）4种，这4种引用强 度依次逐渐减弱。</p>
<ol>
<li>强引用：指程序代码之中最普遍存在的引用赋值，类似&quot;Object obj = new Object()&quot;，(栈上的对象指向堆中的对象)这种引用关系，只要强引用关系还在，GC回收器永远不会回收被强引用的对象。(宁愿抛出OOM错误)</li>
<li>软引用：指一些有用，但非必须的对象。在系统将要发生内存溢出前，会对这些对象进行二次回收，如果这次回收没有足够的内存，才会抛出OOM(Out Of Memory Error)异常。JDK1.2之后提供SoftReference类实现软引用</li>
<li>弱引用：指一些有用，但非必须的对象，但它的强度比软引用更弱。当垃圾收集器开始工作时，无论当前内存是否足够，都会回收被弱引用关联的对象。JDK1.2之后提供了WeakReference类实现弱引用</li>
<li>虚引用：是一种最弱的引用关系，形同虚设，无法通过虚引用获取一个对象实例，任何时候都能被回收。JDK1.2之后提供了PhantomReference类实现虚引用。<br>
<strong>为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知</strong>。</li>
</ol>
<p>特别注意：在程序设计中一般很少使用弱引用与虚引用，使用软引用的情况较多，这是因为<strong>软引用可以加速 JVM 对垃圾内存的回收速度，可以维护系统的运行安全，防止内存溢出（OutOfMemory）等问题的产生</strong>。</p>
<h4 id="2-4-不可达对象并非-非死不可">2.4 不可达对象并非&quot;非死不可&quot;</h4>
<p>  即使在可达性分析算法中判定为不可达的对象，也不是&quot;非死不可&quot;的，这时候他处于&quot;缓刑&quot;阶段。<br>
宣判死亡至少要经历两两次标记过程：如果对象在进行可达性分析后发现不可达，那么进行第一次标记，随后筛选一次，如果该对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，那么虚拟机将这两种情况视为&quot;没有必要执行&quot;。(finalize()方法只会执行一次，第二次不会执行(即使覆盖) )。</p>
<p>  如果这个对象有必要执行finalize()方法，那么该对象会被放置在一个名为F-Queue的队列中，在之后虚拟经济自动建立一个低优先级的Finalizer线程区执行finalize()方法。<br>
不推荐使用finalize()方法。</p>
<h4 id="2-5-方法区-元空间-的回收">2.5 方法区(元空间)的回收</h4>
<p>  Java虚拟机规范不强制要求是否在虚拟机的方法区(元空间)实现垃圾回收，方法区的垃圾回收&quot;性价比比较低&quot;。<br>
方法区的垃圾回收主要有两部分内容：废弃的常量和不再使用的类型。</p>
<p>判断一个常量是否废弃：<br>
常量池中的方法、字段符号等等如果没有对象引用它，如果这时发生回收且有必要的话，该对象就会被清理出常量池。</p>
<p>判断一个类是否废弃：需要满足下列3个条件(仅说明被允许，不一定必然)：</p>
<ul>
<li>该类的所有实例都已经被回收(堆中不再有该类与该类的子类的实例)</li>
<li>加载该类的类加载器已经被回收(除非是设计的可替换的类加载器，否则很难达成)</li>
<li>改了对应的java.lang.Class对象没有任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>
</ul>
<table><br></table>
<h3 id="3-垃圾回收算法">3. 垃圾回收算法</h3>
<p>标记清除、标记复制、标记整理、分代垃圾回收。</p>
<h4 id="3-1-标记-清除算法">3.1 标记-清除算法</h4>
<p>  分为&quot;标记&quot;和&quot;清除&quot;两个阶段：标记出所有不需要回收的对象，标记完成后，统一回收所有未被标记的对象。最基础的算法。其他算法都是对其缺点改进而来。<br>
  缺点：效率不稳定、内存空间的碎片化。</p>
<h4 id="3-2-标记-复制算法">3.2 标记-复制算法</h4>
<p>  半区复制：将可用内存一分为二相等的两块，每次使用其中的一块。当这一块使用完后，将还存活的对象复制到另一块去，然后把使用的空间清理。这样就使每次的内存回收都是对内存区间的一半进行回收。<br>
  优点：不会出现碎片化问题，效率高。<br>
  缺点：内存只能使用一半</p>
<h4 id="3-3-标记-整理算法">3.3 标记-整理算法</h4>
<p>  针对老年代存亡的特征，提出了&quot;标记-整理&quot;算法。标记过程同&quot;标记清除&quot;算法，但后续的步骤不是直接对回收对象进行清理，而是让所有存活的对象都向内存空间的一端移动，然后直接清理掉边界以外的内存。<br>
  如果移动所有的存活对象，将会是一种极为负重的操作，而且会暂停用户应用程序才能进行，这样的停顿被称为&quot;Stop The World&quot;。 如果不移动，采用标记清除，空间会碎片化。 关注吞吐量的虚拟机采用标记-整理，关注延迟的采用标记-清除。</p>
<h4 id="3-4-分代收集算法">3.4 分代收集算法</h4>
<p>  根据<code>弱分代假说</code>与<code>强分代假说</code>，现代垃圾收集器将Java堆至少划分为<code>新生代</code>与<code>老年代</code>两个区域。<br>
  根据<code>跨代引用假说</code>：存在互相引用关系的两个对象，是应该倾 向于同时生存或者同时消亡的。只需在新生代上建立一个全局的数据结构（该结构被称 为“记忆集”，Remembered Set）</p>
<p>  <strong>比如在新生代中，每次收集都会有大量对象死去，所以可以选择”标记-复制“算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。</strong></p>
<p> 弱分代假说：绝大多数对象都是朝生夕灭的。<br>
 强分代假说：熬过越多次垃圾收集过程的对象就越难以消亡。<br>
 跨代引用假说：跨代引用相对于同代引用来说仅占极少数。</p>
<table><br></table>
<h3 id="4-经典垃圾收集器">4. 经典垃圾收集器</h3>
<p><strong>如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。</strong><br>
jdk8环境下，默认使用 Parallel Scavenge（新生代）+ Parallel Old（老年代）。<br>
现在JVM64位默认使用Server类型</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -XX:+PrintCommandLineFlags -version</span><br><span class="line">查看当前JVM的默认参数</span><br></pre></td></tr></table></figure>
<h4 id="4-1-serial-串行-收集器">4.1 <strong>Serial(串行)收集器</strong></h4>
<p>  Serial (串行)收集器是最基础的收集器，如其名一样是一个单线程工作的收集器，不仅意味着只会使用一个处理器或一条线程去完成垃圾收集，最重要的是强调它进行垃圾回收时需要暂停其他所有工作线程(“<strong>Stop the World</strong>”)，直到收集结束。Stop The World对很多应用而言是不可接受的。<br>
  <strong>新生代采用<code>标记-复制</code>，老生代采用(Serial Old)<code>标记-整理</code>，该收集器应用在新生代</strong></p>
<p><img src="/2021/03/22/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/Serial(%E4%B8%B2%E8%A1%8C)%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.png" alt></p>
<p>  优缺点：简单而高效，额外内存消耗最小，没有线程的交互开销。具有很高的单线程收集效率，Seriall收集器对于运行在Client模式下的虚拟机来说是个不错的选择。</p>
<h4 id="4-2-parnew-并行-收集器">4.2 ParNew(并行)收集器</h4>
<p>  ParNew收集器实质上是Serial收集器的多线程版，除了同时使用多条线程进行垃圾收集之外，其余的行为(控制参数、收集算法、对象分配规则、回收策略)与Serial收集器完全一致。<br>
  <strong>新生代采用<code>标记-复制</code>，老生代采用(Serial Old)<code>标记-整理</code>，该收集器应用在新生代</strong></p>
<p><img src="/2021/03/22/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/ParNew(%E5%B9%B6%E8%A1%8C)%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.png" alt></p>
<p>  在JDK1.7之前<code>ParNew</code>是许多运行在Server模式下的HotSpot虚拟机的新生代首要选择。除了<code>Serial</code>收集器外(JDK9之前)，目前只有<code>ParNew</code>能与CMS收集器配合工作。<br>
  (G1这个面向全堆的垃圾收集器诞生，自JDK9开始，<code>ParNew</code>加<code>CMS</code>不再是官方推荐的服务端模式下的收集器解决方案。官推荐G1，同时：取消了ParNew加 Serial Old以及Serial加CMS这两组收集器组合的支持，意味着ParNew和CMS从此只能互相搭配使用)</p>
<p><strong>并行和并发概念补充：</strong></p>
<ul>
<li>
<p><strong>并行（Parallel）</strong> ：指多条垃圾收集线程并行工作，但此时<strong>用户线程仍然处于等待状态</strong>。</p>
</li>
<li>
<p><strong>并发（Concurrent）</strong>：指用户线程与垃圾收集线程同时执行（但不一定是并行，可能会交替执行），<strong>用户程序在继续运行</strong>，而垃圾收集器运行在另一个 CPU 上，由于收集器占用一部分资源，此时程序的吞吐量受一定影响。</p>
</li>
</ul>
<h4 id="4-3-parallel-scavenge-并行jdk8-收集器">4.3 Parallel Scavenge(并行JDK8)收集器</h4>
<p>JDK8默认新生代收集器，“吞吐量优先收集器”。<code>-XX:+UseParallelGC -XX:-UseParallelOldGC</code>同时启用两个收集器搭配。JDK9时官宣G1替代Parallel Scavenge加Parallel Old组合。</p>
<p>  <code>Parallel Scavenge</code>与<code>ParNew</code>非常相似，并行收集的多线程收集器，<code>CMS</code>等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间(Stop The World)，而<code>Parallel Scavenge</code>收集器的目标则是达到一个可控制的吞吐量（Throughput），高效率的利用CPU。所谓吞吐量就是处理器用于运行用户代码的时间与处理器总消耗时间的比值。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>吞吐量</mtext><mo>=</mo><mfrac><mtext>运行用户代码的时间</mtext><mrow><mtext>运行用户代码的时间</mtext><mo>+</mo><mtext>运行垃圾收集时间</mtext></mrow></mfrac></mrow><annotation encoding="application/x-tex">吞吐量 = \frac{运行用户代码的时间}{运行用户代码的时间+运行垃圾收集时间}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">吞</span><span class="mord cjk_fallback">吐</span><span class="mord cjk_fallback">量</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">运</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">户</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord cjk_fallback">运</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">垃</span><span class="mord cjk_fallback">圾</span><span class="mord cjk_fallback">收</span><span class="mord cjk_fallback">集</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">运</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">户</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>  如果对收集器运作不了解，手工优化困难，可以使用<strong>Paralle Scavenge收集器配合自适应调节策略</strong>，只需要设置好基本的内存数据(如-Xmx设置最大堆)，然后使用<code>-XX:MaxGCPauseMillis</code>(更关注最大停顿时间)，或者<code>-XX:GCTimeRatio</code>(更关注吞吐量)给虚拟机设置一个优化目标，具体细节由虚拟机去调节。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-XX:+UseParallelGC</span><br><span class="line">    使用 Parallel 收集器+ 老年代串行</span><br><span class="line"></span><br><span class="line">-XX:+UseParallelOldGC</span><br><span class="line">    使用 Parallel 收集器+ 老年代并行</span><br><span class="line">    </span><br><span class="line">-XX:MaxGCPauseMillis</span><br><span class="line">    设置每次GC最大停顿毫秒数：-XX:MaxGCPauseMillis=n, 会降低吞吐量，该参数谨慎使用(VM将设置更小的堆，以存储相对少量的对象，来提升回收速率，会导致更高频率的GC。)</span><br><span class="line"></span><br><span class="line">-XX:GCTimeRatio</span><br><span class="line">    设置最大吞吐量：-XX:GCTimeRatio=n，则允许最大的 1/(1+n)*100% 的时间去垃圾回收，默认值为n=99，就是允许1%的时间去进行垃圾回收(0&lt;n&lt;100的整数)。  表示运行用户代码时间是GC运行时间的n倍。</span><br></pre></td></tr></table></figure>
<p>  <strong>新生代采用<code>标记-复制</code>，老生代采用(Serial Old)<code>标记-整理</code>，该收集器应用在新生代</strong></p>
<p><strong>官方建议策略</strong></p>
<ol>
<li>尽量不设置最大堆，选择合适的目标吞吐量</li>
<li>如果可以达到吞吐量目标，但是暂停时间太长，请选择一个暂停时间目标进行折衷（以降低吞吐量为代价）</li>
<li>如果未达到吞吐量目标，请设置尽可能大的堆（小于物理可用内存)</li>
</ol>
<h4 id="4-4-serial-old-串行-收集器">4.4 Serial Old(串行)收集器</h4>
<p>  Serial 收集器的老年代版本，他是一个单线程的收集器，使用标记-整理算法，主要意义供客户端的HotSpot虚拟机使用。它主要有两大用途：一种用途是在 JDK1.5 以及以前的版本中与 <code>Parallel Scavenge</code> 收集器搭配使用，另一种用途是作为 <code>CMS</code> 收集器的后备方案。</p>
<h4 id="3-5-5-parallel-old-并行-收集器">3.5.5 Parallel Old(并行)收集器</h4>
<p><code>-XX:+UseParallelOldGC</code>开启该收集器，老年代并行收集器</p>
<p>  Parallel Scavenge收集器的老年代版本，支持多线程并发收集，基于标记整理。JDK6提供，解决了Parallel Scavenge只能与Serial Old使用的尴尬地位，无法与CMS配合使用。至此&quot;吞吐量优先&quot;收集器有了比较名副其实的搭配组合。注重吞吐量或者处理器比较稀缺的场合可以考虑。</p>
<p><img src="/2021/03/22/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/Parallel_Scavenge--Parallel_Old.png" alt></p>
<h4 id="3-5-6-cms-并发-收集器">3.5.6 CMS(并发)收集器</h4>
<p><code>-XX:+UseConcMarkSweepGC</code>开启CMS，老年代并发收集器，</p>
<p>  CMS(Concurrent Mark Sweep)收集器以<strong>最短停顿时间为目标</strong>，互联网网站或者B/S系统的服务端非常适合使用(如果老年代不频繁GC或者内存&lt;6g推荐，JDK9时被官方不推荐，推荐G1)。从名称可以看出CMS收集器基于<strong>标记清除</strong>算法实现.<br>
整体分为四个步骤：</p>
<ol>
<li>初始标记：暂停所有其他线程(STW)，记录下与GCRoots相连的对象，速度很快；</li>
<li>并发标记：从GCRoots关联的对象开始遍历整个对象标记，耗时长但不需要STW，因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。(采用<strong>增量更新</strong>算法解决并发扫描时对象消失的问题)</li>
<li>重新标记：为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录。通常停顿时间比初始标记时间长，远比并发标记时间短。</li>
<li>并发清除：清理删除标记阶段判断已经死亡的对象，不需要移动存活对象，可以与用户线程并发。</li>
</ol>
<p><img src="/2021/03/22/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/CMS(%E5%B9%B6%E5%8F%91)%E6%94%B6%E9%9B%86%E5%99%A8.png" alt></p>
<p>  可以看到，耗时最长的并发标记和并发清除，垃圾收集器和用户线程可以一起并发执行。<br>
<strong>优点</strong>：并发收集、低停顿<br>
<strong>缺点</strong>：</p>
<ul>
<li><strong>对处理器资源敏感</strong>：并发阶段虽不会STW，但是会占用一部分线程。</li>
<li><strong>无法收集浮动垃圾</strong>：<br>
(浮动垃圾：并发标记/清理阶段，用户线程运行，垃圾对象产生，CMS这次GC无法处理，只能下次处理)。<br>
由于无法收集浮动垃圾可能出现：“Concurrent Mode Failure&quot;失败而导致STW的Full GC产生。<br>
JDk1.6时，CMS收集器的启动阈值<code>老年代使用空间</code>默认提升至92%，要是CMS运行期间，预留的内存无法满足分配对象，会出现一次&quot;并发失败”，导致冻结用户线程(STW)，临时启用Serial Old收集器。请根据实际需要设置参数<code>-XX: CMSInitiatingOccupancyFraction</code>参数(启用阈值)</li>
<li><strong>标记清除，产生空间碎片</strong>：<br>
<code>-XX: +UseCMS-CompactAtFullCollection</code>默认开启，JDK9废弃，CMS收集器不得不FullGC时开启合并整理(STW)<br>
<code>-XX: CMSFullGCsBeforeCompaction</code>JDK9废弃，表示CMS执行n次FullGC后，整理，默认为0：每次FullGC会碎片整理。</li>
</ul>
<h4 id="3-5-7-g1收集器">3.5.7 G1收集器</h4>
<p>  G1(Garbage First)收集器主要是面向服务端的收集器，开创<strong>局部收集思路</strong>和<strong>基于Region的内存布局形式</strong>，主要针对配备<strong>多颗处理器及大容量内存</strong>($\geq$6g)的机器。 以极高概率满足GC停顿时间要求的同时,还具备高吞吐量性能特征。G1的出现(<strong>JDK7正式出现</strong>)导致<code>CMS</code>被官方声明为不推荐的收集器，同时用来取代<code>Parallel Scavenge</code>加<code>Parallel Old</code>组合。G1是一个面向整堆(新生代+老年代)的收集器。<br>
  G1虽然仍是遵循分代收集理论设计的，但是：G1把连续的Java堆划分为多个相等的独立区域(Region)，每个Region都可以根据需要扮演Eden空间、Survivor空间或者老年代，G1能够对扮演不同角色的Region采用不同的策略去处理。<br>
  Region种有一类特殊的<code>Humongous</code>区域，专门存储<strong>大对象</strong>(大小超过一个Region容量的一半)，每个Region可以通过参数<code>-XX:G1HeapRegionSize</code>设置，取值1MB~32MB，且为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>，对于超过整个Region的大对象，会被存放在N个连续的<code>Humongous Region</code>中，G1大多数把<code>Humongous Region</code>作为老年代的一部分看待。</p>
<h5 id="1-布局模型：">1. 布局模型：</h5>
<p><img src="/2021/03/22/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/G1%E6%94%B6%E9%9B%86%E5%99%A8%E7%9A%84%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B.png" alt="G1收集器的布局模型"></p>
<h5 id="2-g1收集器的特点：">2. G1收集器的特点：</h5>
<ul>
<li><strong>并行与并发</strong>：G1 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 java 程序继续执行。</li>
<li><strong>分代收集</strong>：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。</li>
<li><strong>空间整合</strong>：与 CMS 的“标记-清理”算法不同，G1 从整体来看是基于“标记-整理”算法实现的收集器；从局部上来看是基于“标记-复制”算法实现的。</li>
<li><strong>可预测的停顿</strong>：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内。</li>
</ul>
<h5 id="3-g1收集器的运作过程：">3. G1收集器的运作过程：</h5>
<ul>
<li>初始标记(Initial Marking)：仅标记GC Roots能<strong>直接关联</strong>的对象，需要修改TAMS指针，需要STW，但耗时短，且是借用Minor GC的时候同步完成，所以没有额外停顿。</li>
<li>并发标记(Concurrent Marking)：从GC Roots开始进行可达性分析，递归扫描整个堆，找到要回收的对象，耗时长，但可与用户线程并发执行，重新处理SATB记录下并发时有引用变动的对象。(采用SATB解决并发扫描时对象消失的问题)</li>
<li>最终标记(Final Marking)：对用户线程做一个短暂的暂停，用于处理并发标记阶段结束后仍遗留的STAB记录。</li>
<li>筛选回收(Live Data Counting and Evacuation)：对各个Region的回收价值和成本排序，制定回收计划，自由选择任意多个Region构成<strong>回收集</strong>，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧 Region的全部空间，对象移动，需要STW。多条收集器线程并行执行。</li>
</ul>
<p>  G1除了并发标记阶段，其余阶段都需要STW，符合官方设定的目标：在延迟可控的情况下获得尽可能高的吞吐 量。<br>
<img src="/2021/03/22/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/G1%E6%94%B6%E9%9B%86%E5%99%A8(%E5%B9%B6%E5%8F%91%E6%95%B4%E5%A0%86)%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="G1收集器(并发整堆)流程图"></p>
<h5 id="4-g1常用参数">4. G1常用参数</h5>
<table>
<thead>
<tr>
<th>G1的参数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>-XX:+UseG1GC</td>
<td>使用 G1 垃圾收集器</td>
</tr>
<tr>
<td>-XX:MaxGCPauseMillis=200</td>
<td>设置期望达到的最大GC停顿时间指标（JVM会尽力实现，但不保证达到）</td>
</tr>
<tr>
<td>-XX:InitiatingHeapOccupancyPercent=45</td>
<td>启动并发GC周期时的堆内存占用百分比. G1之类的垃圾收集器用它来触发并发GC周期,基于整个堆的使用率,而不只是某一代内存的使用比值. 为 0 则表示”一直执行GC循环”. 默认占用率是整个 Java 堆的 45%</td>
</tr>
<tr>
<td>-XX:NewRatio=n</td>
<td>新生代与老生代(new/old generation)的大小比例(Ratio). 默认值为 2.</td>
</tr>
<tr>
<td>-XX:SurvivorRatio=n</td>
<td>eden/survivor 空间大小的比例(Ratio). 默认值为 8.</td>
</tr>
<tr>
<td>-XX:MaxTenuringThreshold=n</td>
<td>提升年老代的最大临界值(tenuring threshold). 默认值为 15.</td>
</tr>
<tr>
<td>-XX:ParallelGCThreads=n</td>
<td>设置垃圾收集器在并行阶段使用的线程数,默认值随JVM运行的平台不同而不同.最多为8</td>
</tr>
<tr>
<td>-XX:ConcGCThreads=n</td>
<td>并发垃圾收集器使用的线程数量. 默认值随JVM运行的平台不同而不同.</td>
</tr>
<tr>
<td>-XX:G1HeapRegionSize=n</td>
<td>使用G1时Java堆会被分为大小统一的的区(region)。此参数可以指定每个heap区的大小. 默认值将根据 heap size 算出最优解. 最小值为 1Mb, 最大值为 32Mb.</td>
</tr>
</tbody>
</table>
<h5 id="5-g1收集器与cms收集器的比较：">5. G1收集器与CMS收集器的比较：</h5>
<p>  由于G1与CMS都关注停顿时间的控制，因此它门经常会被拿来比较。</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">CMS</th>
<th style="text-align:center">G1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">JDk</td>
<td style="text-align:center">1.6以上</td>
<td style="text-align:center">1.7以上</td>
</tr>
<tr>
<td style="text-align:center">回收区域</td>
<td style="text-align:center">老年代</td>
<td style="text-align:center">整堆</td>
</tr>
<tr>
<td style="text-align:center">回收算法</td>
<td style="text-align:center">标记清除</td>
<td style="text-align:center"><strong>整体</strong>来看“标记-整理”；局部来看“标记-复制”</td>
</tr>
<tr>
<td style="text-align:center">内存布局</td>
<td style="text-align:center">传统连续的新生代<br>和老年代</td>
<td style="text-align:center">分成Region区，每个区域根据需要扮演新生代与老年代</td>
</tr>
<tr>
<td style="text-align:center">指定最大停顿时间</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">按收益动态收集</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">浮动垃圾</td>
<td style="text-align:center">是</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">内存碎片</td>
<td style="text-align:center">是</td>
<td style="text-align:center">否(最终标记STW，不会产生)</td>
</tr>
<tr>
<td style="text-align:center">卡表(处理跨代指针)</td>
<td style="text-align:center">卡表简单</td>
<td style="text-align:center">复杂，每个Region都有，可能需要更多空间</td>
</tr>
<tr>
<td style="text-align:center">Full GC</td>
<td style="text-align:center">内存回收达不到分配Full GC</td>
<td style="text-align:center">内存回收达不到分配Full GC</td>
</tr>
</tbody>
</table>
<h5 id="6-g1解决的一些问题">6. G1解决的一些问题</h5>
<ul>
<li>跨Region引用对象解决：使用记忆集，每个Region维护一份，记忆集记录别的Region指向自己的指针，标记指针在哪些卡也页范围。本质上是哈希表，这种双向卡表：我指向谁，同时有谁指向我。</li>
<li>并发标记阶段收集线程与用户线程互不干扰：
<ol>
<li>保证用户线程改变对象引用关系时，不会打破原本的对象图结构，导致标记结果出错。CMS采用<strong>增量更新算法</strong>，而G1采用<strong>原始快照</strong>(SATB)。</li>
<li>回收过程中新对象创建，每个Region两个TAMS指针，把Region一部分空间划分用于并发回收的对象分配，必须分配到TAMS指针位置上，G1默认不回收他们。</li>
</ol>
</li>
<li>停顿预测模型：以衰减均值（Decaying Average）为理论基础来实现。通过这些信息预测现在开始回收，由哪些Region组成回收集才可以在不超过期望停顿时间的约束下获得最高的收益。</li>
</ul>
<table><br></table>
<h3 id="5-低延迟垃圾收集器">5. 低延迟垃圾收集器</h3>
<p>  垃圾收集器的三项指标：内存占用、吞吐量、延迟。优秀的收集器通常最多能实现其中的两项。目前更关注：<strong>延迟</strong>。内存变大的发展，完整的GC会导致延迟更高。出现了低延迟垃圾收集器。<br>
<img src="/2021/03/22/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/各收集器并发情况.png" alt="各收集器并发情况" style="zoom:80%; margin: 0 auto"></p>
<p>Compact：整理；  Concuurent=Conc：并发；  partial：</p>
<h4 id="5-1-shenandoah收集器">5.1 Shenandoah收集器</h4>
<p>ToDo</p>
<table><br></table>
<h4 id="5-2-zgc">5.2 ZGC</h4>
<p>可参考 <a href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html">新一代垃圾回收器ZGC的探索与实践</a><br>
 在对吞吐量影响不大的情况，实现对任意堆内存大小垃圾收集停顿时间限制在10毫秒内。<br>
ZGC可以<strong>降低延迟</strong>(在低延迟：TP999&lt;200ms收益较大)。  但会带来<strong>吞吐量下降</strong>情况(ZGC单代垃圾回收，每次回收处理对象更多，更耗CPU资源；ZGC使用读屏障，需要额外消耗计算资源)。<br>
JDK11(Linux)开始。JDK15(Windows)开始。</p>
<h4 id="1-特点：">1.  特点：</h4>
<p>  基于Region(<strong>官方：page/ZPage</strong>)内存布局，染色指针和读屏障解决转移过程中对象的访问问题，同时实现了可并发的<strong>标记-整理</strong>算法，以低延迟位首要目标。</p>
<h4 id="2-内存布局">2. 内存布局</h4>
<p>  ZGC基于Region堆内存布局，但ZGC的Region具有动态性：动态创建与销毁、动态区域容量大小。</p>
<ul>
<li>小型Region(Small Region)：容量固定2MB，放置小于256KB对象。</li>
<li>中型Region(Small Region)：固定32MB，放置256KB<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≤</mo></mrow><annotation encoding="application/x-tex">\leq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span></span></span></span>n$\leq$4MB对象。</li>
<li>大型Region(Large Region)：容量不固定，但必须为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>。</li>
</ul>
<h4 id="3-zgc的流程">3.  ZGC的流程</h4>
<p>  大致如图四个阶段，每个阶段<strong>都可以并发</strong>，两个阶段间会存在短暂停顿小阶段(Pause)，短暂停顿只与GC Roots相关，与堆内存无关。<br>
  ZGC采用<strong>并发整理</strong>算法，ZGC在标记、转移、和重定位阶段几乎是并发。</p>
 <img src="/2021/03/22/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/ZGC流程.png" style="zoom:80%;">
<ul>
<li>并发标记(Concurrent Mark)：前后要经历Pause Mark Start与Pause Mark End短暂停顿。ZGC的标记是指针上而不是对象上，标记阶段会更新染色指针中的Marked 0、Marked 1标志。</li>
<li>并发预备重分配(Concurrent Prepare for Relocate)：根据查询条件统计清理哪些Region，将这些Region组成<strong>重分配集</strong>(Relocation Set)。并非为了收益优先GC，而只是决定里面的存活对象会被重新复制到其他Region中。</li>
<li>并发重分配(Concurrent Relocate)：核心阶段，把<strong>重分配集</strong>中的对象复制到新的Region上，为重分配集中的每个Region维护一个转发表。<br>
ZGC的指针&quot;自愈&quot;(如果用户线程访问了重分配集的对象，这次访问会被预置的内存屏障所截获，并根据Region的转发表记录访问到新复制的对象，同时修正更新的引用值，指向新对象)。好处只有第一次会转发，慢一次。</li>
<li>并发重映射(Concurrent Remap)：修正整个堆中指向<strong>重分配集</strong>中旧对象的所有引用，因为有&quot;自愈&quot;，ZGC的该阶段并不迫切，主要目的是为了不变慢。ZGC把<strong>并发重映射</strong>阶段的工作合并到下次垃圾收集的<strong>并发标记</strong>阶段处理。</li>
</ul>
<h4 id="4-zgc关键技术">4. ZGC关键技术</h4>
<p>  ZGC通过<strong>着色指针</strong>和<strong>读屏障</strong>技术，解决转移过程中的对象问题，实现并发整理。假设对象发生转移，但对象地址未及时更新，那么应用线程可能访问到旧地址，从而造成错误。而在ZGC中，应用线程访问对象将触发“读屏障”，如果发现对象被移动了，那么“读屏障”会把读出来的指针更新到对象的新地址上，这样应用线程始终访问的都是对象的新地址。JVM利用对象引用的地址判断对象被移动过，即着色指针。</p>
<h5 id="4-1-着色指针：">4.1 着色指针：</h5>
<blockquote>
<p>将信息存储在指针中的技术</p>
</blockquote>
<p>  直接将少量的额外信息存储在指针上(Linux下64位指针高18位不能用来寻址，剩下的的46位指针取其高4位存储4个标志信息，可以直接从指针上看到引用对象的三色标记、是否进入重分配集(移动过)、是否只能通过finalize()方法才能访问)。<br>
  ZGC只支持64位系统，把64位虚拟地址空间划分多个子空间：<br>
<img src="/2021/03/22/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/ZGC%E7%9A%8464%E4%BD%8D%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4.png" alt="ZGC的64位虚拟地址空间"><br>
  其中，[0~4TB) 对应Java堆，[4TB ~ 8TB) 称为M0地址空间，[8TB ~ 12TB) 称为M1地址空间，[12TB ~ 16TB) 预留未使用，[16TB ~ 20TB) 称为Remapped空间。<br>
当对象创建时，首先在堆中申请一个虚拟地址，不会真的映射物理地址，ZGC同时会在M0、M1和Remapped空间分别申请一个虚拟地址，且三个虚拟地址对应一个物理地址。但同一时刻只有一个空间有效。因为为了用&quot;空间换时间&quot;，降低GC停顿时间。</p>
<p>  ZGC实际只使用64位地址空间的0~41位，42~45存储元数据，47~63位固定为0。ZGC将对象存活信息存储在42~45位，与传统德垃圾回收将对象存活信息放在对象头中不同。<br>
<img src="/2021/03/22/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/ZGC%E7%9A%8464%E4%BD%8D%E7%A9%BA%E9%97%B4%E5%9C%B0%E5%9D%80%E4%BD%BF%E7%94%A8.png" alt></p>
<h5 id="4-2-读屏障">4.2 读屏障</h5>
<blockquote>
<p>读屏障是JVM向应用代码插入一小段代码的技术。当应用线程从堆中读取对象引用时，就会执行这段代码。需要注意的是，仅“从堆中读取对象引用”才会触发这段代码。</p>
</blockquote>
<p>读屏障示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> obj.FieldA   <span class="comment">// 从堆中读取引用，需要加入屏障</span></span><br><span class="line">&lt;Load barrier&gt;</span><br><span class="line"><span class="type">Object</span> <span class="variable">p</span> <span class="operator">=</span> o  <span class="comment">// 无需加入屏障，因为不是从堆中读取引用</span></span><br><span class="line">o.dosomething() <span class="comment">// 无需加入屏障，因为不是从堆中读取引用</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span>  obj.FieldB  <span class="comment">//无需加入屏障，因为不是对象引用</span></span><br></pre></td></tr></table></figure>
<p>  ZGC的读屏障代码作用：对象标记与转移过程中，用于确定对象的引用地址是否满足条件，做出相应动作。</p>
<h5 id="4-3-zgc并发地址实体切换">4.3 ZGC并发地址实体切换</h5>
<ul>
<li><strong>初始化</strong>：ZGC初始化之后，整个内存空间的地址视图被设置为Remapped。程序正常运行，在内存中分配对象，满足一定条件后垃圾回收启动，此时进入标记阶段。</li>
<li><strong>并发标记阶段</strong>：第一次进入标记阶段时视图为M0，如果对象被GC标记线程或者应用线程访问过，那么就将对象的地址视图从Remapped调整为M0。所以，在标记阶段结束之后，对象的地址要么是M0视图，要么是Remapped。如果对象的地址是M0视图，那么说明对象是活跃的；如果对象的地址是Remapped视图，说明对象是不活跃的。</li>
<li><strong>并发转移(重分配)阶段</strong>：标记结束后就进入转移阶段，此时地址视图再次被设置为Remapped。如果对象被GC转移线程或者应用线程访问过，那么就将对象的地址视图从M0调整为Remapped。</li>
</ul>
<p>  其实，在标记阶段存在两个地址视图M0和M1，上面的过程显示只用了一个地址视图。之所以设计成两个，是为了区别前一次标记和当前标记。也即，第二次进入并发标记阶段后，地址视图调整为M1，而非M0。<br>
  着色指针和读屏障技术不仅应用在并发转移阶段，还应用在并发标记阶段：将对象设置为已标记，传统的垃圾回收器需要进行一次内存访问，并将对象存活信息放在对象头中；而在ZGC中，只需要设置指针地址的第42~45位即可，并且因为是寄存器访问，所以速度比访问内存更快。</p>
<h4 id="5-三大优势：">5. 三大优势：</h4>
<ul>
<li>某个Region的存活对象被移走后，Region能够立即被释放和重用。(能够&quot;自愈&quot;)。</li>
<li>大幅减少垃圾收集中的内存屏障使用量，只使用了读屏障，没使用写屏障(染色指针+不支持分代收集)。</li>
<li>可扩展的存储结构，Linux下64位指针还有18位没有使用。</li>
</ul>
<h4 id="6-问题与解决方案：">6. 问题与解决方案：</h4>
<p>  虚拟机重新定义内存中的某几位指针，处理器只会将整个指针都视为内存地址。但x86-64不支持类似SPARC硬件的虚拟地址掩码。因此ZGC采用了<strong>虚拟内存映射</strong>技术。<br>
Linux/x86-64平台的ZGC使用<strong>多重映射</strong>将多个不同的虚拟内存地址映射到同一个物理内存地址上，多对一意味着虚拟内存中看到的地址空间比实际的堆内存容量更大。<br>
<img src="/2021/03/22/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/多重映射下的寻址.png" alt="image-20210329214227352" style="zoom:80%;"></p>
<h4 id="7-zgc调优">7. ZGC调优</h4>
<p>请参考：  <a href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html">新一代垃圾回收器ZGC的探索与实践</a><br>
以下参数来自上面链接的文章，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-Xms10G -Xmx10G  -- 堆的最大最小内存：10g(按服务器调整)</span><br><span class="line">-XX:ReservedCodeCacheSize=256m -XX:InitialCodeCacheSize=256m -- CodeCache一般64m或128足够</span><br><span class="line">-XX:+UnlockExperimentalVMOptions -XX:+UseZGC  -- 启用ZGC</span><br><span class="line">-XX:ConcGCThreads=2 -XX:ParallelGCThreads=6  -- 并发回收线程，默认总核1/8； STW阶段使用线程数，默认总核60%</span><br><span class="line">-XX:ZCollectionInterval=120 -XX:ZAllocationSpikeTolerance=5  -- ZGC发生的最小时间间隔，单位秒； ZGC触发自适应算法修正系数，默认2(越大越早触发GC)</span><br><span class="line">-XX:+UnlockDiagnosticVMOptions -XX:-ZProactive  -- 事发启用主动回收，默认开启，这里参数表示关闭</span><br><span class="line">-Xlog:safepoint,classhisto*=trace,age*,gc*=info:file=/opt/logs/logs/gc-%t.log:time,tid,tags:filecount=5,filesize=50m  -- 设置GC日志的内容、格式、位置、日志大小</span><br></pre></td></tr></table></figure>
<table><br></table>
<h3 id="6-垃圾收集器的选择">6. 垃圾收集器的选择</h3>
<ul>
<li>如果是数据分析、科学计算，目标是尽快算出结果，则应该关注吞吐量。</li>
<li>如果是SLA应用(网络服务提供)，停顿时间影响服务质量，延迟是关注点。</li>
<li>客户端应用或者嵌入式应用，应该关注垃圾收集器的占用内存。</li>
</ul>
<p>在此基础上应该考虑JDK的发行商、JDK版本。</p>
<p>例如：面向用户提供服务或者软件解决方案</p>
<ul>
<li>如果有充足的预算，没有调优经验：可以考虑商业的Zing VM。</li>
<li>使用较新的硬件与JDK，可以考虑ZGC。</li>
<li>如果是遗留系统，根据内存规模衡量：4GB~6GB堆内存，推荐CMS，对于更大的堆，可以考虑G1。</li>
</ul>
<table><br></table>
<h3 id="参考">参考</h3>
<ul>
<li>《深入理解java虚拟机 JVM高级特性与最佳实践》第二部分第三章</li>
<li><a href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html">新一代垃圾回收器ZGC的探索与实践</a></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>Jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBlog</title>
    <url>/2021/01/19/MyBlog/</url>
    <content><![CDATA[<p><span style="font-size:40px;font-family:微软雅黑">SunFlowers</span></p>
]]></content>
  </entry>
  <entry>
    <title>LC周赛记录</title>
    <url>/2022/11/20/LC%E5%91%A8%E8%B5%9B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>记录LC周赛问题</p>
<span id="more"></span>
<h2 id="第-320-场周赛-力扣-leetcode"><a href="https://leetcode.cn/contest/weekly-contest-320">第 320 场周赛 - 力扣（LeetCode）</a></h2>
<h3 id="6242-二叉搜索树最近节点查询-力扣-leetcode"><a href="https://leetcode.cn/problems/closest-nodes-queries-in-a-binary-search-tree/">6242. 二叉搜索树最近节点查询 - 力扣（LeetCode）</a></h3>
<p>问题：TLE<br>
二叉搜索树不一定平衡：题目给出了二叉搜索树，但普通的二叉搜索树不一定是平衡的，当用例的二叉搜索树退化为链表时，时间会达到线性的时间复杂度，从而被卡掉。</p>
<h2 id="第-327-场周赛-力扣-leetcode"><a href="https://leetcode.cn/contest/weekly-contest-327/">第 327 场周赛 - 力扣（LeetCode）</a></h2>
<h3 id="6284-使字符串总不同字符的数目相等-力扣-leetcode"><a href="https://leetcode.cn/problems/make-number-of-distinct-characters-equal/">6284. 使字符串总不同字符的数目相等 - 力扣（LeetCode）</a></h3>
<p>问题：读题不仔细、简单的暴力想复杂<br>
题目是要求能否两个单词中不同的字符数目是否能够相等，<strong>是字符去重后的个数是否相等</strong>。且题目说明了<strong>恰好移动一次</strong>，没有注意到该条件，以为可以移动多次。<br>
如果只移动一次，则应该暴力求解，尝试每一种交换的可能，最多尝试26*26次（字母只有26个，且只交换一次），时间复杂度是可以满足的。（O(N) = max(26 * 26, max(len(word1), len(word2))）。</p>
<h2 id="第-340-场周赛-力扣-leetcode"><a href="https://leetcode.cn/contest/weekly-contest-340/">第 340 场周赛 - 力扣（LeetCode）</a></h2>
<h3 id="2614-对角线上的质数-力扣-leetcode"><a href="https://leetcode.cn/problems/prime-in-diagonal/">2614. 对角线上的质数 - 力扣（LeetCode）</a></h3>
<p>使用了埃氏筛，筛选只需要一次即可，但是筛选写在了普通方法里面，导致每一次调用都会跑一遍埃氏筛，最终导致了超时。改成静态后通过。</p>
<h2 id="第-342-场周赛-力扣-leetcode"><a href="https://leetcode.cn/contest/weekly-contest-342/">第 342 场周赛 - 力扣（LeetCode）</a></h2>
<h3 id="2653-滑动子数组的美丽值-力扣-leetcode"><a href="https://leetcode.cn/problems/sliding-subarray-beauty/">2653. 滑动子数组的美丽值 - 力扣（LeetCode）</a></h3>
<p>虽然nums.length=1e5，但是nums[i]的值域只有-50到50，使用桶排序（基数排序）即可满足，快排会导致时间复杂度超时。</p>
<h2 id="第-351-场周赛-力扣-leetcode"><a href="https://leetcode.cn/contest/weekly-contest-351/">第 351 场周赛 - 力扣（LeetCode）</a></h2>
<p><a href="https://leetcode.cn/problems/ways-to-split-array-into-good-subarrays/">6910. 将数组划分成若干好子数组的方式 - 力扣（LeetCode）</a></p>
<p>以后若是要求取余的题目，必须边计算边取余，<strong>不能只在最后一步取余</strong>，若是加法，直接取余到底即可，若是减法（可能减出负数），则需要加上取模同余定理。即若求(-x) % mod的余数，这里-x表示负数：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mi>x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>m</mi><mi>o</mi><mi>d</mi><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mi>x</mi><mi mathvariant="normal">%</mi><mi>m</mi><mi>o</mi><mi>d</mi><mo>+</mo><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>m</mi><mi>o</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">(-x) \% mod = (-x \% mod + mod) \% mod
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathdefault">x</span><span class="mord">%</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span></span></span></span></span></p>
<p>其他可能用到的，注意其中a+b、a*b为正数，否则需要使用上面的同余定理：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>m</mi><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>a</mi><mi mathvariant="normal">%</mi><mi>m</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>b</mi><mi mathvariant="normal">%</mi><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">(a+b)\%m=((a \% m)+(b \% m)) \% m
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord">%</span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mord">%</span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault">m</span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>∗</mo><mi>b</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>m</mi><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>a</mi><mi mathvariant="normal">%</mi><mi>m</mi><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>b</mi><mi mathvariant="normal">%</mi><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">(a*b)\%m=((a \% m)*(b \% m)) \% m
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord">%</span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mord">%</span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault">m</span></span></span></span></span></p>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql命令总结(二)</title>
    <url>/2021/02/18/Mysql%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93(%E4%BA%8C)/</url>
    <content><![CDATA[<p><strong>版权声明</strong>：本文转载自<a href="https://shockerli.net/post/1000-line-mysql-note/">一千行 MySQL 学习笔记</a>，并在一定程度上进行了<strong>增删改</strong>。</p>
<span id="more"></span>
<h2 id="mysql接上篇">mysql接上篇</h2>
<p><strong>注：所有操作基于day01数据库</strong></p>
<p><strong>注：所有sql命令中的 [字段] 意为可选字段</strong></p>
<h3 id="十一-备份与还原">十一、备份与还原</h3>
<p><span style="color:red">注意：以下所有命令不能在mysql的命令环境中执行，在纯命令行中执行。</span>以下路径为windows路径</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">利用 mysqldump 指令完成。</span><br><span class="line"><span class="comment">-- 导出</span></span><br><span class="line">    mysqldump [options] db_name [tables]</span><br><span class="line">    mysqldump [options] <span class="comment">---database DB1 [DB2 DB3...]</span></span><br><span class="line">    mysqldump [options] <span class="comment">--all--database</span></span><br><span class="line">    <span class="number">1.</span> 导出一张表</span><br><span class="line">        mysqldump <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 库名 表名 <span class="operator">&gt;</span> 文件名(D:\a.sql)	</span><br><span class="line">    <span class="number">2.</span> 导出多张表</span><br><span class="line">        mysqldump <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 库名 表<span class="number">1</span> 表<span class="number">2</span> 表<span class="number">3</span> <span class="operator">&gt;</span> 文件名(D:\a.sql)</span><br><span class="line">          <span class="comment">-- 例：mysqldump -u用户名 -p密码 day01 user t_user &gt; D:\user_table.sql</span></span><br><span class="line">          <span class="comment">-- 解释：导出day01下的user表与t_user表</span></span><br><span class="line">    <span class="number">3.</span> 导出所有表</span><br><span class="line">        mysqldump <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 库名 <span class="operator">&gt;</span> 文件名(D:\a.sql)</span><br><span class="line">    <span class="number">4.</span> 导出一个库</span><br><span class="line">        mysqldump <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 <span class="comment">--lock-all-tables --database 库名 &gt; 文件名(D:\a.sql)</span></span><br><span class="line">          <span class="comment">-- (--lock-all-tables) 在mysqldump导出的整个过程中以read方式锁住所有表</span></span><br><span class="line">	可以<span class="operator">-</span>w携带<span class="keyword">WHERE</span>条件</span><br><span class="line"><span class="comment">-- 导入</span></span><br><span class="line"><span class="number">1.</span> 在登录mysql的情况下：</span><br><span class="line">    source  备份文件</span><br><span class="line"><span class="number">2.</span> 在不登录的情况下</span><br><span class="line">    mysql <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 库名 <span class="operator">&lt;</span> 备份文件</span><br><span class="line">      <span class="comment">-- 例：mysql -u用户名 -p密码 day02 &lt; D:\user_table.sql</span></span><br><span class="line">      <span class="comment">-- 解释：将D盘路径下的该sql文件导入到day02数据库中(day02数据库必须已经存在)</span></span><br></pre></td></tr></table></figure>
<h3 id="十二-视图">十二、视图</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">什么是视图：视图是一个虚拟表</span><br><span class="line">    视图的作用类似于筛选出一个虚拟表，定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。</span><br><span class="line">    它主要出于两种原因：</span><br><span class="line">        <span class="number">1.</span> 安全原因，视图可以隐藏一些数据与表结构，对客户端隐藏真实的表结构</span><br><span class="line">        <span class="number">2.</span> 另一原因是可使复杂的查询易于理解和使用。简化业务逻辑</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建视图</span></span><br><span class="line">    <span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE] [ALGORITHM<span class="operator">=</span>&#123;UNDEFINED <span class="operator">|</span> <span class="keyword">MERGE</span> <span class="operator">|</span> TEMPTABLE&#125;] <span class="keyword">VIEW</span> view_name [(column_list)] <span class="keyword">AS</span> select_statement</span><br><span class="line">    <span class="comment">-- or replace:如果存在同名的表则替换(也可用于完全更新)</span></span><br><span class="line">    <span class="comment">-- ALGORITHM=：(指定视图执行的算法，一般不用)</span></span><br><span class="line">        <span class="comment">-- UNDEFINED:未定义，自动，让系统帮你选</span></span><br><span class="line">        <span class="comment">-- MERGE:当使用视图时，会把查询视图的语句和创建视图的语句合并起来，形成一条语</span></span><br><span class="line">        <span class="comment">-- TEMPTABLE:当使用视图时，会把创建视图的语句的查询结果当成一张临时表，再从临时表中进行筛选</span></span><br><span class="line">    <span class="comment">-- (column_list)：用于给视图的列取别名，数目必须等于SELECT语句检索的列数(一般不用，直接在select表后as取别名即可)</span></span><br><span class="line">        <span class="comment">-- 例：CREATE VIEW view_user (v_id, v_name, v_age) as (SELECT id, name, age FROM user);</span></span><br><span class="line">        <span class="comment">-- 解释：将从user查询到的结果创建一张虚拟表view_user，并将对应的结果取别名v_id,v_name,v_age；</span></span><br><span class="line">        <span class="comment">-- 推荐下面这种，便于理解，结果同上</span></span><br><span class="line">        <span class="comment">-- 例：CREATE VIEW view_user as (SELECT id as v_id, name as v_name, age as v_age FROM user);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看结构</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表的状态(可以用来查看表还是视图)</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">table</span> status;</span><br><span class="line">    <span class="comment">-- show tables -- 查看所有表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除视图(省略号：多个)</span></span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">VIEW</span> [IF <span class="keyword">EXISTS</span>] view_name, ...</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 修改视图结构</span></span><br><span class="line">    <span class="operator">-</span> 一般不修改视图，因为不是所有的更新视图都会映射到表上。</span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">VIEW</span> view_name [(column_list)] <span class="keyword">AS</span> select_statement</span><br><span class="line">    <span class="operator">-</span> 视图的其他结构的修改同表的修改</span><br><span class="line">        <span class="comment">-- 改名：RENAME TABLE view_money to vw_money;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 视图的增删改</span></span><br><span class="line">    注：如果对视图的一次增删改只会影响原本一个表的数据，那么会执行成功并更新原本的表</span><br><span class="line">        如果一次影响两张或以上的表的数据，则会报错。</span><br><span class="line">		</span><br><span class="line"><span class="comment">-- 视图算法(ALGORITHM)</span></span><br><span class="line">    <span class="keyword">MERGE</span>       合并</span><br><span class="line">        将视图的查询语句，与外部查询需要先合并再执行！</span><br><span class="line">    TEMPTABLE   临时表</span><br><span class="line">        将视图执行完毕后，形成临时表，再做外层查询！</span><br><span class="line">    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。</span><br></pre></td></tr></table></figure>
<h3 id="十三-事务">十三、事务</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。</span><br><span class="line">    <span class="operator">-</span> 支持连续<span class="keyword">SQL</span>的集体成功或集体撤销。</span><br><span class="line">    <span class="operator">-</span> 事务是数据库在数据完整性方面的一个功能。</span><br><span class="line">    <span class="operator">-</span> 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。</span><br><span class="line">    <span class="operator">-</span> InnoDB被称为事务安全型引擎。</span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line">    <span class="keyword">START</span> TRANSACTION; 或者 <span class="keyword">BEGIN</span>;</span><br><span class="line">    开启事务后，所有被执行的<span class="keyword">SQL</span>语句均被认作当前事务内的<span class="keyword">SQL</span>语句。</span><br><span class="line"><span class="comment">-- 事务提交</span></span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 事务回滚</span></span><br><span class="line">    <span class="keyword">ROLLBACK</span>;</span><br><span class="line">    如果部分操作发生问题，映射到事务开启前。</span><br><span class="line"><span class="comment">-- 事务的特性</span></span><br><span class="line">    <span class="number">1.</span> 原子性（Atomicity）</span><br><span class="line">        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</span><br><span class="line">    <span class="number">2.</span> 一致性（Consistency）</span><br><span class="line">        事务前后数据的完整性必须保持一致。</span><br><span class="line">        <span class="operator">-</span> 事务开始和结束时，外部数据一致</span><br><span class="line">        <span class="operator">-</span> 在整个事务过程中，操作是连续的</span><br><span class="line">    <span class="number">3.</span> 隔离性（Isolation）</span><br><span class="line">        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。</span><br><span class="line">    <span class="number">4.</span> 持久性（Durability）</span><br><span class="line">        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。</span><br><span class="line"><span class="comment">-- 事务的实现</span></span><br><span class="line">    <span class="number">1.</span> 要求是事务支持的表类型(innodb)</span><br><span class="line">    <span class="number">2.</span> 执行一组相关的操作前开启事务</span><br><span class="line">    <span class="number">3.</span> 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。</span><br><span class="line"><span class="comment">-- 事务的原理</span></span><br><span class="line">    利用InnoDB的自动提交(autocommit)特性完成。</span><br><span class="line">    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。</span><br><span class="line">    而事务是暂时关闭“自动提交”机制，需要<span class="keyword">commit</span>提交持久化数据操作。</span><br><span class="line"><span class="comment">-- 注意</span></span><br><span class="line">    <span class="number">1.</span> 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。</span><br><span class="line">    <span class="number">2.</span> 事务不能被嵌套</span><br><span class="line"><span class="comment">-- 保存点</span></span><br><span class="line">    <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 设置一个事务保存点</span></span><br><span class="line">    <span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 回滚到保存点</span></span><br><span class="line">    <span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 删除保存点</span></span><br><span class="line"><span class="comment">-- InnoDB自动提交特性设置</span></span><br><span class="line">    <span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span><span class="operator">|</span><span class="number">1</span>;   <span class="number">0</span>表示关闭自动提交，<span class="number">1</span>表示开启自动提交。</span><br><span class="line">    <span class="operator">-</span> 如果关闭了，那普通操作的结果对其他客户端也不可见，需要<span class="keyword">commit</span>提交后才能持久化数据操作。</span><br><span class="line">    <span class="operator">-</span> 也可以关闭自动提交来开启事务。但与<span class="keyword">START</span> TRANSACTION不同的是，</span><br><span class="line">        <span class="keyword">SET</span> autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)</span><br><span class="line">        而<span class="keyword">START</span> TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)</span><br></pre></td></tr></table></figure>
<h3 id="十四-锁表">十四、锁表</h3>
<p>参考视频：<a href="https://www.bilibili.com/video/av796273680">行锁、表锁、间隙锁</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MyISAM 支持表锁，InnoDB 支持行锁与表锁</span><br><span class="line">    <span class="operator">-</span> 当InnoDB中的索引失效时，就会由行锁变表锁</span><br><span class="line">    <span class="comment">-- innodb当更新某条数据时会启用行锁。锁住这行数据。如果索引失效，会升级为表锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何直观查看</span></span><br><span class="line">    <span class="number">1.</span> 关闭mysql的自动提交：<span class="keyword">set</span> autocommit<span class="operator">=</span><span class="number">0</span></span><br><span class="line">    <span class="number">2.</span> 行锁：模拟更新一条数据，不提交(<span class="keyword">commit</span>)(也可以看到防止脏读)，然后<span class="keyword">sql</span>再更新该行，会看到阻塞。</span><br><span class="line">    <span class="number">3.</span> 表锁，同上，再模拟出索引失效，再<span class="keyword">sql</span>更新其他行，会看到阻塞。</span><br></pre></td></tr></table></figure>
<h3 id="十五-触发器-尽量少用">十五、触发器(尽量少用)</h3>
<p>少用原因：1.sql语句部分程度上不可追踪。2.团队开发容易忽视。3.存在性能问题</p>
<p>参考视频：<a href="https://www.bilibili.com/video/av882530784">MySQL触发器设置</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 触发器 */</span> <span class="comment">------------------</span></span><br><span class="line">    触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象</span><br><span class="line">    监听：记录的增加、修改、删除。</span><br><span class="line"><span class="comment">-- 创建触发器</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name trigger_time trigger_event <span class="keyword">ON</span> tbl_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> trigger_stmt</span><br><span class="line">    参数：</span><br><span class="line">    trigger_name触发器名称</span><br><span class="line">    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。</span><br><span class="line">    trigger_event指明了激活触发程序的语句的类型</span><br><span class="line">        <span class="keyword">INSERT</span>：将新行插入表时激活触发程序</span><br><span class="line">        <span class="keyword">UPDATE</span>：更改某一行时激活触发程序</span><br><span class="line">        <span class="keyword">DELETE</span>：从表中删除某一行时激活触发程序</span><br><span class="line">    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。</span><br><span class="line">    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构</span><br><span class="line">        <span class="comment">-- 例： delimiter //</span></span><br><span class="line">                <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger1 after <span class="keyword">INSERT</span> <span class="keyword">ON</span> <span class="keyword">user</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> </span><br><span class="line">                <span class="keyword">BEGIN</span></span><br><span class="line">                    <span class="keyword">sql</span>语句;</span><br><span class="line">                    <span class="keyword">sql</span>语句;</span><br><span class="line">                <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">                delimiter;  <span class="comment">-- 此处可能也不需要</span></span><br><span class="line">        <span class="comment">-- 解释：创建名为trigger1的触发器：在user表的insert操作执行之后，执行两条sql语句</span></span><br><span class="line">        <span class="comment">-- 注意：delimiter // 是修改结束符，后面的//也要保留</span></span><br><span class="line">    			</span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line">  <span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [schema_name.]trigger_name</span><br><span class="line">  可以使用<span class="keyword">old</span>和<span class="keyword">new</span>代替旧的和新的数据</span><br><span class="line">      更新操作，更新前是<span class="keyword">old</span>，更新后是new.</span><br><span class="line">      删除操作，只有old.</span><br><span class="line">      增加操作，只有new.</span><br><span class="line"><span class="comment">-- 注意</span></span><br><span class="line">  <span class="number">1.</span> 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。</span><br><span class="line"><span class="comment">-- 字符连接函数</span></span><br><span class="line">  concat(str1,str2,...])</span><br><span class="line">  concat_ws(separator,str1,str2,...)</span><br><span class="line"><span class="comment">-- 分支语句</span></span><br><span class="line">    if 条件 <span class="keyword">then</span></span><br><span class="line">        执行语句</span><br><span class="line">    elseif 条件 <span class="keyword">then</span></span><br><span class="line">        执行语句</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        执行语句</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line"><span class="comment">-- 修改最外层语句结束符</span></span><br><span class="line">    delimiter 自定义结束符号</span><br><span class="line">        <span class="keyword">SQL</span>语句</span><br><span class="line">    自定义结束符号</span><br><span class="line">    delimiter ;     <span class="comment">-- 修改回原来的分号</span></span><br><span class="line"><span class="comment">-- 语句块包裹</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        语句块</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 特殊的执行</span></span><br><span class="line">    <span class="number">1.</span> 只要添加记录，就会触发程序。</span><br><span class="line">    <span class="number">2.</span> <span class="keyword">Insert</span> <span class="keyword">into</span> <span class="keyword">on</span> duplicate key <span class="keyword">update</span> 语法会触发：</span><br><span class="line">    如果没有重复记录，会触发 before <span class="keyword">insert</span>, after <span class="keyword">insert</span>;</span><br><span class="line">    如果有重复记录并更新，会触发 before <span class="keyword">insert</span>, before <span class="keyword">update</span>, after <span class="keyword">update</span>;</span><br><span class="line">    如果有重复记录但是没有发生更新，则触发 before <span class="keyword">insert</span>, before <span class="keyword">update</span></span><br><span class="line">    <span class="number">3.</span> Replace 语法 如果有记录，则执行 before <span class="keyword">insert</span>, before <span class="keyword">delete</span>, after <span class="keyword">delete</span>, after <span class="keyword">insert</span></span><br></pre></td></tr></table></figure>
<h3 id="十六-sql编程">十六、SQL编程</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* SQL编程 */</span> <span class="comment">------------------</span></span><br><span class="line"><span class="comment">--// 局部变量 ----------</span></span><br><span class="line"><span class="comment">-- 变量声明</span></span><br><span class="line">    <span class="keyword">declare</span> var_name[,...] type [<span class="keyword">default</span> <span class="keyword">value</span>]</span><br><span class="line">    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个<span class="keyword">default</span>子句。值可以被指定为一个表达式，不需要为一个常数。如果没有<span class="keyword">default</span>子句，初始值为<span class="keyword">null</span>。</span><br><span class="line"><span class="comment">-- 赋值</span></span><br><span class="line">    使用 <span class="keyword">set</span> 和 <span class="keyword">select</span> <span class="keyword">into</span> 语句为变量赋值。</span><br><span class="line">    <span class="operator">-</span> 注意：在函数内是可以使用全局变量（用户自定义的变量）</span><br><span class="line"><span class="comment">--// 全局变量 ----------</span></span><br><span class="line"><span class="comment">-- 定义、赋值</span></span><br><span class="line">  <span class="keyword">set</span> 语句可以定义并为变量赋值。</span><br><span class="line">  <span class="keyword">set</span> <span class="variable">@var</span> <span class="operator">=</span> <span class="keyword">value</span>;</span><br><span class="line">  也可以使用<span class="keyword">select</span> <span class="keyword">into</span>语句为变量初始化并赋值。这样要求<span class="keyword">select</span>语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。</span><br><span class="line">  还可以把赋值语句看作一个表达式，通过<span class="keyword">select</span>执行完成。此时为了避免<span class="operator">=</span>被当作关系运算符看待，使用:<span class="operator">=</span>代替。（<span class="keyword">set</span>语句可以使用<span class="operator">=</span> 和 :<span class="operator">=</span>）。</span><br><span class="line">  <span class="keyword">select</span> <span class="variable">@var</span>:<span class="operator">=</span><span class="number">20</span>;</span><br><span class="line">  <span class="keyword">select</span> <span class="variable">@v1</span>:<span class="operator">=</span>id, <span class="variable">@v2</span><span class="operator">=</span>name <span class="keyword">from</span> t1 limit <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_name <span class="keyword">where</span> <span class="variable">@var</span>:<span class="operator">=</span><span class="number">30</span>;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">into</span> 可以将表中查询获得的数据赋给变量。</span><br><span class="line">    <span class="operator">-</span><span class="operator">|</span> <span class="keyword">select</span> <span class="built_in">max</span>(height) <span class="keyword">into</span> <span class="variable">@max_height</span> <span class="keyword">from</span> tb;</span><br><span class="line"><span class="comment">-- 自定义变量名</span></span><br><span class="line">  为了避免<span class="keyword">select</span>语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。</span><br><span class="line">  <span class="variable">@var</span><span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">    <span class="operator">-</span> 变量被定义后，在整个会话周期都有效（登录到退出）</span><br><span class="line"><span class="comment">--// 控制结构 ----------</span></span><br><span class="line"><span class="comment">-- if语句</span></span><br><span class="line">  if search_condition <span class="keyword">then</span></span><br><span class="line">      statement_list   </span><br><span class="line">  [elseif search_condition <span class="keyword">then</span></span><br><span class="line">      statement_list]</span><br><span class="line">  ...</span><br><span class="line">  [<span class="keyword">else</span></span><br><span class="line">      statement_list]</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line"><span class="comment">-- case语句</span></span><br><span class="line">  <span class="keyword">CASE</span> <span class="keyword">value</span> <span class="keyword">WHEN</span> [compare<span class="operator">-</span><span class="keyword">value</span>] <span class="keyword">THEN</span> <span class="keyword">result</span></span><br><span class="line">  [<span class="keyword">WHEN</span> [compare<span class="operator">-</span><span class="keyword">value</span>] <span class="keyword">THEN</span> <span class="keyword">result</span> ...]</span><br><span class="line">  [<span class="keyword">ELSE</span> <span class="keyword">result</span>]</span><br><span class="line">  <span class="keyword">END</span></span><br><span class="line"><span class="comment">-- while循环</span></span><br><span class="line">  [begin_label:] while search_condition do</span><br><span class="line">      statement_list</span><br><span class="line">  <span class="keyword">end</span> while [end_label];</span><br><span class="line">  <span class="operator">-</span> 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。</span><br><span class="line">    <span class="comment">-- 退出循环</span></span><br><span class="line">        退出整个循环 leave</span><br><span class="line">        退出当前循环 iterate</span><br><span class="line">        通过退出的标签决定退出哪个循环</span><br><span class="line"><span class="comment">--// 内置函数 ----------</span></span><br><span class="line"><span class="comment">-- 数值函数</span></span><br><span class="line">  <span class="built_in">abs</span>(x)          <span class="comment">-- 绝对值 abs(-10.9) = 10</span></span><br><span class="line">  format(x, d)    <span class="comment">-- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span></span><br><span class="line">  <span class="built_in">ceil</span>(x)         <span class="comment">-- 向上取整 ceil(10.1) = 11</span></span><br><span class="line">  <span class="built_in">floor</span>(x)        <span class="comment">-- 向下取整 floor (10.1) = 10</span></span><br><span class="line">  round(x)        <span class="comment">-- 四舍五入去整</span></span><br><span class="line">  <span class="built_in">mod</span>(m, n)       <span class="comment">-- m%n m mod n 求余 10%3=1</span></span><br><span class="line">  pi()            <span class="comment">-- 获得圆周率</span></span><br><span class="line">  pow(m, n)       <span class="comment">-- m^n</span></span><br><span class="line">  <span class="built_in">sqrt</span>(x)         <span class="comment">-- 算术平方根</span></span><br><span class="line">  rand()          <span class="comment">-- 随机数</span></span><br><span class="line">  <span class="keyword">truncate</span>(x, d)  <span class="comment">-- 截取d位小数</span></span><br><span class="line"><span class="comment">-- 时间日期函数</span></span><br><span class="line">  now(), <span class="built_in">current_timestamp</span>();     <span class="comment">-- 当前日期时间</span></span><br><span class="line">  <span class="built_in">current_date</span>();                 <span class="comment">-- 当前日期</span></span><br><span class="line">  <span class="built_in">current_time</span>();                 <span class="comment">-- 当前时间</span></span><br><span class="line">  <span class="type">date</span>(<span class="string">&#x27;yyyy-mm-dd hh:ii:ss&#x27;</span>);    <span class="comment">-- 获取日期部分</span></span><br><span class="line">  <span class="type">time</span>(<span class="string">&#x27;yyyy-mm-dd hh:ii:ss&#x27;</span>);    <span class="comment">-- 获取时间部分</span></span><br><span class="line">  date_format(<span class="string">&#x27;yyyy-mm-dd hh:ii:ss&#x27;</span>, <span class="string">&#x27;%d %y %a %d %m %b %j&#x27;</span>); <span class="comment">-- 格式化时间</span></span><br><span class="line">  unix_timestamp();               <span class="comment">-- 获得unix时间戳</span></span><br><span class="line">  from_unixtime();                <span class="comment">-- 从时间戳获得时间</span></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line">  length(string)          <span class="comment">-- string长度，字节</span></span><br><span class="line">  <span class="keyword">char_length</span>(string)     <span class="comment">-- string的字符个数</span></span><br><span class="line">  <span class="built_in">substring</span>(str, position [,length])      <span class="comment">-- 从str的position开始,取length个字符</span></span><br><span class="line">  replace(str ,search_str ,replace_str)   <span class="comment">-- 在str中用replace_str替换search_str</span></span><br><span class="line">  instr(string ,substring)    <span class="comment">-- 返回substring首次在string中出现的位置</span></span><br><span class="line">  concat(string [,...])   <span class="comment">-- 连接字串</span></span><br><span class="line">  charset(str)            <span class="comment">-- 返回字串字符集</span></span><br><span class="line">  lcase(string)           <span class="comment">-- 转换成小写</span></span><br><span class="line">  <span class="keyword">left</span>(string, length)    <span class="comment">-- 从string2中的左边起取length个字符</span></span><br><span class="line">  load_file(file_name)    <span class="comment">-- 从文件读取内容</span></span><br><span class="line">  locate(substring, string [,start_position]) <span class="comment">-- 同instr,但可指定开始位置</span></span><br><span class="line">  lpad(string, length, pad)   <span class="comment">-- 重复用pad加在string开头,直到字串长度为length</span></span><br><span class="line">  ltrim(string)           <span class="comment">-- 去除前端空格</span></span><br><span class="line">  repeat(string, count)   <span class="comment">-- 重复count次</span></span><br><span class="line">  rpad(string, length, pad)   <span class="comment">--在str后用pad补充,直到长度为length</span></span><br><span class="line">  rtrim(string)           <span class="comment">-- 去除后端空格</span></span><br><span class="line">  strcmp(string1 ,string2)    <span class="comment">-- 逐字符比较两字串大小</span></span><br><span class="line"><span class="comment">-- 流程函数</span></span><br><span class="line">  <span class="keyword">case</span> <span class="keyword">when</span> [<span class="keyword">condition</span>] <span class="keyword">then</span> <span class="keyword">result</span> [<span class="keyword">when</span> [<span class="keyword">condition</span>] <span class="keyword">then</span> <span class="keyword">result</span> ...] [<span class="keyword">else</span> <span class="keyword">result</span>] <span class="keyword">end</span>   多分支</span><br><span class="line">  if(expr1,expr2,expr3)  双分支。</span><br><span class="line"><span class="comment">-- 聚合函数</span></span><br><span class="line">  <span class="built_in">count</span>()</span><br><span class="line">  <span class="built_in">sum</span>();</span><br><span class="line">  <span class="built_in">max</span>();</span><br><span class="line">  <span class="built_in">min</span>();</span><br><span class="line">  <span class="built_in">avg</span>();</span><br><span class="line">  group_concat()</span><br><span class="line"><span class="comment">-- 其他常用函数</span></span><br><span class="line">  md5();</span><br><span class="line">  <span class="keyword">default</span>();</span><br><span class="line"><span class="comment">--// 存储函数，自定义函数 ----------</span></span><br><span class="line"><span class="comment">-- 新建</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> function_name (参数列表) <span class="keyword">RETURNS</span> 返回值类型</span><br><span class="line">        函数体</span><br><span class="line">    <span class="operator">-</span> 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。</span><br><span class="line">    <span class="operator">-</span> 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。</span><br><span class="line">    <span class="operator">-</span> 参数部分，由&quot;参数名&quot;和&quot;参数类型&quot;组成。多个参数用逗号隔开。</span><br><span class="line">    <span class="operator">-</span> 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。</span><br><span class="line">    <span class="operator">-</span> 多条语句应该使用 begin...end 语句块包含。</span><br><span class="line">    <span class="operator">-</span> 一定要有 <span class="keyword">return</span> 返回值语句。</span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> [IF <span class="keyword">EXISTS</span>] function_name;</span><br><span class="line"><span class="comment">-- 查看</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">FUNCTION</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;partten&#x27;</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> function_name;</span><br><span class="line"><span class="comment">-- 修改</span></span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">FUNCTION</span> function_name 函数选项</span><br><span class="line"><span class="comment">--// 存储过程，自定义功能 ----------</span></span><br><span class="line"><span class="comment">-- 定义</span></span><br><span class="line">  存储存储过程 是一段代码（过程），存储在数据库中的<span class="keyword">sql</span>组成。</span><br><span class="line">  一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。</span><br><span class="line">  而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过<span class="keyword">call</span>执行。</span><br><span class="line"><span class="comment">-- 创建</span></span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_name (参数列表)</span><br><span class="line">      过程体</span><br><span class="line">  参数列表：不同于函数的参数列表，需要指明参数类型</span><br><span class="line">  <span class="keyword">IN</span>，表示输入型</span><br><span class="line">  <span class="keyword">OUT</span>，表示输出型</span><br><span class="line">  <span class="keyword">INOUT</span>，表示混合型</span><br><span class="line">  注意，没有返回值。</span><br></pre></td></tr></table></figure>
<h3 id="十七-存储过程">十七、存储过程</h3>
<p>参考视频：<a href="https://www.bilibili.com/video/av582793063?p=2">MySQL数据库存储过程</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 存储过程 */</span> <span class="comment">------------------</span></span><br><span class="line">  存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。</span><br><span class="line">  调用：<span class="keyword">CALL</span> 过程名</span><br><span class="line"><span class="comment">-- 注意</span></span><br><span class="line">  <span class="operator">-</span> 没有返回值。</span><br><span class="line">  <span class="operator">-</span> 只能单独调用，不可夹杂在其他语句中</span><br><span class="line"><span class="comment">-- 参数</span></span><br><span class="line">  <span class="keyword">IN</span><span class="operator">|</span><span class="keyword">OUT</span><span class="operator">|</span><span class="keyword">INOUT</span> 参数名 数据类型</span><br><span class="line">  <span class="keyword">IN</span>      输入：在调用过程中，将数据输入到过程体内部的参数</span><br><span class="line">  <span class="keyword">OUT</span>     输出：在调用过程中，将过程体处理完的结果返回到客户端</span><br><span class="line">  <span class="keyword">INOUT</span>   输入输出：既可输入，也可输出</span><br><span class="line"><span class="comment">-- 语法</span></span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 过程名 (参数列表)</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">      过程体</span><br><span class="line">  <span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例：简单案例</span></span><br><span class="line">    <span class="comment">-- 创建名为my_procedure01()的存储过程</span></span><br><span class="line">    delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">procedure</span> my_procedure01()</span><br><span class="line">    <span class="keyword">begin</span> </span><br><span class="line">        <span class="keyword">declare</span> nickname <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">default</span> <span class="string">&#x27;SF&#x27;</span>;	<span class="comment">-- 定义名为nickname的变量默认只为&#x27;SF&#x27;</span></span><br><span class="line">        <span class="keyword">select</span> nickname;	<span class="comment">-- 查询nickname的值</span></span><br><span class="line">        <span class="keyword">set</span> nickname <span class="operator">=</span> <span class="string">&#x27;UG&#x27;</span>;	<span class="comment">-- 改变nickname的值为&#x27;UG&#x27;</span></span><br><span class="line">        <span class="keyword">select</span> nickname;	<span class="comment">-- 查询nickname的值</span></span><br><span class="line">    <span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span>					<span class="comment">-- 创建存储过程执行完毕</span></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">call</span> my_procedure01();	<span class="comment">-- 调用存储过程</span></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">drop</span> <span class="keyword">procedure</span> my_procedure01;	<span class="comment">-- 删除存储过程</span></span><br></pre></td></tr></table></figure>
<h3 id="十八-用户与权限管理">十八、用户与权限管理</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- root密码重置(第6步重要)</span></span><br><span class="line">  <span class="number">1.</span> 停止MySQL服务(以管理员权限运行)</span><br><span class="line">      <span class="comment">-- net stop mysql</span></span><br><span class="line">  <span class="number">2.</span>  跳过mysql的表授权，(不输入密码也可以获取管理员权限)</span><br><span class="line">      [Linux] <span class="operator">/</span>usr<span class="operator">/</span><span class="keyword">local</span><span class="operator">/</span>mysql<span class="operator">/</span>bin<span class="operator">/</span>safe_mysqld <span class="comment">--skip-grant-tables &amp;   (命令前是自己的安装地址)</span></span><br><span class="line">      [Windows] mysqld <span class="comment">--skip-grant-tables</span></span><br><span class="line">  <span class="number">3.</span> 另启一个命令行窗口，选中mysql的的mysql数据库</span><br><span class="line">      <span class="comment">-- use mysql</span></span><br><span class="line">  <span class="number">4.</span>更新mysql数据库中的<span class="keyword">user</span>表，该表存储了用户名与密码</span><br><span class="line">      <span class="comment">-- update user set password=(&#x27;root&#x27;) where user=&#x27;root&#x27;;</span></span><br><span class="line">      <span class="comment">-- 解释：更新user表中名为root的用户的密码为root</span></span><br><span class="line">  <span class="number">5.</span>刷新权限</span><br><span class="line">    <span class="comment">-- FLUSH PRIVILEGES;</span></span><br><span class="line">  <span class="number">6.</span> 退出并杀死重启mysql(否则依旧可以无密码使用)	</span><br><span class="line">    <span class="comment">-- exit;</span></span><br><span class="line">    <span class="comment">-- 杀死mysql重启(关闭mysqld服务，否则mysql服务无法启动，如果登录mysql报1103错误，参考https://www.cnblogs.com/rnckty/p/5577818.html)</span></span><br><span class="line">  	</span><br><span class="line"><span class="comment">-- 增加用户</span></span><br><span class="line">    <span class="operator">-</span> 先进入mysql环境，选择mysql数据库：use mysql;</span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;user_name&#x27;</span>@<span class="string">&#x27;host&#x27;</span> IDENTIFIED <span class="keyword">BY</span> [PASSWORD] 密码(字符串)</span><br><span class="line">    <span class="operator">-</span> 必须拥有mysql数据库的全局<span class="keyword">CREATE</span> <span class="keyword">USER</span>权限，或拥有<span class="keyword">INSERT</span>权限。</span><br><span class="line">    <span class="operator">-</span> 只能创建用户，不能赋予权限。</span><br><span class="line">    <span class="operator">-</span> 用户名，注意引号：如 <span class="string">&#x27;user_name&#x27;</span>@<span class="string">&#x27;192.168.1.1&#x27;</span></span><br><span class="line">        <span class="operator">-</span> user_name:用户名。host：用户登录ip地址，如只允许从本机登陆，则填<span class="string">&#x27;localhost&#x27;</span> ，允许远程登，则填<span class="string">&#x27;%&#x27;</span></span><br><span class="line">    <span class="operator">-</span> 密码也需引号，纯数字密码也要加引号</span><br><span class="line">    <span class="operator">-</span> 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD</span><br><span class="line">      <span class="comment">-- 例：create user &#x27;user1&#x27;@&#x27;localhost&#x27; identified by &#x27;user1&#x27;;</span></span><br><span class="line">      <span class="comment">-- 解释：创建user1用户，密码是user1</span></span><br><span class="line">      	</span><br><span class="line"><span class="comment">-- 重命名用户</span></span><br><span class="line">    RENAME <span class="keyword">USER</span> <span class="string">&#x27;old_user_name&#x27;</span>@<span class="string">&#x27;host&#x27;</span> <span class="keyword">TO</span> <span class="string">&#x27;new_user_name&#x27;</span>@<span class="string">&#x27;host&#x27;</span></span><br><span class="line">      <span class="comment">-- 例：RENAME USER &#x27;user1&#x27;@&#x27;localhost&#x27; TO &#x27;ren_user1&#x27;@&#x27;localhost&#x27;;</span></span><br><span class="line">      <span class="comment">-- 解释：将user1用户重命名为ren_user1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置密码</span></span><br><span class="line">    <span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;密码&#x27;</span>)  <span class="comment">-- 为当前用户设置密码</span></span><br><span class="line">    <span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;user_name&#x27;</span>@<span class="string">&#x27;host&#x27;</span> <span class="operator">=</span> PASSWORD(<span class="string">&#x27;密码&#x27;</span>) <span class="comment">-- 为指定用户设置密码</span></span><br><span class="line">      <span class="comment">-- 例：set password for &#x27;ren_user1&#x27;@&#x27;localhost&#x27;=password(&#x27;ren_user1&#x27;);</span></span><br><span class="line">      <span class="comment">-- 解释：将ren_user1用户的密码改为ren_user1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 权限层级</span></span><br><span class="line"><span class="comment">-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。</span></span><br><span class="line">  <span class="operator">-</span> 全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user</span><br><span class="line">      <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;user_name&#x27;</span>@<span class="string">&#x27;host&#x27;</span> 和 <span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;user_name&#x27;</span>@<span class="string">&#x27;host&#x27;</span> 只授予和撤销全局权限。</span><br><span class="line">        <span class="comment">-- 例：GRANT ALL ON *.* TO &#x27;ren_user1&#x27;@&#x27;localhost&#x27;</span></span><br><span class="line">        <span class="comment">-- 解释：给与ren_user1用户全局权限，ALL指代所有权限，*.*指代全局</span></span><br><span class="line">        <span class="comment">-- 例：REVOKE ALL ON *.* FROM &#x27;ren_user1&#x27;@&#x27;localhost&#x27;</span></span><br><span class="line">        <span class="comment">-- 解释：移除ren_user1用户全局权限</span></span><br><span class="line">  <span class="operator">-</span> 数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host</span><br><span class="line">      <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.<span class="operator">*</span> <span class="keyword">TO</span> 和<span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.<span class="operator">*</span> <span class="keyword">FROM</span> 只授予和撤销数据库权限。</span><br><span class="line">  <span class="operator">-</span> 表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv</span><br><span class="line">      <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.tbl_name <span class="keyword">TO</span>和<span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.tbl_name <span class="keyword">FROM</span>只授予和撤销表权限。</span><br><span class="line">  <span class="operator">-</span> 列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv</span><br><span class="line">      当使用<span class="keyword">REVOKE</span>时，您必须指定与被授权列相同的列。</span><br><span class="line">      <span class="keyword">GRANT</span> <span class="keyword">ALL</span> (col1，col2) <span class="keyword">ON</span> db_name.tbl_name <span class="keyword">TO</span> </span><br><span class="line"><span class="comment">-- 权限列表，如下可以替换上面的ALL</span></span><br><span class="line">    <span class="keyword">ALL</span> [PRIVILEGES]    <span class="comment">-- 设置除GRANT OPTION之外的所有简单权限</span></span><br><span class="line">    <span class="keyword">ALTER</span>   <span class="comment">-- 允许使用ALTER TABLE</span></span><br><span class="line">    <span class="keyword">ALTER</span> ROUTINE   <span class="comment">-- 更改或取消已存储的子程序</span></span><br><span class="line">    <span class="keyword">CREATE</span>  <span class="comment">-- 允许使用CREATE TABLE</span></span><br><span class="line">    <span class="keyword">CREATE</span> ROUTINE  <span class="comment">-- 创建已存储的子程序</span></span><br><span class="line">    <span class="keyword">CREATE</span> TEMPORARY TABLES     <span class="comment">-- 允许使用CREATE TEMPORARY TABLE</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">USER</span>     <span class="comment">-- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">VIEW</span>     <span class="comment">-- 允许使用CREATE VIEW</span></span><br><span class="line">    <span class="keyword">DELETE</span>  <span class="comment">-- 允许使用DELETE</span></span><br><span class="line">    <span class="keyword">DROP</span>    <span class="comment">-- 允许使用DROP TABLE</span></span><br><span class="line">    <span class="keyword">EXECUTE</span>     <span class="comment">-- 允许用户运行已存储的子程序</span></span><br><span class="line">    FILE    <span class="comment">-- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span></span><br><span class="line">    INDEX   <span class="comment">-- 允许使用CREATE INDEX和DROP INDEX</span></span><br><span class="line">    <span class="keyword">INSERT</span>  <span class="comment">-- 允许使用INSERT</span></span><br><span class="line">    LOCK TABLES     <span class="comment">-- 允许对您拥有SELECT权限的表使用LOCK TABLES</span></span><br><span class="line">    PROCESS     <span class="comment">-- 允许使用SHOW FULL PROCESSLIST</span></span><br><span class="line">    <span class="keyword">REFERENCES</span>  <span class="comment">-- 未被实施</span></span><br><span class="line">    RELOAD  <span class="comment">-- 允许使用FLUSH</span></span><br><span class="line">    REPLICATION CLIENT  <span class="comment">-- 允许用户询问从属服务器或主服务器的地址</span></span><br><span class="line">    REPLICATION SLAVE   <span class="comment">-- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span></span><br><span class="line">    <span class="keyword">SELECT</span>  <span class="comment">-- 允许使用SELECT</span></span><br><span class="line">    <span class="keyword">SHOW</span> DATABASES  <span class="comment">-- 显示所有数据库</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">VIEW</span>   <span class="comment">-- 允许使用SHOW CREATE VIEW</span></span><br><span class="line">    SHUTDOWN    <span class="comment">-- 允许使用mysqladmin shutdown</span></span><br><span class="line">    SUPER   <span class="comment">-- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span></span><br><span class="line">    <span class="keyword">UPDATE</span>  <span class="comment">-- 允许使用UPDATE</span></span><br><span class="line">    USAGE   <span class="comment">-- “无权限”的同义词</span></span><br><span class="line"><span class="comment">-- 同时授予用户授予权限的权限</span></span><br><span class="line">    <span class="keyword">GRANT</span> OPTION    <span class="comment">-- 允许授予权限  </span></span><br><span class="line">      <span class="comment">-- 这里使用跟在末尾</span></span><br><span class="line">      <span class="comment">-- 例子：GRANT ALL ON *.* TO &#x27;ren_user1&#x27;@&#x27;localhost&#x27; with GRANT OPTION</span></span><br><span class="line">	  </span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;user_name&#x27;</span>@<span class="string">&#x27;host&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="十九-表维护">十九、表维护</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 表维护 */</span></span><br><span class="line"><span class="comment">-- 分析和存储表的关键字分布</span></span><br><span class="line">ANALYZE [<span class="keyword">LOCAL</span> <span class="operator">|</span> NO_WRITE_TO_BINLOG] <span class="keyword">TABLE</span> 表名 ...</span><br><span class="line">   <span class="operator">-</span> ANALYZE <span class="keyword">TABLE</span>语句被写入二进制日志中，除非使用了自选的NO_WRITE_TO_BINLOG关键词（或其别名<span class="keyword">LOCAL</span>）。</span><br><span class="line">      <span class="comment">-- 例：analyze  table day01.user;</span></span><br><span class="line">      <span class="comment">-- 解释：分析day01中的user表</span></span><br><span class="line">      <span class="comment">-- 结果参数解释</span></span><br><span class="line">          <span class="comment">-- Table:表名称  Op：进行状态  Msg_type：状态、错误、信息或警告之一  Msg_text：消息</span></span><br><span class="line"><span class="comment">-- 检查一个或多个表是否有错误</span></span><br><span class="line"><span class="keyword">CHECK</span> <span class="keyword">TABLE</span> tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">option <span class="operator">=</span> &#123;QUICK <span class="operator">|</span> FAST <span class="operator">|</span> MEDIUM <span class="operator">|</span> EXTENDED <span class="operator">|</span> CHANGED&#125;</span><br><span class="line">    <span class="comment">-- 例:check TABLE day01.user [quick];</span></span><br><span class="line"><span class="comment">-- 整理数据文件的碎片</span></span><br><span class="line">OPTIMIZE [<span class="keyword">LOCAL</span> <span class="operator">|</span> NO_WRITE_TO_BINLOG] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ...</span><br><span class="line">    <span class="comment">-- 例：optimize table day01.user;</span></span><br></pre></td></tr></table></figure>
<h3 id="二十-杂项">二十、杂项</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 杂项 */</span> <span class="comment">------------------</span></span><br><span class="line"><span class="number">1.</span> 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</span><br><span class="line"><span class="number">2.</span> 每个库目录存在一个保存当前数据库的选项文件db.opt。</span><br><span class="line"><span class="number">3.</span> 注释：</span><br><span class="line">    单行注释 # 注释内容</span><br><span class="line">    多行注释 <span class="comment">/* 注释内容 */</span></span><br><span class="line">    单行注释 <span class="comment">-- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</span></span><br><span class="line"><span class="number">4.</span> 模式通配符：</span><br><span class="line">    _   任意单个字符</span><br><span class="line">    <span class="operator">%</span>   任意多个字符，甚至包括零字符</span><br><span class="line">    单引号需要进行转义 \<span class="string">&#x27;</span></span><br><span class="line"><span class="string">5. CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;\G&quot;, &quot;\g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</span></span><br><span class="line"><span class="string">6. SQL对大小写不敏感</span></span><br><span class="line"><span class="string">7. 清除已有语句：\c</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql命令总结(一)</title>
    <url>/2021/02/14/Mysql%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93(%E4%B8%80)/</url>
    <content><![CDATA[<p><strong>版权声明</strong>：本文转载自<a href="https://shockerli.net/post/1000-line-mysql-note/">一千行 MySQL 学习笔记</a>，并在一定程度上进行了<strong>增删改</strong>。</p>
<span id="more"></span>
<h2 id="mysql">mysql</h2>
<p><strong>注：所有操作基于day01数据库</strong></p>
<p><strong>注：所有sql命令中的 [字段] 意为可选字段</strong></p>
<p>创建表(<span style="color:red">以下表均为虚构</span>)：</p>
<p><strong>user</strong>表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `money` <span class="keyword">double</span>(<span class="number">10</span>, <span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `score` <span class="type">int</span>(<span class="number">8</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> INDEX `money`(`money`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `normalIndex`(`name`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">8</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="number">24</span>, <span class="number">1000.00</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="keyword">NULL</span>, <span class="number">2000.00</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;未设置&#x27;</span>, <span class="number">18</span>, <span class="number">0.00</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="number">18</span>, <span class="number">3000.00</span>, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;田七&#x27;</span>, <span class="number">18</span>, <span class="number">3500.00</span>, <span class="number">9</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;田七&#x27;</span>, <span class="number">17</span>, <span class="number">4100.00</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>t_user表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_user`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">4</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of t_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_user` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="number">23</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_user` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_user` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>t_money表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_money</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_money`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_money`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `money` <span class="keyword">double</span>(<span class="number">40</span>, <span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">4</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of t_money</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_money` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_money` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_money` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="一-基本操作">一、基本操作</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 启动MySQL</span></span><br><span class="line">    net <span class="keyword">start</span> mysql;</span><br><span class="line"><span class="comment">-- 创建Windows服务</span></span><br><span class="line">    sc <span class="keyword">create</span> mysql binPath<span class="operator">=</span> mysqld_bin_path;(注意：等号与值之间有空格)</span><br><span class="line"><span class="comment">/* 连接与断开服务器 */</span></span><br><span class="line">    mysql <span class="operator">-</span>h 地址 <span class="operator">-</span>P 端口 <span class="operator">-</span>u 用户名 <span class="operator">-</span>p 密码;</span><br><span class="line">    <span class="keyword">SHOW</span> PROCESSLIST <span class="comment">-- 显示哪些线程正在运行</span></span><br><span class="line">    <span class="keyword">SHOW</span> VARIABLES <span class="comment">-- 显示系统变量信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 停止MySQL</span></span><br><span class="line">    net stop mysql;</span><br></pre></td></tr></table></figure>
<h3 id="二-数据库的操作">二、数据库的操作</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看所有已存在的数据库</span></span><br><span class="line">    <span class="keyword">show</span> databases;</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line">    <span class="keyword">create</span> database[if <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名 数据库选项</span><br><span class="line">    数据库选项：</span><br><span class="line">        <span class="type">CHARACTER</span> <span class="keyword">SET</span> charset_name</span><br><span class="line">        <span class="keyword">COLLATE</span> collation_name</span><br><span class="line">    <span class="comment">-- 实例：如果名为day01的数据库不存在，就创建，创建默认编码为utf8，排序规则为utf8_general_ci</span></span><br><span class="line">    <span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> day01 <span class="keyword">DEFAULT</span> CHARSET utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 使用该数据库</span></span><br><span class="line">    use 数据库名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看当前选中使用的数据库</span></span><br><span class="line">    <span class="keyword">select</span> database();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看指定的数据库数据库信息</span></span><br><span class="line">    <span class="keyword">show</span> <span class="keyword">create</span> database 数据库名;</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 删除数据库</span></span><br><span class="line">    <span class="keyword">drop</span> database[if <span class="keyword">exists</span>] 数据库名;</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
<h3 id="三-表操作">三、表操作</h3>
<ol>
<li>记忆：操作表，(不操作表的数据)，都需要加上table参数</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line">    <span class="keyword">CREATE</span> [TEMPORARY] <span class="keyword">TABLE</span>[ IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] [库名.]表名 ( 表的结构定义 )[ 表选项]</span><br><span class="line">    <span class="comment">-- TEMPORARY 表示创建临时表，会话结束后消失</span></span><br><span class="line">    <span class="comment">-- 表结构定义：</span></span><br><span class="line">        字段名 数据类型 [<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>] [<span class="keyword">DEFAULT</span> default_value] [AUTO_INCREMENT] [<span class="keyword">UNIQUE</span> [KEY] <span class="operator">|</span> [<span class="keyword">PRIMARY</span>] KEY] [COMMENT <span class="string">&#x27;string&#x27;</span>]</span><br><span class="line">        [<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>]：不能为空<span class="operator">/</span>可以为空(默认)</span><br><span class="line">        [<span class="keyword">DEFAULT</span> default_value]：如果为空则自动设置值为default_value</span><br><span class="line">        [AUTO_INCREMENT] ：自增长，一般用于主键id</span><br><span class="line">        [<span class="keyword">UNIQUE</span> [KEY]：唯一约束，同主键一样，值不能重复，但是可以设置多个</span><br><span class="line">        [<span class="keyword">PRIMARY</span>] KEY]：主键</span><br><span class="line">        [COMMENT <span class="string">&#x27;string&#x27;</span>]：表注释</span><br><span class="line">    <span class="comment">-- 实例：</span></span><br><span class="line">      <span class="comment">-- 如果不存在就创建 user表(避免存在报错)</span></span><br><span class="line">	<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> if <span class="keyword">not</span> <span class="keyword">EXISTS</span> <span class="keyword">user</span>(</span><br><span class="line">		<span class="comment">-- 创建自增长id主键</span></span><br><span class="line">		id <span class="type">int</span> <span class="keyword">PRIMARY</span> key auto_increment,</span><br><span class="line">		<span class="comment">-- 创建string类型姓名不能为空，默认值未&#x27;未设置&#x27;，注释：姓名</span></span><br><span class="line">		name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;未设置&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">		<span class="comment">-- 创建string类型mone不能为空，并且唯一约束(如果可以为null，是允许存在多个null的)</span></span><br><span class="line">		money <span class="keyword">DOUBLE</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">UNIQUE</span></span><br><span class="line">	)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查看所有表</span></span><br><span class="line">    <span class="keyword">show</span> tables </span><br><span class="line">    <span class="keyword">show</span> tables <span class="keyword">from</span> 数据库名</span><br><span class="line">    <span class="comment">-- 查看表中数据就是sql语句select *;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表</span></span><br><span class="line">    <span class="comment">-- 修改表本身</span></span><br><span class="line">        <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 表的选项</span><br><span class="line">        eg：<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 ENGINE<span class="operator">=</span>MYISAM; (将表的引擎改为myisam)</span><br><span class="line">    <span class="comment">-- 对表进行重命名</span></span><br><span class="line">        RENAME <span class="keyword">TABLE</span> 原表名 <span class="keyword">TO</span> 新表名;</span><br><span class="line">        RENAME <span class="keyword">TABLE</span> 原表名 <span class="keyword">TO</span> 库名.表名 (可以将表移动到另一个数据库)</span><br><span class="line">    <span class="comment">-- 修改表的字段(ALTER TABLE 语法)</span></span><br><span class="line">        <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 操作名</span><br><span class="line">        <span class="comment">-- 操作名</span></span><br><span class="line">            <span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] 字段定义			 <span class="comment">-- 增加字段</span></span><br><span class="line">                AFTER 字段名				 <span class="comment">-- 在xx之后增加字段</span></span><br><span class="line">                <span class="keyword">FIRST</span>				  	   <span class="comment">-- 增加在第一个位置</span></span><br><span class="line">            <span class="comment">-- 例：ALTER TABLE `user` ADD score INT(8);  给user表添加一个score字段</span></span><br><span class="line">            <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY			   	    <span class="comment">-- 创建主键</span></span><br><span class="line">            <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> [索引名] (字段名)      <span class="comment">-- 创建唯一索引</span></span><br><span class="line">            <span class="keyword">ADD</span> INDEX [索引名] (字段名)        <span class="comment">-- 创建普通索引</span></span><br><span class="line">            <span class="keyword">DROP</span>[ <span class="keyword">COLUMN</span>] 字段名              <span class="comment">-- 删除字段</span></span><br><span class="line">            MODIFY[ <span class="keyword">COLUMN</span>] 字段名 字段属性     <span class="comment">-- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)</span></span><br><span class="line">            CHANGE[ <span class="keyword">COLUMN</span>] 原字段名 新字段名 字段属性      <span class="comment">-- 支持对字段名修改</span></span><br><span class="line">            <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY     <span class="comment">-- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)</span></span><br><span class="line">            <span class="keyword">DROP</span> INDEX 索引名     <span class="comment">-- 删除索引</span></span><br><span class="line">            <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键    <span class="comment">-- 删除外键</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">TABLE</span>[ IF <span class="keyword">EXISTS</span>] 表名 ...</span><br><span class="line"><span class="comment">-- 清空表数据</span></span><br><span class="line">    <span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] 表名</span><br><span class="line"><span class="comment">-- 复制表结构</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">LIKE</span> 要复制的表名</span><br><span class="line"><span class="comment">-- 复制表结构和数据</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 [<span class="keyword">AS</span>] <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 要复制的表名</span><br><span class="line"><span class="comment">-- 检查表是否有错误</span></span><br><span class="line">    <span class="keyword">CHECK</span> <span class="keyword">TABLE</span> tbl_name [, tbl_name] ... [option] ...</span><br><span class="line"><span class="comment">-- 优化表</span></span><br><span class="line">    OPTIMIZE [<span class="keyword">LOCAL</span> <span class="operator">|</span> NO_WRITE_TO_BINLOG] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ...</span><br><span class="line"><span class="comment">-- 修复表</span></span><br><span class="line">    REPAIR [<span class="keyword">LOCAL</span> <span class="operator">|</span> NO_WRITE_TO_BINLOG] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]</span><br><span class="line"><span class="comment">-- 分析表</span></span><br><span class="line">    ANALYZE [<span class="keyword">LOCAL</span> <span class="operator">|</span> NO_WRITE_TO_BINLOG] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure>
<h3 id="四-数据操作">四、数据操作</h3>
<ol>
<li><span style="color:red">注意</span>：删改操作一定要加条件，否则就是删改整张表(准备跑路)</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 增</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 [(字段列表)] <span class="keyword">VALUES</span> (值列表)[,(值列表),,,]</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">SET</span> 字段名<span class="operator">=</span>值[,字段名<span class="operator">=</span>值,,,]   <span class="comment">-- 推荐上面</span></span><br><span class="line"><span class="comment">-- 删</span></span><br><span class="line">    <span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [删除条件的句子]</span><br><span class="line">    <span class="comment">-- 没有条件默认删除全部</span></span><br><span class="line"><span class="comment">-- 改</span></span><br><span class="line">    <span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="operator">=</span>新值[,字段名<span class="operator">=</span>新值,,,] [更新条件]</span><br><span class="line">    <span class="comment">-- 没有条件默认更改全部</span></span><br><span class="line"><span class="comment">-- 查</span></span><br><span class="line">    <span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 [查询条件]</span><br></pre></td></tr></table></figure>
<h3 id="六-select">六、SELECT</h3>
<ol>
<li>select：创建一张临时的表，来存储查询到的数据</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>] select_expr <span class="keyword">FROM</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> [合计函数] <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">HAVING</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">-</span><span class="operator">&gt;</span> LIMIT</span><br><span class="line">    <span class="comment">-- 字段释义：</span></span><br><span class="line">        <span class="keyword">ALL</span>:展示查询到的所有数据，和不写效果一样</span><br><span class="line">        <span class="keyword">DISTINCT</span>:查询去重后的结果</span><br><span class="line">            <span class="comment">-- 注：SELECT DISTINCT * from 表名;    测试不起效果</span></span><br><span class="line">            <span class="comment">-- SELECT DISTINCT 字段名 FROM 表名	  创建一张只有某字段去重后的临时表(同样设置多个字段失效)</span></span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段名[<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]：将查询到的结果分组(实际效果相当于根据字段名去重后展示(抛弃重复字段后面的))</span><br><span class="line">		         配合某些例如<span class="built_in">count</span>()、<span class="built_in">avg</span>(字段名)可以达到分组展示的效果; [升序<span class="operator">|</span>降序]</span><br><span class="line">         <span class="keyword">HAVING</span>：对 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 后的表再进行过滤</span><br><span class="line">         <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段名; 排序，只会根据字段名排序，不会去掉重复数据</span><br><span class="line">         LIMIT a,b：分页查询，a:起始行数(从<span class="number">0</span>开始计数)，分页查询页数 </span><br><span class="line">             <span class="comment">-- select * from user limit 1,3;   分页：从第2行开始，一次查询3个；</span></span><br><span class="line">			</span><br><span class="line">a. select_expr：</span><br><span class="line">    <span class="comment">-- 可以用*表示所有字段</span></span><br><span class="line">        <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line">    <span class="comment">-- 可以使用表达式（计算公式、函数调用、字段也是个表达式） </span></span><br><span class="line">    <span class="comment">-- 备注：select就是创建一张临时的表，如果直接给数据(如下列的计算公式，函数调用now()等不从表中查的会直接创建到临时表中)</span></span><br><span class="line">        <span class="keyword">select</span> name, <span class="number">29</span><span class="operator">+</span><span class="number">25</span>, now() <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line">    <span class="comment">-- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。</span></span><br><span class="line">        <span class="operator">-</span> 使用 <span class="keyword">as</span> 关键字，也可省略 as.</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">user</span><span class="operator">+</span><span class="number">10</span> <span class="keyword">as</span> add10 <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"> </span><br><span class="line">b. <span class="keyword">FROM</span> 子句</span><br><span class="line">    用于标识查询来源。</span><br><span class="line">    <span class="comment">-- 可以为表起别名。使用as关键字。</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb1 <span class="keyword">AS</span> tt, tb2 <span class="keyword">AS</span> bb;</span><br><span class="line">    <span class="comment">-- from子句后，可以同时出现多个表。</span></span><br><span class="line">        <span class="comment">-- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb1, tb2;</span><br><span class="line">    <span class="comment">-- 向优化符提示如何选择索引</span></span><br><span class="line">        USE INDEX、IGNORE INDEX、FORCE INDEX :使用指定的索引，忽略一个或多个索引，强制使用指定索引</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 USE INDEX (key1,key2) <span class="keyword">WHERE</span> key1<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> key2<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> key3<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 IGNORE INDEX (key3) <span class="keyword">WHERE</span> key1<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> key2<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> key3<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">c. <span class="keyword">WHERE</span> 子句</span><br><span class="line">    <span class="comment">-- 从from获得的数据源中进行筛选。</span></span><br><span class="line">    <span class="comment">-- 整型1表示真，0表示假。</span></span><br><span class="line">    <span class="comment">-- 表达式由运算符和运算数组成。</span></span><br><span class="line">        <span class="comment">-- 运算数：变量（字段）、值、函数返回值</span></span><br><span class="line">        <span class="comment">-- 运算符：</span></span><br><span class="line">            <span class="operator">=</span>, <span class="operator">&lt;=&gt;</span>,(等于);   <span class="operator">!=</span>, <span class="operator">&lt;&gt;</span>,(不等于，)    </span><br><span class="line">            	<span class="comment">-- 两靠近括号的后者，如果为true，结果为1，否则为0(可以判断是否位null的情况，建议使用is null来进行判断)</span></span><br><span class="line">            <span class="operator">&lt;=</span>,<span class="operator">&lt;</span>, <span class="operator">&gt;=</span>, <span class="operator">&gt;</span>,  <span class="operator">!</span>,(取符号相反)    <span class="operator">&amp;&amp;</span>,(同<span class="keyword">and</span>，但是用于逻辑判断) <span class="operator">||</span>,</span><br><span class="line">            (<span class="keyword">not</span>)<span class="keyword">in</span>,</span><br><span class="line">            	<span class="comment">-- (不)在集合中，例：select * from user where name in(&quot;张三&quot;,&quot;王五&quot;);查询(除)张三王五</span></span><br><span class="line">            (<span class="keyword">not</span>) <span class="keyword">like</span>,</span><br><span class="line">            	<span class="comment">-- (不)匹配的模糊查询，模糊查询使用%占多位符，_占一位符</span></span><br><span class="line">            (<span class="keyword">not</span>) <span class="keyword">between</span> <span class="keyword">and</span>, </span><br><span class="line">            	<span class="comment">-- 在A和B之间的数据</span></span><br><span class="line">            <span class="keyword">is</span> (<span class="keyword">not</span>),</span><br><span class="line">            	<span class="comment">-- 一般和null一起使用，用于判断是否位null</span></span><br><span class="line">            <span class="keyword">and</span>, <span class="keyword">or</span>, <span class="keyword">not</span>, </span><br><span class="line">            xor	</span><br><span class="line">            	<span class="comment">-- 逻辑异或，如果有null则为null，如果相同为0，不相同为1(一般不用)</span></span><br><span class="line">            <span class="keyword">is</span><span class="operator">/</span><span class="keyword">is</span> <span class="keyword">not</span> 加上ture<span class="operator">/</span><span class="literal">false</span><span class="operator">/</span><span class="literal">unknown</span>，检验某个值的真假</span><br><span class="line">            <span class="operator">&lt;=&gt;</span>与<span class="operator">&lt;&gt;</span>功能相同，<span class="operator">&lt;=&gt;</span>可用于<span class="keyword">null</span>比较</span><br><span class="line">            </span><br><span class="line">d. <span class="keyword">GROUP</span> <span class="keyword">BY</span> 子句, 分组子句</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段<span class="operator">/</span>别名 [排序方式]</span><br><span class="line">    分组后会进行排序。升序：<span class="keyword">ASC</span>，降序：<span class="keyword">DESC</span></span><br><span class="line">    以下[合计函数]需配合 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 使用：</span><br><span class="line">        count 返回不同的非<span class="keyword">NULL</span>值数目  <span class="built_in">count</span>(<span class="operator">*</span>)、<span class="built_in">count</span>(字段)</span><br><span class="line">            <span class="comment">-- 例：select name,count(*) from user group by name;  根据姓名分组查询总数</span></span><br><span class="line">        sum 求和</span><br><span class="line">            <span class="comment">-- 例：select age, sum(money) from user group by age; 根据年龄分组，计算每个年龄的总金钱</span></span><br><span class="line">        max 求最大值</span><br><span class="line">        min 求最小值</span><br><span class="line">        avg 求平均值</span><br><span class="line">        group_concat 返回带有来自一个组的连接的非<span class="keyword">NULL</span>值的字符串结果。组内字符串连接。(例如一个id对应多个分数，根据id分组后，所有分数显示拼接在一个表格中，默认用逗号拼接)(将多个数据以拼接的方式放入同一组)</span><br><span class="line">            <span class="comment">-- 例：SELECT name,GROUP_CONCAT( [DISTINCT] score) from user group by name;</span></span><br><span class="line">            <span class="comment">-- 解释：查询姓名，该姓名的所有 [去重] 分数(在同一个格子里显示默认逗号分割)，以姓名分组</span></span><br><span class="line">            <span class="comment">-- 例：SELECT name,GROUP_CONCAT(score ORDER BY score DESC   SEPARATOR &#x27;;&#x27;) FROM user GROUP BY `name`;</span></span><br><span class="line">            <span class="comment">-- 解释：查询姓名，该姓名的所有分数,同时指定分数排序方式(在同一个格子里显示)，指定以&#x27;;&#x27;分割，以姓名分组</span></span><br><span class="line"></span><br><span class="line">e. <span class="keyword">HAVING</span> 子句，条件子句(概括：<span class="keyword">having</span>可以接聚合函数，用于groupby 后；<span class="keyword">where</span>只能接数据库存在的值，一般用<span class="keyword">where</span>)</span><br><span class="line">    与 <span class="keyword">where</span> 功能、用法相同，执行时机不同。</span><br><span class="line">    <span class="keyword">where</span> 在开始时执行检测数据，对原数据进行过滤。</span><br><span class="line">    <span class="keyword">having</span> 对筛选出的结果再次进行过滤。</span><br><span class="line">    <span class="keyword">having</span> 字段必须是查询出来的，<span class="keyword">where</span> 字段必须是数据表存在的。</span><br><span class="line">    <span class="keyword">where</span> 不可以使用字段的别名，<span class="keyword">having</span> 可以。因为执行<span class="keyword">WHERE</span>代码时，可能尚未确定列值。</span><br><span class="line">    <span class="keyword">where</span> 不可以使用合计函数。一般需用合计函数才会用 <span class="keyword">having</span></span><br><span class="line">    <span class="keyword">SQL</span>标准要求<span class="keyword">HAVING</span>必须引用<span class="keyword">GROUP</span> <span class="keyword">BY</span>子句中的列或用于合计函数中的列。</span><br><span class="line">        <span class="comment">-- 例：SELECT `name`,sum(money) FROM user GROUP BY `name` HAVING sum(money)&gt;2000;</span></span><br><span class="line">        <span class="comment">-- 解释：查询姓名，总钱 通过姓名分组，并且分组之后总金额大于2000的</span></span><br><span class="line"></span><br><span class="line">f. <span class="keyword">ORDER</span> <span class="keyword">BY</span> 子句，排序子句</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> 排序字段<span class="operator">/</span>别名 排序方式 [,排序字段<span class="operator">/</span>别名 排序方式]...</span><br><span class="line">        升序：<span class="keyword">ASC</span>，降序：<span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line">g. LIMIT 子句，限制结果数量子句(即分页查询)</span><br><span class="line">    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从<span class="number">0</span>开始。</span><br><span class="line">    limit 起始位置, 获取条数(第一行索引为<span class="number">0</span>)</span><br><span class="line">        省略第一个参数，表示从索引<span class="number">0</span>开始。limit 获取条数</span><br><span class="line">            <span class="comment">-- 例：SELECT * FROM user LIMIT 0,3; </span></span><br><span class="line">            <span class="comment">-- 解释：从索引0(第一个)开始，总共查3个</span></span><br><span class="line">h. <span class="keyword">DISTINCT</span>, <span class="keyword">ALL</span> 选项</span><br><span class="line">    <span class="keyword">distinct</span> 去除重复记录</span><br><span class="line">        默认为 <span class="keyword">all</span>, 全部记录</span><br></pre></td></tr></table></figure>
<h3 id="七-union-注意与join区别">七、UNION(注意与join区别)</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* UNION */</span> <span class="comment">------------------</span></span><br><span class="line">    将多个<span class="keyword">select</span>查询的结果组合成一个结果集合。(两张表的两个列合并为同一个列)</span><br><span class="line">    <span class="keyword">SELECT</span> ... <span class="keyword">UNION</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>] <span class="keyword">SELECT</span> ...</span><br><span class="line">        默认 <span class="keyword">DISTINCT</span> 方式，即所有返回的行都是唯一的(去重)</span><br><span class="line">        <span class="comment">-- UNION 语句：用于将 不同表 中相同列中查询的数据展示出来；（不包括重复数据）</span></span><br><span class="line">        <span class="comment">-- UNION ALL 语句：用于将 不同表 中相同列中查询的数据展示出来；（包括重复数据）</span></span><br><span class="line">            <span class="comment">-- 例：SELECT name FROM user UNION ALL (SELECT username FROM t_user);</span></span><br><span class="line">            <span class="comment">-- 解释：两张表的name列与username列放到临时表的名为name(名字以前面的为准)的列中</span></span><br><span class="line">         每个<span class="keyword">select</span>查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条<span class="keyword">select</span>语句为准。</span><br></pre></td></tr></table></figure>
<h3 id="八-子查询">八、子查询</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 子查询需要用括号包括</span></span><br><span class="line"><span class="comment">-- from型</span></span><br><span class="line">    <span class="keyword">from</span>后要求是一张表或是子查询产生的临时表，</span><br><span class="line">        <span class="operator">-</span> 如果是生成的临时表，则必须给子查询产生的临时表取别名</span><br><span class="line">        <span class="comment">-- 例：select * from (select * from user where id&gt;1) as another_table where id&gt;2;</span></span><br><span class="line">        <span class="comment">-- 解释：user表中id&gt;1的组成一张临时表，取别名another_table，再查询这张临时表中id&gt;2的。</span></span><br><span class="line">			</span><br><span class="line"><span class="comment">-- where型</span></span><br><span class="line">    <span class="operator">-</span> <span class="keyword">where</span>后的子查询一个或多个值</span><br><span class="line">    <span class="operator">-</span> 可以不用给子查询起别名</span><br><span class="line">    <span class="operator">-</span> <span class="keyword">where</span>子查询的表不能用于更新删除</span><br><span class="line">        <span class="comment">-- 例：SELECT * FROM user WHERE money = (SELECT max(money) FROM `user`);</span></span><br><span class="line">        <span class="comment">-- 解释： 查询金额最多用户的所有信息</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">-- 列子查询</span></span><br><span class="line">            字查询的结果是一列</span><br><span class="line">            使用<span class="keyword">in</span>或<span class="keyword">not</span> <span class="keyword">in</span>完成查询</span><br><span class="line">                 <span class="comment">-- 例：SELECT * FROM user WHERE name in (SELECT `username` FROM t_user);</span></span><br><span class="line">                 <span class="comment">-- 解释：查询名字在t_user表中的人的信息</span></span><br><span class="line">             或使用<span class="keyword">exists</span> 和 <span class="keyword">not</span> <span class="keyword">exists</span> 条件，返回<span class="number">1</span>或<span class="number">0</span>。常用于判断条件。</span><br><span class="line">                 <span class="comment">-- 例：SELECT * FROM user WHERE EXISTS (SELECT * FROM t_user WHERE id&gt;3);</span></span><br><span class="line">                 <span class="comment">-- 解释：子查询：如果id&gt;3的查询结果有值，则EXISTS返回1(true),相当于只有主查询</span></span><br><span class="line">	    <span class="comment">-- 行子查询</span></span><br><span class="line">            子查询的的条件(结果)是一个行</span><br><span class="line">            <span class="comment">-- 例：select * from user where (name, age) in (select name, age from t_user);</span></span><br><span class="line">            <span class="comment">-- 解释：子查询的结果要匹配的条件有两个(name,age),一行</span></span><br><span class="line">        <span class="comment">-- 特殊运算符</span></span><br><span class="line">        <span class="operator">!=</span> <span class="keyword">all</span>()    相当于 <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">        <span class="operator">=</span> <span class="keyword">some</span>()    相当于 <span class="keyword">in</span>。<span class="keyword">any</span> 是 <span class="keyword">some</span> 的别名</span><br><span class="line">        <span class="operator">!=</span> <span class="keyword">some</span>()   不等同于 <span class="keyword">not</span> <span class="keyword">in</span>，不等于其中某一个</span><br><span class="line">        <span class="keyword">all</span>, <span class="keyword">some</span> 可以配合其他运算符一起使用。</span><br></pre></td></tr></table></figure>
<h3 id="九-连接查询-join">九、连接查询(join)</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将多个表的字段拼接成一张表</span></span><br><span class="line"><span class="comment">-- 内连接(inner join)</span></span><br><span class="line">    <span class="operator">-</span> 内连接只展示所有<span class="keyword">on</span>后面条件成立的列，不以哪一张表为准</span><br><span class="line">    <span class="operator">-</span> 默认即是内连接，可以省略<span class="keyword">inner</span>。</span><br><span class="line">    <span class="operator">-</span> 只有数据存在时才能发送连接。即连接结果不能出现空行。</span><br><span class="line">    <span class="keyword">on</span> 表示连接条件。其条件表达式与<span class="keyword">where</span>类似。也可以省略条件（表示条件永远为真）</span><br><span class="line">    <span class="keyword">where</span> 也可用<span class="keyword">where</span>表示连接条件。</span><br><span class="line">    还有 <span class="keyword">using</span>, 但需字段名相同。 <span class="keyword">using</span>(字段名)</span><br><span class="line">        <span class="comment">-- 例：SELECT * FROM user JOIN t_user on user.`name`=t_user.username;</span></span><br><span class="line">        <span class="comment">-- 解释：将user、t_user中name与username相同的列拼接到一张临时表(不以其中一张表为准)，不同的列都不展示</span></span><br><span class="line">    <span class="comment">-- 交叉连接 cross join</span></span><br><span class="line">        即，没有条件的内连接。</span><br><span class="line">        <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb1 <span class="keyword">cross</span> <span class="keyword">join</span> tb2</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 外连接(outer join)</span></span><br><span class="line">    <span class="operator">-</span> 如果数据不存在，也会出现在结果中</span><br><span class="line">    <span class="comment">-- 左外连接 left join</span></span><br><span class="line">        以左边的表为准，左边的表的数据全部展示，如果右边表的数据如果不存在，用<span class="keyword">null</span>填充。</span><br><span class="line">            <span class="comment">-- 例：SELECT * FROM user left JOIN t_user on user.`name`=t_user.username;</span></span><br><span class="line">            <span class="comment">-- 解释：将左表user的数据全部展示，右表t_user中name与username相等的列拼接展示，如果不等处的值填null。</span></span><br><span class="line">    <span class="comment">-- 右外连接 right join</span></span><br><span class="line">        以右边的表为准，右边的表的数据全部展示，如果左边表的数据如果不存在，用<span class="keyword">null</span>填充。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 自然连接(natural join)</span></span><br><span class="line">    自动判断连接条件完成连接。</span><br><span class="line">    相当于省略了<span class="keyword">using</span>，会自动查找相同字段名。</span><br><span class="line">    <span class="keyword">natural</span> <span class="keyword">join</span></span><br><span class="line">    <span class="keyword">natural</span> <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">    <span class="keyword">natural</span> <span class="keyword">right</span> <span class="keyword">join</span></span><br><span class="line"><span class="keyword">select</span> info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex <span class="keyword">from</span> info, extra_info <span class="keyword">where</span> info.stu_num <span class="operator">=</span> extra_info.stu_id;</span><br></pre></td></tr></table></figure>
<h3 id="十-truncate">十、TRUNCATE</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* TRUNCATE */</span> <span class="comment">------------------</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] tbl_name</span><br><span class="line">    <span class="comment">-- 例：TRUNCATE TABLE test ;</span></span><br><span class="line">    <span class="comment">-- 解释：删除test表中的所有数据(但保留表结构)，类似如下两个步骤</span></span><br><span class="line">a.清空数据</span><br><span class="line">b.删除重建表</span><br><span class="line">区别：</span><br><span class="line"><span class="number">1</span>，<span class="keyword">truncate</span> 是删除表再创建，<span class="keyword">delete</span> 是逐条删除</span><br><span class="line"><span class="number">2</span>，<span class="keyword">truncate</span> 重置auto_increment的值。而<span class="keyword">delete</span>不会</span><br><span class="line"><span class="number">3</span>，<span class="keyword">truncate</span> 不知道删除了几条，而<span class="keyword">delete</span>知道。</span><br><span class="line"><span class="number">4</span>，当被用于带分区的表时，<span class="keyword">truncate</span> 会保留分区</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Cloud-alibaba配置笔记</title>
    <url>/2022/06/18/Spring-Cloud-alibaba%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>spring-cloud-alibaba配置笔记</p>
<span id="more"></span>
<h2 id="管理依赖">管理依赖</h2>
<p>在common微服务单独添加如下依赖，该依赖会SpringCloud-alibaba的所有组件进行依赖管理。然后所有微服务必须引入common依赖，<br>
注意：common创建是使用idea自带的maven脚手架创建，而不是springBoot，所以没有启动类</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Common服务</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.project<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>每一个微服务公共的依赖，bean，工具类等<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpcore<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--tomcat存在打包的時候不需要--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 由于每一个微服务都需要配置中心，所以写这里，版本由下面的dependencyManagement管理 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用openfeign的负载均衡，需要排除这个自带的负载均衡 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 由于每一个服务都需要使用配置中心，所以写这里，版本由dependencyManagement管理 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- springBoot的2.4即以上版本需要添加，之后再使用 bootstrap.properties 配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Bean 校验注解 ，高版本要用starter的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 依赖管理，上面的部分依赖版本由下面的管理，spring-cloud-alibaba的注册中心、配置中心，管理依赖版本，注意下面的pom示例是spring-cluod--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>某单独微服务的pom参考</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.project<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microServe1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>microServe1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>微服务1<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定spring-cloud的依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.project<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">&lt;!-- 阿里云OSS服务单独抽出到第三方微服务后，不再需要，并且使用的是spring-cloud-starter-alicloud-oss的依赖 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;3.10.2&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- spring-cloud的依赖管理，上面没有配置版本的都由此管理版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 管理spring-cloud的依赖 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h2 id="nacos注册中心">Nacos注册中心</h2>
<h3 id="1-依赖引入-只common">1. 依赖引入(只common)</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 由于每一个微服务都需要配置中心，所以写common，版本由上面说的dependencyManagement管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 排除ribbon，因为feign不再使用ribbon，而是使用lodblance-starter, 因为feign是单独引用，所以建议lodblance-starter和feign单独引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-启用服务服务发现">2. 启用服务服务发现</h3>
<p>添加<code>@EnableDiscoveryClient</code>注解，添加完后应该如下，所有微服务需要注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">microServer1Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(microServer1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-配置文件nacos相关-yml">3. 配置文件nacos相关(yml)</h3>
<p>也可以后续用写入<code>bootstrap.yml</code>中，参考Naocs配置中心章节</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">microServer1</span></span><br></pre></td></tr></table></figure>
<h3 id="4-启动nacos">4. 启动nacos</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure>
<h2 id="feign">Feign</h2>
<p>申明式的远程调用http客户端（现在已经支持RPC调用了）</p>
<h3 id="1-依赖引入-所有需要使用feign的微服务-除common">1. 依赖引入(所有需要使用Feign的微服务，除common)</h3>
<p>注意：在使用idea的springBoot脚手架创建每个微服务时，我们已经选择fegin的初始化创建(同时也选择了web-starter)。所以不再需要引入依赖。</p>
<p>但是，在新版OpenFign使用了RPC的远程调用，需要同时加入一个新的依赖，加完后这两个依赖如下。（版本已经交给<code>dependencyManagement</code>管理，所以不再需要配置版本）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 新版本cloud-open-feign不再使用ribbon做负载均衡，而是使用spring-cloud-starter-loadbalancer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-申明feign创建调用">2. 申明feign创建调用</h3>
<p>在Application启动类同级目录下创建feign文件夹，后面的的远程调用写在此文件夹中，方便管理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注解`<span class="doctag">@FeignClient</span>(&quot;microServer2&quot;)`申明为fegin客户端,要远程调用 microServer2 的服务</span></span><br><span class="line"><span class="comment"> * 调用过程，首先去注册中心nacos找到 microServer2 服务，然后再根具下面的具体路径地址调用其服务</span></span><br><span class="line"><span class="comment"> * microServer2 是被调用的微服务的注册在nacos的名称 (spring.application.name 的值)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 要调用的直接调用自己包下的 exampleFeignService </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;microServer2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">exampleFeignService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从远程接口复制过来的方法(被调用的方法)</span></span><br><span class="line"><span class="comment">     * 同时远程的接口的地址也写全</span></span><br><span class="line"><span class="comment">     * SpuBoundDto 不必与远程接口是同一个实体类，只要通过json能完全转过去</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;example/example/example/list&quot;)</span> <span class="comment">// 远程接口的地址，从controller上开始</span></span><br><span class="line">    R <span class="title function_">saveSpuBonds</span><span class="params">(<span class="meta">@RequestBody</span> SpuBoundDto spuBoundDto)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-申明启用feign调用">3. 申明启用feign调用</h3>
<p>开启feign的注解, 指定feign要扫描的指定地址下的所有接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 想要远程调用，需要开启服务发现</span></span><br><span class="line"><span class="comment"> *  1） 引入依赖：open-feign</span></span><br><span class="line"><span class="comment"> *  2) 编写一个接口，告诉springCloud这个接口需要调用远程服务</span></span><br><span class="line"><span class="comment"> *      （创建feign文件夹，创建接口，申明feign客户端，调用，详细见feign注释）</span></span><br><span class="line"><span class="comment"> *      1. 申明接口的每一个方法都是调用的哪一个远程服务</span></span><br><span class="line"><span class="comment"> *  3） 开启feign的注解, 并指定feign要扫描的指定地址下的所有接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.example.example.example.fegin&quot;)</span> <span class="comment">// 启用feign并说明feign在那个包</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerMemberApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ServerMemberApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nacos配置中心">Nacos配置中心</h2>
<h3 id="1-依赖引入-只common">1. 依赖引入（只common）</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- springBoot的2.4即以上版本需要添加，之后再使用 bootstrap.properties 配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-配置文件">2. 配置文件</h3>
<p>resources目录下辖创建<code>bootstrap.properties</code>文件，该文件会先于<code>application.properties</code>文件加载。必须要先于加载，加载后去配置中心读取配置文件。如下配置文件皆是修改bootstrap文件。如果只看结果，翻到最后一点即可。</p>
<p>读取流程：</p>
<ol>
<li>先通过配置地址server-addr查找到nacos，</li>
<li>再通过命名空间，查找到uuid为‘361a2167-5594-4440-ac8e-ea927be56c67’的命名空间（如无则为public）</li>
<li>再查找组名。（如无则为DEFAULT_GROUP）</li>
<li>再查找应用名<code>server1</code>。找到<code>server1.后缀</code>的作为配置文件。</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">server1 # 模块名称（每个微服务的第一个文件夹名，建议和artifactId保持一致）</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment"># 要先创建命名空间，才能有uuid，才能设置。</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">361a2167-5594-4440-ac8e-ea927be56c67 # 指定要使用的命名空间的配置uuid</span></span><br><span class="line"><span class="comment"># 如果配置中心使用的配置文件是yaml，需要指定，否则默认为server1.properties（分组拆分的时候已经指明文件为xxx.yaml时可以不用）</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.file-extension</span>=<span class="string">yaml</span></span><br><span class="line"><span class="comment"># 要先创建组名，才有，可以先不管，后面有说明</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.group</span>=<span class="string">events # 指定组名为events</span></span><br></pre></td></tr></table></figure>
<h3 id="nacos网页配置列表添加">Nacos网页配置列表添加</h3>
<p>打开左侧<code>配置管理/配置列表</code>，点击加号，Data ID是应用名称，就是上面一点配置文件中的<code>spring.application.name=microServer</code>的microServer，一般取名为微分服务的最外层文件夹名。例如：·/father/example/src/main…·，其中father为聚合服务，example为微服务应用名。<img src="/2022/06/18/Spring-Cloud-alibaba%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/image-20220603232925834-16555631121241.png" alt="添加配置实现热更新"></p>
<h3 id="引入配置参数类加注解">引入配置参数类加注解</h3>
<p>引用了application.properties的文件，需要加上注解<code>@RefreshScope</code>，才能实时更新，动态获取配置值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">// 用于实时从Nacos的配置中心获取参数</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;server1/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 引用配置中心的参数</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">	<span class="comment">// 引用配置中心的参数</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果配置中心和配置文件都使用了相同的配置项，优先使用配置中心的配置。</p>
<h3 id="3-以开发测试生产命名空间-不太推荐">3. 以开发测试生产命名空间(不太推荐)</h3>
<p>命名空间主要是用来区分，开发、测试、生产的环境的配置文件。默认有一个public，利用命名空间做环境隔离，需要在bootstrap.properties配置上，需要使用哪一个命名空间下的配置文件。</p>
<p>如果微服务众多，可以每一个微服务都创建自己的命名空间。只加载自己命名空间下的所有配置。</p>
<p><img src="/2022/06/18/Spring-Cloud-alibaba%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/image-20220604105154618-16555631121252.png" alt="Nacos命名空间"></p>
<p>创建完成后，配置列表会多如下的可选择项。</p>
<p><img src="/2022/06/18/Spring-Cloud-alibaba%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/image-20220604105405954-16555631121253.png" alt="Nacos配置列表选择项"></p>
<p>然后根据需要，在配置文件中指定要使用的命名空间的uuid。</p>
<p><img src="/2022/06/18/Spring-Cloud-alibaba%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/image-20220604110442433-16555631121254.png" alt="选择命名空间"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">microServer # 应用名称</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">5fb79757-32f8-49d1-a94d-8a198f602d52 # 指定要使用的命名空间的配置uuid</span></span><br></pre></td></tr></table></figure>
<h3 id="4-以每个微服务作为命名空间">4. 以每个微服务作为命名空间</h3>
<p>配置列表中，选择克隆，可以从其他命名空间复制配置文件。</p>
<p><img src="/2022/06/18/Spring-Cloud-alibaba%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/image-20220604111125500-16555631121256.png" alt="微服务作为命名空间"></p>
<h3 id="5-配置分组">5. 配置分组</h3>
<p>图中同一命名空间下有相同的Data_ID的。但是分组不同，可于配置文件中配置分组。</p>
<p><img src="/2022/06/18/Spring-Cloud-alibaba%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/image-20220604112235042-16555631121255.png" alt="配置分组"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">server1</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">5fb79757-32f8-49d1-a94d-8a198f602d52 # 指定命名空间</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.group</span>=<span class="string">events # 指定组名为events</span></span><br></pre></td></tr></table></figure>
<h3 id="6-通过分组隔离环境">6. 通过分组隔离环境</h3>
<p>分dev组和prod组</p>
<p><img src="/2022/06/18/Spring-Cloud-alibaba%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/image-20220604113850760-16555631121257.png" alt="分组隔离环境"></p>
<h3 id="7-使用配置集">7. 使用配置集</h3>
<p>yaml中的配置可以进一步的拆分，如下将原本的配置application.yml配置文件拆分成datasource、mybatis、other模块。在配置集中没有的参数，会去指定的空间与组名中尝试去查找。</p>
<p><img src="/2022/06/18/Spring-Cloud-alibaba%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/image-20220604142556772-16555631121258.png" alt="配置集的使用"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">server1</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment"># 指定命名空间，</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">5fb79757-32f8-49d1-a94d-8a198f602d52</span></span><br><span class="line"><span class="comment"># 指定组名为dev，当在下列配置集中找不到的时候，会尝试来此组中查找</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.group</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 使用配置集，是个集合。此配置有三个组成，这里已经指定为配置名.yaml，所以不再需要配置文件类型为yaml</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].data-id</span>=<span class="string">datasource.yaml # Data_ID</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].group</span>=<span class="string">dev # 组名</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].refresh</span>=<span class="string">true # 动态更新</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[1].data-id</span>=<span class="string">mybatis.yaml</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[1].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[1].refresh</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[2].data-id</span>=<span class="string">other.yaml</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[2].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[2].refresh</span>=<span class="string">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="gateway网关">Gateway网关</h2>
<p>gateway用来做网关。使用idea的spring脚手架初始化项目，</p>
<h3 id="1-依赖引入">1. 依赖引入</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入common工程依赖，因为该微服务也需要使用Nacos --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加gateway依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加 loadbalancer依赖解决gateway路径重写503问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 上面的版本由cloud控制，cloud版本由cloud.version控制--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>bootstrap.properties 添加配置</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">microServer2-gatewa</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848 # 配置中心Nacos地址</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">d6d7433c-c339-4381-9138-661749338b2a</span></span><br></pre></td></tr></table></figure>
<p><code>application.properties </code>添加配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848	# 注册中心Nacos地址</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">microServer2-gateway	# 注册服务名</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">88 # gatewway的端口号</span></span><br></pre></td></tr></table></figure>
<h3 id="2-注解配置">2. 注解配置</h3>
<p>在启动类上添加启用Nacos注解，同时排除myabtis自动配置的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="comment">// 排除数据库自动配置</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerGatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ServerGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="nacos注册">Nacos注册</h3>
<p>在Nacos中给gateway创建命名空间。并创建Data_ID的yaml配置文件。同时创建<code>bootstrap.properties</code>文件。</p>
<p><img src="/2022/06/18/Spring-Cloud-alibaba%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/image-20220604153644447-16555631121259.png" alt="gateway的Nacos中的配置文件"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">microServer2</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">d6d7433c-c339-4381-9138-661749338b2a</span></span><br></pre></td></tr></table></figure>
<h3 id="路由规则">路由规则</h3>
<p>gate可以创建路由规则，在满足断言的情况下，可以路由到指定的地址，创建<code>application.yml</code>文件，创建如下路由规则。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      	<span class="comment"># `-`表示数组，可以平级配置多个</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">          	<span class="comment"># 查询参数包含url=baidu，则路由到上面的地址</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,baidu</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">qq_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.qq.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,qq</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://micro-serverName</span> <span class="comment"># Nacos上注册的服务名（要路由到哪个微服务）</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/product/**</span>   <span class="comment"># 断言该路径下的所有请求(写在前面的先断言，所以详细的路径应该写前面)</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="comment"># api下的所有请求， 把api前缀去掉，剩下的留着，再调用（调用上面指定的微服务的接口路径）</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/$\&#123;segment&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">admin_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://micro-serverName2</span> <span class="comment"># Nacos上注册的服务名（要路由到哪个微服务）</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/**</span> <span class="comment">#(宽泛的路径写后面)</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/?(?&lt;segment&gt;.*),</span> <span class="string">/renren-fast/$\&#123;segment&#125;</span></span><br><span class="line"><span class="comment">## 前端项目， 发送请求都带api前缀， 如下请求路径会被路由到后面的实际地址</span></span><br><span class="line"><span class="comment">## product: http://localhost:88/api/product/category/list/tree  http://localhost:10000/product/category/list/tree</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合ES-High-Level-Client</title>
    <url>/2023/04/17/SpringBoot%E6%95%B4%E5%90%88ES-High-Level-Client/</url>
    <content><![CDATA[<p>最近新出来了一个框架<a href="https://github.com/dromara/easy-es">GitHub - dromara/easy-es</a>，介绍说类似mybatis-plus写法写es，也许可以抽时间试试🤔。<br>
本笔记基于rest-high-level-client，但是在ES的7.15版本rest-high-level-client现在已经被标记为过时了。推荐使用spring-boot-starter-data-elasticsearch依赖。本篇可以仅作了解。<br>
出现了一个名称为<a href="https://www.easy-es.cn/">Easy-Es</a>的ORM框架，介绍说使用类似于mybatis-plus，底层使用RestHighLevelClient。</p>
<span id="more"></span>
<h2 id="1-建微服务">1.建微服务</h2>
<p>为ES单独建立一个微服务，模板建立的时候仅选择Spring-web依赖即可，我这里的spring-boot版本选择的2.6.8与其他微服务一致。</p>
<h2 id="2-引入依赖">2.引入依赖</h2>
<p>引入common微服务依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.mall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mall-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>引入es依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>指定ES版本，因为是SpringBoot项目，所以ES版本会被SpringBoot版本管理，需要手动改为与自己安装的ES版本一致。按图依次点击即可查看Spring-boot管理的版本：</p>
<p><img src="/2023/04/17/SpringBoot%E6%95%B4%E5%90%88ES-High-Level-Client/%E6%9F%A5%E7%9C%8BSpringBoot%E7%AE%A1%E7%90%86%E7%89%88%E6%9C%AC.webp" alt="查看SpringBoot管理版本"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定es版本为7.4.2，否则以spring-boot-starter-parent中为准，与自定义的冲突 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-启动报错">3.启动报错</h2>
<p>报错信息：Error creating bean with name ‘configurationPropertiesBeans’</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Caused by<span class="punctuation">:</span> org.springframework.beans.factory.BeanCreationException<span class="punctuation">:</span> Error creating bean with name &#x27;configurationPropertiesBeans&#x27; defined in class path resource <span class="punctuation">[</span>org/springframework/cloud/autoconfigure/ConfigurationPropertiesRebinderAutoConfiguration.class<span class="punctuation">]</span><span class="punctuation">:</span> Post-processing of merged bean definition failed; nested exception is java.lang.IllegalStateException<span class="punctuation">:</span> Failed to introspect Class <span class="punctuation">[</span>org.springframework.cloud.context.properties.ConfigurationPropertiesBeans<span class="punctuation">]</span> from ClassLoader <span class="punctuation">[</span>sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2<span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<p>报错原因：common中的alibaba-spring-cloud-nacos-discover，alibaba-spring-cloud-nacos-config两个依赖中的内部两个依赖：<code>spring-cloud-commons</code>、<code>spring-cloud-context</code>的版本，和spring-cloud-starter的内部两个依赖版本不同。<br>
其他依赖common的微服务没有问题，是因为又引入了loader-balance之类的，其内部也有这两个依赖，覆盖之后就没有问题了。<br>
所以我们手动引入这两个依赖，覆盖即可。引入依赖和spring-cloud-starter内部版本一致即可。</p>
<p><img src="/2023/04/17/SpringBoot%E6%95%B4%E5%90%88ES-High-Level-Client/common%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88%E6%9C%AC%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98.webp" alt="common微服务版本不一致问题"></p>
<p>手动覆盖版本，与spring-cloud-starter保持一致</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-commons --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-完整pom">4.完整pom</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.mall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mall-search<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>mall-search<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>mall检索服务<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 指定es版本为7.4.2，否则以spring-boot-starter-parent中为准，与自定义的冲突 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.mall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mall-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- common包中nacos下的cloud-context与cloud-commons 与 spring-cloud中的版本不一致，手动指定与spring一致的版本--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--其他服务不报错的原因是因为引入了loadbalancer 或者feign，这中的覆盖了 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-context --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-commons --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- es依赖 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-配置bootstrap文件">5.配置bootstrap文件</h2>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">mall-search</span></span><br></pre></td></tr></table></figure>
<h2 id="6-编写es配置文件">6.编写ES配置文件</h2>
<p>建立config包。于config包下创建ElasticSearchConfig类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * es配置类</span></span><br><span class="line"><span class="comment"> * 1. 导入依赖</span></span><br><span class="line"><span class="comment"> * 2. 编写配置，给容器注入一个RestHighLevelClient</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticSearchConfig</span> &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// ES通用配置，是公用的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestOptions COMMON_OPTIONS;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        RequestOptions.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> RequestOptions.DEFAULT.toBuilder();</span><br><span class="line">        COMMON_OPTIONS = builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 将ES实例注入到IOC容器，后续都注入此实例使用即可</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestHighLevelClient <span class="title function_">esRestClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-测试">7. 测试</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElaTests</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 存储测试用例</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@SneakyThrows</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">indexData</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="comment">// 获取users 索引（数据库）。如果没有会创建</span></span><br><span class="line">		<span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">         <span class="comment">// id为1</span></span><br><span class="line">		indexRequest.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">		<span class="comment">// indexRequest.source(&quot;userName&quot;, &quot;zhangsan&quot;, &quot;age&quot;, 18, &quot;gender&quot;, &quot;男&quot;);</span></span><br><span class="line">		<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>,  <span class="string">&quot;男&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">// 通过json存储 </span></span><br><span class="line">		<span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSONObject.toJSONString(user);</span><br><span class="line">		indexRequest.source(s, XContentType.JSON);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 执行操作</span></span><br><span class="line">		<span class="type">IndexResponse</span> <span class="variable">index</span> <span class="operator">=</span> client.index(indexRequest, ElasticSearchConfig.COMMON_OPTIONS);</span><br><span class="line">		System.out.println(index);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Data</span></span><br><span class="line">	<span class="meta">@AllArgsConstructor</span></span><br><span class="line">	<span class="meta">@NoArgsConstructor</span></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">		<span class="keyword">private</span> String userName;</span><br><span class="line">		<span class="keyword">private</span> String gender;</span><br><span class="line">		<span class="keyword">private</span> Integer age;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 查询</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@SneakyThrows</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">searchData</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 1.创建检索请求</span></span><br><span class="line">		<span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>();</span><br><span class="line">		<span class="comment">// 2.指定索引</span></span><br><span class="line">		searchRequest.indices(<span class="string">&quot;bank&quot;</span>);</span><br><span class="line">		<span class="comment">// 3.指定检索条件</span></span><br><span class="line">		<span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">		<span class="comment">// 3.1 构造条件，对应具体的es的json中的语句</span></span><br><span class="line">		<span class="comment">//sourceBuilder.query();</span></span><br><span class="line">		<span class="comment">//sourceBuilder.from()</span></span><br><span class="line">		<span class="comment">//sourceBuilder.size();</span></span><br><span class="line">		sourceBuilder.query(QueryBuilders.matchQuery(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;mill&quot;</span>));</span><br><span class="line">		<span class="comment">// 3.2按照年龄的值分布聚合</span></span><br><span class="line">		<span class="type">TermsAggregationBuilder</span> <span class="variable">ageAgg</span> <span class="operator">=</span> AggregationBuilders.terms(<span class="string">&quot;ageAgg&quot;</span>).field(<span class="string">&quot;age&quot;</span>).size(<span class="number">10</span>);</span><br><span class="line">		sourceBuilder.aggregation(ageAgg);</span><br><span class="line">		<span class="comment">// 3.3计算平均值</span></span><br><span class="line">		searchRequest.source(sourceBuilder);</span><br><span class="line">		<span class="type">AvgAggregationBuilder</span> <span class="variable">balanceAvg</span> <span class="operator">=</span> AggregationBuilders.avg(<span class="string">&quot;balanceAvg&quot;</span>).field(<span class="string">&quot;balance&quot;</span>);</span><br><span class="line">		sourceBuilder.aggregation(balanceAvg);</span><br><span class="line">		System.out.println(sourceBuilder.toString());</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 4.执行检索</span></span><br><span class="line">		<span class="type">SearchResponse</span> <span class="variable">search</span> <span class="operator">=</span> client.search(searchRequest, ElasticSearchConfig.COMMON_OPTIONS);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 5.分析结果</span></span><br><span class="line">		System.out.println(search.toString());</span><br><span class="line">		<span class="comment">// 5.1获取查到的数据</span></span><br><span class="line">		<span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> search.getHits();</span><br><span class="line">		SearchHit[] searchHits = hits.getHits();</span><br><span class="line">		<span class="keyword">for</span> (SearchHit hit : searchHits) &#123;</span><br><span class="line">			<span class="comment">// 命中的记录信息</span></span><br><span class="line">			<span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">			<span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> JSONObject.parseObject(sourceAsString, Account.class);</span><br><span class="line">			System.out.println(<span class="string">&quot;account: &quot;</span> + account);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 5.2获取检索的分析信息</span></span><br><span class="line">		<span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> search.getAggregations();</span><br><span class="line">		<span class="type">Terms</span> <span class="variable">ageAgg1</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;ageAgg&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (Terms.Bucket bucket : ageAgg1.getBuckets()) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;年龄：&quot;</span> + bucket.getKeyAsString() + <span class="string">&quot;  总数&quot;</span> + bucket.getDocCount());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="type">Avg</span> <span class="variable">balanceAvg1</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;balanceAvg&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;平均薪资：&quot;</span> + balanceAvg1.getValueAsString());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * （1）、冗余保存，方便检索</span></span><br><span class="line"><span class="comment">	 * &#123;</span></span><br><span class="line"><span class="comment">	 *     b:1</span></span><br><span class="line"><span class="comment">	 *     skuTittle:离散数学及其应用</span></span><br><span class="line"><span class="comment">	 *     price：128</span></span><br><span class="line"><span class="comment">	 *     saleCount:99</span></span><br><span class="line"><span class="comment">	 *     attrs:[</span></span><br><span class="line"><span class="comment">	 *     		&#123;页数：500页&#125;</span></span><br><span class="line"><span class="comment">	 *     		&#123;作者：肯尼斯.H.罗森&#125;</span></span><br><span class="line"><span class="comment">	 *     ]</span></span><br><span class="line"><span class="comment">	 * &#125;</span></span><br><span class="line"><span class="comment">	 * （2）：节省了空间，但是拿spu查询的时候，回携带非常多的spuId，消耗过多的请求带宽，网络阻塞IO</span></span><br><span class="line"><span class="comment">	 * sku索引 &#123;</span></span><br><span class="line"><span class="comment">	 *     bId:1</span></span><br><span class="line"><span class="comment">	 *     attrId:11</span></span><br><span class="line"><span class="comment">	 *     xxxx</span></span><br><span class="line"><span class="comment">	 * &#125;</span></span><br><span class="line"><span class="comment">	 * attr索引&#123;</span></span><br><span class="line"><span class="comment">	 *     attrId:11</span></span><br><span class="line"><span class="comment">	 *     attrs:[</span></span><br><span class="line"><span class="comment">	 *     		&#123;作者：肯尼斯.H.罗森&#125;</span></span><br><span class="line"><span class="comment">	 *     ]</span></span><br><span class="line"><span class="comment">	 * &#125;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(client);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue发送ajax请求</title>
    <url>/2021/01/06/Vue%E5%8F%91%E9%80%81ajax%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>Vue发送异步ajax的请求，可以使用axios来实现</p>
<span id="more"></span>
<h2 id="elementui与vue显示表格">ElementUI与Vue显示表格</h2>
<p>这里的表格摘自element官网，如下内容是直接写死在表格中的，未使用任何请求。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Table<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../plugins/elementui/index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../plugins/elementui/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- :data 双向绑定vue中的data的tableData，相当于v-for的会遍历集合(ElementUI底层封装了v-for)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lable：列名，prop：vue中名为data的实际的参数，下同--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Vue首字母大写</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">tableData</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">date</span>: <span class="string">&#x27;2016-05-04&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1517 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1519 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">date</span>: <span class="string">&#x27;2016-05-03&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1516 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//没有编译完的时候发送请求</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//编译完的时候发送请求</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//定义方法的地方</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="效果">效果</h2>
<img src="/2021/01/06/Vue%E5%8F%91%E9%80%81ajax%E8%AF%B7%E6%B1%82/01/06/Vue%E5%8F%91%E9%80%81ajax%E8%AF%B7%E6%B1%82/Vue-ElementUI-UnSend.png" class title="ElementUI未发送请求">
<h2 id="axios异步请求">axios异步请求</h2>
<p>Vue发送异步ajax的请求，这里可以使用axios来实现，如下是一个简单的使用的实例。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Table<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入ElementUI css样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../plugins/elementui/index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../plugins/elementui/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/axios-0.18.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- :data 双向绑定vue中的data的dataList，相当于v-for的会遍历集合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:dataList</span>=<span class="string">&quot;users&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lable：列名，prop：vue中名为data的实际的参数，下同--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Vue首字母大写</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        ECMAScript5的写法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        data:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">           user:[]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ECMAScript6的写法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 存放数据的地方</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;<span class="attr">users</span>:[]&#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//没有编译完的时候发送请求</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 查询所有</span></span></span><br><span class="line"><span class="language-javascript">            axios.<span class="title function_">get</span>(<span class="string">&#x27;/checkitem/findAll.do&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">flag</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 如果查询到(res.data.flag==true)，给dataList赋值</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//编译完的时候发送请求</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//定义方法的地方</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            html调用的方法，在方法中执行axios请求</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            add()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                axios.get().........</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            */</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>ajax</tag>
        <tag>ElementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>floyd判圈算法</title>
    <url>/2022/03/26/floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>floyd判圈算法（龟兔赛跑算法）简介</p>
<span id="more"></span>
<blockquote>
<p>floyd算法判断链表是否有环<br>
floyd算法计算环的长度<br>
floyd算法寻找环的起点</p>
</blockquote>
<p>  floyd算法主要基于两个快慢指针，一个慢指针slow，快指针fast。慢指针每次移动1，快指针每次移动2。算法的时间复杂度为O(N)</p>
<h2 id="1-判断是否有环">1 判断是否有环</h2>
<p>  慢指针每次移动一步，快指针每次移动两步，若fast指向的对象与slow指针指向同一个对象，则说明有环。<br>
证明：反证法:<br>
  如果没有环，则slow指针永远不可能追上fast指针，指向同一个对象。(此足以证明有环)</p>
<p>问题2：fast指针会越过slow指针不相遇吗？从而增加时间复杂度？<br>
  不可能。假设fast越过slow，则slow = k + 1， fast = k + 2, 从而错过，往前推一步可知，他们必定在k的位置相遇。</p>
<p><strong>时间复杂度</strong>：O(N)，在慢指针未走完一圈的时候，快慢指针必定能相遇。(如果无环，则O(N)不必证明)<br>
证明：</p>
<ol>
<li>快指针quick入环。之后，经过一段步骤，慢指针到达环的起点，准备入环。</li>
<li>此时，假设快指针距离慢指针x，如果在起点相遇，则x=0</li>
<li>设环的周长为L，那么之后就是快指针追赶慢指针，追赶距离为L-x</li>
<li>快指针的速度为每次2个距离，慢指针为每次一个距离，则快指针每次追赶2-1个距离，那么需要追赶(2-1) * (L-x) = L-x步。</li>
<li>在追赶L-x步的时间里，慢指针走了L-x的距离，由于x&gt;=0，所以在慢指针最多走完一圈(L)的距离时，必定已经相遇。</li>
</ol>
<p><a href="https://leetcode-cn.com/problems/happy-number/">202. 快乐数 - 力扣（LeetCode）</a>、(<a href="https://leetcode-cn.com/problems/find-the-duplicate-number/">287. 寻找重复数 - 力扣（LeetCode)</a>)<br>
  如果是快乐数，则最后会变为1，如果不是，则会进入几个数的循环。因此不为1时，判断是否有环即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slowNum</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">quickNum</span> <span class="operator">=</span> getNextValue(n);</span><br><span class="line">        <span class="comment">// 这里用quickNum != slowNum 作为出循环条件，无论是都为1，还是有环都可以跳出循环</span></span><br><span class="line">        <span class="keyword">while</span> (quickNum != slowNum) &#123;</span><br><span class="line">            slowNum = getNextValue(slowNum);</span><br><span class="line">            quickNum = getNextValue(getNextValue(quickNum));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> quickNum == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNextValue</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            res += (num % <span class="number">10</span>) * (num % <span class="number">10</span>);</span><br><span class="line">            num = num / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-求环的长度">2 求环的长度</h2>
<p>  当slow和fast相遇后，slow和fast必定在环上，只要让其中一个不动，另一个继续走，并计数，直到两者再次相遇，则可以得到环的长度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">circleLen</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slowNum</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">quickNum</span> <span class="operator">=</span> getNextValue(n);</span><br><span class="line">        <span class="comment">// 这里用quickNum != slowNum 作为出循环条件，无论是都为1，还是有环都可以跳出循环</span></span><br><span class="line">        <span class="keyword">while</span> (quickNum != slowNum) &#123;</span><br><span class="line">            slowNum = getNextValue(slowNum);</span><br><span class="line">            quickNum = getNextValue(getNextValue(quickNum));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 出循环则 quickNum == slowNum</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        slowNum = getNextValue(slowNum);</span><br><span class="line">        <span class="keyword">while</span> (slowNum != quickNum) &#123;</span><br><span class="line">           	slowNum = getNextValue(slowNum);</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNextValue</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            res += (num % <span class="number">10</span>) * (num % <span class="number">10</span>);</span><br><span class="line">            num = num / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-求环的起点">3. 求环的起点</h2>
<img src="/2022/03/26/floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95/有环链表.png" alt="有环链表" style="zoom:80%;">
<p>如图为一个有环链表，对于该链表有如下定义：</p>
<ul>
<li>A为环的起点，S为链表的起点，B为slow与quick指针相遇的点。m为S到A的距离，n为A到B的距离</li>
<li>slow指针走过的所有节点为i，则quick指针必定走过节点2i。因为quick的速度是slow的2倍。</li>
</ul>
<p>则有：</p>
<ol>
<li>对于slow指针：i = m + n + aL   (a为slow走过环的圈数，L为环的节点总数)</li>
<li>对于quick指针：2i = m + n + bL   (b为quick走过的圈数，L同上)</li>
<li>第2点 - 第1点则有：i = (b-a)L， 则i 必定为L的整数倍。</li>
<li>带入第1点则有：m + n = (b - 2a) L，则m + n 必定为L的整数倍(b, a为整数，且m+n &gt; 0, 所以有 b-2a &gt; 0)，<strong>m+n是一个完整的环</strong>。</li>
<li>所以当从B点继续走m步，则必定停在A点（因为4，m+n是一个完整的环）。</li>
<li>但是m是多大，不清楚。此时，只需要一个指针从S点出发，另一个从B出发。如果走了m，S必定到达A点，B也必定到达A点，则当两个指针第一次相遇的时候，就是起点A。我们就不需要处理m的问题了。</li>
</ol>
<p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II(LeetCode)</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// 当没有节点或者只有一个节点时，必定没有环</span></span><br><span class="line">        <span class="keyword">if</span> (head== <span class="literal">null</span> || getNext(head) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 慢指针</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slowNode</span> <span class="operator">=</span> getNext(head);</span><br><span class="line">        <span class="comment">// 快指针</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">quickNode</span> <span class="operator">=</span> getNext(getNext(head));</span><br><span class="line">        <span class="comment">// 如果有节点为null，则说明能走到末尾，则必定无环，此时直接跳出循环，或者在环内相遇，也跳出循环</span></span><br><span class="line">        <span class="keyword">while</span> (slowNode != <span class="literal">null</span> &amp;&amp; quickNode != <span class="literal">null</span> &amp;&amp; getNext(quickNode) != <span class="literal">null</span> &amp;&amp; getNext(getNext(quickNode)) != <span class="literal">null</span> &amp;&amp; slowNode != quickNode) &#123;</span><br><span class="line">            slowNode = getNext(slowNode);</span><br><span class="line">            quickNode = getNext(getNext(quickNode));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 有节点走到末尾，则说明无环，</span></span><br><span class="line">        <span class="keyword">if</span> (quickNode == <span class="literal">null</span> || getNext(quickNode) == <span class="literal">null</span> || getNext(getNext(quickNode)) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将慢指针置于链表头节点，再次相遇，则为起点</span></span><br><span class="line">        slowNode = head;</span><br><span class="line">        <span class="keyword">while</span> (slowNode != quickNode) &#123;</span><br><span class="line">            slowNode = getNext(slowNode);</span><br><span class="line">            quickNode = getNext(quickNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> quickNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getNext</span><span class="params">(ListNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：此题也可以用哈希表做，用一个指针遍历，将走过的节点存储起来，如果有环，则哈希表中必定能找到这个点，并且第一次找到的点就为起点（因为环的起点在前面）。如果到达节点末尾，则说明无环。<br>
哈希表的时间复杂度也是O(N)，但是空间复杂度为O(N)，floyd判圈的空间复杂度为O(1)。</p>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo编辑相关</title>
    <url>/2021/03/22/hexo%E7%BC%96%E8%BE%91%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p>记录hexo常用操作</p>
<span id="more"></span>
<h4 id="1-hexo首行缩进：">1. hexo首行缩进：</h4>
<p>  一个代表一个汉字字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;</span><br></pre></td></tr></table></figure>
<h4 id="2-hexo文章跳转其他文章">2.hexo文章跳转其他文章</h4>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">跳转到一篇名为 hello-world 的文章</span><br><span class="line">&#123;% post_link hello-world %&#125;</span><br><span class="line">&#123;% post_link hello-world 你好世界 %&#125;</span><br></pre></td></tr></table></figure>
<a href="/2020/12/31/hello-world/" title="Hello World">你好世界</a>
<h4 id="3-添加数学公式">3. 添加数学公式</h4>
<p>  <a href="https://blog.csdn.net/mingzhuo_126/article/details/82722455">数学公式</a>   <a href="https://blog.csdn.net/dabokele/article/details/79577072">博客2</a>      (某CSDN博客)</p>
<p>   空格 ：a,b     a;b    a\ b    a\quad b</p>
<h4 id="4-空行">4. 空行</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">二选一，推荐上面的</span><br></pre></td></tr></table></figure>
<h4 id="5-字自定义">5. 字自定义</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#x27;font-size:40px; font-family:微软雅黑; color:red&#x27;</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;display:block;&quot;</span>&gt;</span>文字居中显示，两个都必须有<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="6-hexo新建草稿">6.hexo新建草稿</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">hexo new draft &quot;<span class="tag">&lt;<span class="name">title</span>&gt;</span>&quot;</span><br></pre></td></tr></table></figure>
<h4 id="7-hexo将草稿发布">7.hexo将草稿发布</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">hexo publish &quot;<span class="tag">&lt;<span class="name">title</span>&gt;</span>&quot;</span><br></pre></td></tr></table></figure>
<h4 id="8-katle渲染引擎todo问题">8.katle渲染引擎todo问题</h4>
<p>  换渲染引擎后todoList渲染出现问题，使用html语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">diabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">diabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;网址&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="9-添加图片">9. 添加图片</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;ML&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://seopic.699pic.com/photo/40005/7241.jpg_wh1200.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;ML&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:80%;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>图1：Machine Learning<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="10">
<li>添加文献引用</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">## Markdown 增加文献引用</span><br><span class="line"></span><br><span class="line">这边文章是介绍如何在 Markdown 中增加文献引用。[<span class="tag">&lt;<span class="name">sup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">sup</span>&gt;</span>](#refer-anchor-1)</span><br><span class="line"></span><br><span class="line">## 参考</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;refer-anchor-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- [1] [百度学术](http://xueshu.baidu.com/)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;refer-anchor-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- [2] [Wikipedia](https://en.wikipedia.org/wiki/Main_Page)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>站点相关</category>
        <category>博客相关</category>
      </categories>
  </entry>
  <entry>
    <title>elasticSearch基础</title>
    <url>/2023/03/26/elasticSearch%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>elasticSearch简单介绍，注意，此笔记基于elasticsearch7版本，8版本已经移除type概念。</p>
<span id="more"></span>
<blockquote>
<p>Elasticsearch（简称ES）是一个基于Apache Lucene™的开源搜索引擎，无论在开源还是专有领域，Lucene 可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。注意，Lucene 只是一个库。想要发挥其强大的作用，你需使用 Java 并要将其集成到你的应用中。</p>
<p>Lucene 非常复杂，你需要深入的了解检索相关知识来理解它是如何工作的，就跟学习 springmvc 之前先从 servlet 开始，繁琐复杂的工作，Solor、Elasticsearch 应由而生， 其使用 Java 编写并使用 Lucene 来建立索引并实现搜索功能，但是它的目的是通过简单连贯的 RESTful API 让全文搜索变得简单并隐藏 Lucene 的复杂性。</p>
</blockquote>
<p>上面的介绍摘自<a href="https://blog.csdn.net/chwensrong/article/details/123378129">Elasticsearch基本概念_波斯_辣椒的博客</a>。根据<a href="http://creativecommons.org/licenses/by-sa/4.0/"> CC 4.0 BY-SA </a>协议获取授权并转载。（偷个懒，毕竟介绍都差不多(❁´◡`❁)）。<br>
注：Solor是另一个lucene封装库。</p>
<p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/foreword_id.html">Elasticsearch: 权威指南 | Elastic</a>。中文文档，可能已经过时。</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html">Elasticsearch Guide | Elastic</a>。英文文档。</p>
<h2 id="1-安装elasticsearch">1.安装elasticSearch</h2>
<p>docker命令可以参考<a href="https://blog.csdn.net/sxzlc/article/details/107676425">Docker命令_各种参数简介博客</a></p>
<ol>
<li>通过docker下载</li>
</ol>
<p>下载的版本是7.6.2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.6.2</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>配置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建目录, 用于后面将docker中的配置文件映射到物理机中</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /mydata/elasticsearch/config  </span><br><span class="line"><span class="built_in">mkdir</span> -p /mydata/elasticsearch/data</span><br><span class="line"><span class="comment"># 写入`http.host: 0.0.0.0`到config下的elasticsearch.yml文件中</span></span><br><span class="line"><span class="comment"># 允许任何ip访问（在防火墙限制ip（因为本地是浮动ip））</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;http.host: 0.0.0.0&quot;</span> &gt;/mydata/elasticsearch/config/elasticsearch.yml </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将mydata/elasticsearch/文件夹中文件都可读可写（生产应该更好的做法），-R是递归的意思</span></span><br><span class="line"><span class="built_in">chmod</span> -R 777 /mydata/elasticsearch/</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>启动Elastic search</li>
</ol>
<p>下面的命令需要去除注释后全部执行。注意：</p>
<ul>
<li>docker run 只在第一次运行的时候使用，（后续使用docker start），用于将镜像放到容器中。不用指定容器id或名称</li>
<li>docker start 重新启动已存在的镜像。用于后面重新启动镜像。需要指定容器id或名称。</li>
<li>查看启动日志：docker logs 容器名称或ID</li>
<li>如果安装配置错误，可以考虑删除容器（不是删除镜像）。
<ol>
<li>docker stop 容器ID</li>
<li>docker rm 容器ID</li>
<li>重新执行docker run</li>
</ol>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会创建镜像，名称为elasticsearch，映射容器的端口9200到物理机的9200（http请求），9300（集群通信）</span></span><br><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \</span><br><span class="line"><span class="comment"># 启动模式：单节点。`-e`:设置镜像的环境变量</span></span><br><span class="line">-e  <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line"><span class="comment"># 限制内存大小，否则会使用所有内存(es特别占用内存）</span></span><br><span class="line">-e ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx512m&quot;</span> \</span><br><span class="line"><span class="comment"># 挂载docker中的配置到外部配置。`-v` 挂载数据卷</span></span><br><span class="line"><span class="comment"># 将docker中的elasticsearch.yml挂载到物理机中的elasticsearch.yml；挂载data文件夹，挂载plugins文件夹</span></span><br><span class="line">-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v  /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">-d elasticsearch:7.6.2</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>设置开机启动（非必须）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker update elasticsearch --restart=always</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>开放端口：9200，9300</li>
<li>访问</li>
</ol>
<p>直接访问ip+端口，此处端口为上面设置的9200。若安装失败，使用<code>docker logs 容器id</code>查看日志。</p>
<p><img src="/2023/03/26/elasticSearch%E5%9F%BA%E7%A1%80/elasticSearch%E5%AE%89%E8%A3%85%E8%AE%BF%E9%97%AE.webp" alt="elasticSearch安装访问"></p>
<h2 id="2-安装kibana">2.安装kibana</h2>
<ol>
<li>通过docker下载，需要与elasticsearch版本保持一致</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull kibana:7.6.2</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>启动kibana，并设置kibana的elasticsearch地址</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种方式启动，需要指定地址为ip(局域网ip)</span></span><br><span class="line">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.6.128:9200 -p 5601:5601 -d kibana:7.6.2</span><br><span class="line"><span class="comment"># 第二种方式启动 可以指定地址为localhost(推荐)</span></span><br><span class="line"><span class="comment"># `-d`后台运行，`-p`映射端口，物理机端口5601到容器端口5601，--link，链接名为elasticsearch的容器，</span></span><br><span class="line"><span class="comment"># `-e`配置环境变量ELASTICSEARCH_URL=localhost:9200，9200是elesticsearch</span></span><br><span class="line">docker run -d -p 5601:5601 --<span class="built_in">link</span> elasticsearch -e <span class="string">&quot;ELASTICSEARCH_URL=localhost:9200&quot;</span> kibana:7.6.2</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>开放端口：5601</li>
<li>访问kibana</li>
</ol>
<p>若安装成功，则可以直接访问kibana的地址。主机ip+port。此处为5601。若安装失败，使用<code>docker logs 容器id</code>查看日志。</p>
<p><img src="/2023/03/26/elasticSearch%E5%9F%BA%E7%A1%80/kibana%E8%AE%BF%E9%97%AE.webp" alt="kibana访问"></p>
<h2 id="3-elasticsearch概念">3.elasticSearch概念</h2>
<h3 id="基本概念：">基本概念：</h3>
<p>索引（indices）-------------------Databases 数据库<br>
类型（type）----------------------Table 数据表，在indices下，可以定义一个或多个type。（ES8已移除）<br>
文档（Document）---------------Row 行。以JSON的形式保存<br>
字段（Field）---------------------Columns 列</p>
<h3 id="正排索引：">正排索引：</h3>
<p>是以文档对象的唯一 ID 作为索引，以文档内容作为记录的结构。例如关系型数据库的ID。</p>
<table>
<thead>
<tr>
<th style="text-align:left">docID</th>
<th style="text-align:left">value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">动态规划</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">动态壁纸超好看</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">好看动态图</td>
</tr>
</tbody>
</table>
<h3 id="倒排索引">倒排索引</h3>
<p>将文档内容中的单词作为索引，将包含该词的文档 docID 作为记录的结构。</p>
<ol>
<li>先经过正排索引，给文档编号，作为为唯一标识，如上正排索引的表中docID</li>
<li>对字段进行分词。（因此有各种分词器）</li>
<li>按分词建立倒排索引表。term为词，posting list为这个词在哪些docID的value中出现过</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">term</th>
<th style="text-align:left">posting list</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">动态</td>
<td style="text-align:left">1，2，3</td>
</tr>
<tr>
<td style="text-align:left">规划</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">好看</td>
<td style="text-align:left">2，3</td>
</tr>
<tr>
<td style="text-align:left">壁纸</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">图</td>
<td style="text-align:left">3</td>
</tr>
</tbody>
</table>
<p>这些词就是term，而存储原ID的是posting list，存储了所有符合某个term的文档id。</p>
<p>当搜索  <strong>动态高清壁纸</strong>  的时候，ID=2的命中两次，ID=1、3分别命中1次。经过一些列算法，<strong>动态壁纸超好看</strong>  分数最高。所有命中的都可以查到，但是分数较低。</p>
<p>当然，这样的存储肯定会特别占用内存，搜索词term的的时候也会比较耗时，底层Lucene有自己更为复杂的实现。<br>
PS：好吧，我就是不懂😭</p>
<h2 id="4-elasticsearch接口">4.elasticSearch接口</h2>
<p>其接口是<strong>RestFul</strong>风格的。</p>
<h3 id="查看cat支持的所有指令">查看cat支持的所有指令</h3>
<p>GET: <a href="http://localhost:9200/_cat">http://localhost:9200/_cat</a></p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>返回JSON</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">=^.^=</span><br><span class="line">/_cat/allocation</span><br><span class="line">/_cat/shards</span><br><span class="line">/_cat/shards/<span class="punctuation">&#123;</span>index<span class="punctuation">&#125;</span></span><br><span class="line">/_cat/master</span><br><span class="line">/_cat/nodes</span><br><span class="line">/_cat/tasks</span><br><span class="line">/_cat/indices</span><br><span class="line">/_cat/indices/<span class="punctuation">&#123;</span>index<span class="punctuation">&#125;</span></span><br><span class="line">/_cat/segments</span><br><span class="line">/_cat/segments/<span class="punctuation">&#123;</span>index<span class="punctuation">&#125;</span></span><br><span class="line">/_cat/count</span><br><span class="line">/_cat/count/<span class="punctuation">&#123;</span>index<span class="punctuation">&#125;</span></span><br><span class="line">/_cat/recovery</span><br><span class="line">/_cat/recovery/<span class="punctuation">&#123;</span>index<span class="punctuation">&#125;</span></span><br><span class="line">/_cat/health</span><br><span class="line">/_cat/pending_tasks</span><br><span class="line">/_cat/aliases</span><br><span class="line">/_cat/aliases/<span class="punctuation">&#123;</span>alias<span class="punctuation">&#125;</span></span><br><span class="line">/_cat/thread_pool</span><br><span class="line">/_cat/thread_pool/<span class="punctuation">&#123;</span>thread_pools<span class="punctuation">&#125;</span></span><br><span class="line">/_cat/plugins</span><br><span class="line">/_cat/fielddata</span><br><span class="line">/_cat/fielddata/<span class="punctuation">&#123;</span>fields<span class="punctuation">&#125;</span></span><br><span class="line">/_cat/nodeattrs</span><br><span class="line">/_cat/repositories</span><br><span class="line">/_cat/snapshots/<span class="punctuation">&#123;</span>repository<span class="punctuation">&#125;</span></span><br><span class="line">/_cat/templates</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="查看节点信息-cat是kibana-控制台">查看节点信息（_cat是Kibana 控制台）</h3>
<p>GET：<a href="http://localhost:9200/_cat/nodes%E3%80%82">http://localhost:9200/_cat/nodes。</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">17</span> <span class="number">97</span> <span class="number">1</span> <span class="number">0.01</span> <span class="number">0.02</span> <span class="number">0.00</span> dilm * a0afe6713d7f</span><br></pre></td></tr></table></figure>
<h3 id="查看节点的健康情况">查看节点的健康情况</h3>
<p>GET <a href="http://localhost:9200/_cat/health">http://localhost:9200/_cat/health</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">1680096955</span> <span class="number">13</span><span class="punctuation">:</span><span class="number">35</span><span class="punctuation">:</span><span class="number">55</span> elasticsearch yellow <span class="number">1</span> <span class="number">1</span> <span class="number">6</span> <span class="number">6</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> - <span class="number">66.7</span>%</span><br></pre></td></tr></table></figure>
<h3 id="查看主节点信息">查看主节点信息</h3>
<p>GET <a href="http://localhost:9200/_cat/master">http://localhost:9200/_cat/master</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Z8a8Ekp4TVuqkv9rEQEzzA <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> a0afe6713d7f</span><br></pre></td></tr></table></figure>
<h3 id="查看es的索引-数据库">查看ES的索引（数据库）</h3>
<p>GET <a href="http://localhost.28:9200/_cat/indices">http://localhost.28:9200/_cat/indices</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">yellow open website                  LA03aN0qStmXdO8nmuzWDw <span class="number">1</span> <span class="number">1</span>    <span class="number">2</span> <span class="number">2</span>   <span class="number">8.6</span>kb   <span class="number">8.6</span>kb</span><br><span class="line">yellow open bank                     tAFAIEHTSkK-Oavb2Wd3JQ <span class="number">1</span> <span class="number">1</span> <span class="number">1000</span> <span class="number">0</span> <span class="number">414.3</span>kb <span class="number">414.3</span>kb</span><br><span class="line">green  open .kibana_task_manager_1   V13OX5BcTiaN4YLaXsObfQ <span class="number">1</span> <span class="number">0</span>    <span class="number">2</span> <span class="number">0</span>  <span class="number">21.7</span>kb  <span class="number">21.7</span>kb</span><br><span class="line">green  open .apm-agent-configuration isjY4x8cRvCW2XMevs0ypw <span class="number">1</span> <span class="number">0</span>    <span class="number">0</span> <span class="number">0</span>    <span class="number">283</span>b    <span class="number">283</span>b</span><br><span class="line">green  open .kibana_1                mK0GqkVdREKfabACDAxPKQ <span class="number">1</span> <span class="number">0</span>    <span class="number">8</span> <span class="number">0</span>  <span class="number">25.2</span>kb  <span class="number">25.2</span>kb</span><br><span class="line">yellow open customer                 X34j-t18T12nerLUajXISQ <span class="number">1</span> <span class="number">1</span>    <span class="number">3</span> <span class="number">0</span>   <span class="number">3.7</span>kb   <span class="number">3.7</span>kb</span><br></pre></td></tr></table></figure>
<h3 id="索引一个文档">索引一个文档</h3>
<p>GET <a href="http://localhost:9200/customer/external/1">http://localhost:9200/customer/external/1</a><br>
查询customer索引，external类型下的ID为1</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;customer&quot;</span><span class="punctuation">,</span> # 索引</span><br><span class="line">    <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span> # 类型</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span>	# id</span><br><span class="line">    <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>	# 版本号</span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> # 序列号用于并发控制</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;found&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    	# 具体的key-value</span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="post新增与修改">post新增与修改</h3>
<p>可以不指定ID，如果不指定，则自动生成ID。如果指定了，则是修改，同时<code>_version</code>会加1，<code>_seq_no</code>也会加1。<br>
POST: <a href="http://localhost:9200/customer/external/2">http://localhost:9200/customer/external/2</a></p>
<p>调用</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;John Doe&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;customer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;updated&quot;</span><span class="punctuation">,</span> # 结果是更新</span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="put新增与修改">put新增与修改</h3>
<p>必须指定ID，若没有，则是新增，否则是修改<br>
PUT：<a href="http://localhost:9200/customer/external/1">http://localhost:9200/customer/external/1</a></p>
<p>调用：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;John Doe&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;customer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;updated&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="乐观锁修改">乐观锁修改</h3>
<p><code>_seq_no</code>，<code>_primary_term</code>，可以用于乐观锁更新。if_seq_no=1&amp;if_primary_term=1。通过序列好使用乐观锁<br>
PUT：<a href="http://localhost:9200/customer/external/1?if_seq_no=1&amp;if_primary_term=1">http://localhost:9200/customer/external/1?if_seq_no=1&amp;if_primary_term=1</a></p>
<p>调用</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;aa&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;root_cause&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;version_conflict_engine_exception&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[1]: version conflict, required seqNo [1], primary term [1]. current document has seqNo [18] and primary term [1]&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;index_uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;X34j-t18T12nerLUajXISQ&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;shard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;customer&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;version_conflict_engine_exception&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[1]: version conflict, required seqNo [1], primary term [1]. current document has seqNo [18] and primary term [1]&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index_uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;X34j-t18T12nerLUajXISQ&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;shard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;customer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">409</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="post更新-带id-带-update">post更新，带ID，带<code>_update</code></h3>
<p>如果更新的数据没有任何变化，则不进行任何操作</p>
<p>POST：<a href="http://localhost:9200/customer/external/1/_update">http://localhost:9200/customer/external/1/_update</a></p>
<p>调用：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;john name&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;customer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span> # 版本号增加</span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;updated&quot;</span><span class="punctuation">,</span> # 结果是更新</span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span> # 序列号增加</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>再次调用</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;customer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span> # 不变化</span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;noop&quot;</span><span class="punctuation">,</span> # noop</span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span> # 不变化</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="删除数据">删除数据</h3>
<p>DELETE：<a href="http://localhost:9200/customer/external/1">http://localhost:9200/customer/external/1</a></p>
<p>返回数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;customer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;deleted&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="批量操作-只能在kibana上">批量操作，只能在kibana上</h3>
<p>如下为批量添加两条数据</p>
<p><a href="https://gitee.com/WangJiaHui202144/elasticsearch-test-data">elasticsearch-test-data: es测试数据 (gitee.com)</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /bank/account/_bulk</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span><span class="number">39225</span><span class="punctuation">,</span><span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span><span class="string">&quot;Amber&quot;</span><span class="punctuation">,</span><span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span><span class="string">&quot;Duke&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">32</span><span class="punctuation">,</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="string">&quot;M&quot;</span><span class="punctuation">,</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;880 Holmes Lane&quot;</span><span class="punctuation">,</span><span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span><span class="string">&quot;Pyrami&quot;</span><span class="punctuation">,</span><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;amberduke@pyrami.com&quot;</span><span class="punctuation">,</span><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="string">&quot;Brogan&quot;</span><span class="punctuation">,</span><span class="attr">&quot;state&quot;</span><span class="punctuation">:</span><span class="string">&quot;IL&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;6&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span><span class="number">6</span><span class="punctuation">,</span><span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span><span class="number">5686</span><span class="punctuation">,</span><span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span><span class="string">&quot;Hattie&quot;</span><span class="punctuation">,</span><span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span><span class="string">&quot;Bond&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">36</span><span class="punctuation">,</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="string">&quot;M&quot;</span><span class="punctuation">,</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;671 Bristol Street&quot;</span><span class="punctuation">,</span><span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span><span class="string">&quot;Netagy&quot;</span><span class="punctuation">,</span><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;hattiebond@netagy.com&quot;</span><span class="punctuation">,</span><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="string">&quot;Dante&quot;</span><span class="punctuation">,</span><span class="attr">&quot;state&quot;</span><span class="punctuation">:</span><span class="string">&quot;TN&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-es检索接口">5 ES检索接口</h2>
<p>所有的检索都是先接索引后接<code>_search</code>。</p>
<h3 id="查询条件位于url">查询条件位于URL</h3>
<p>GET <a href="http://localhost:9200/bank/_search?q=*&amp;sort=account_number:asc">http://localhost:9200/bank/_search?q=*&amp;sort=account_number:asc</a></p>
<p>查询bank索引下，查询条件为所有数据（q=*），按account_number升序排序</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>返回JSON</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">43</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span>  # 总共<span class="number">1000</span>条数据，此查询会默认返回<span class="number">10</span>条</span><br><span class="line">            <span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span> # 查询条件为等于（eq）</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> # 最大得分为空（没有最大得分）</span><br><span class="line">        <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">16623</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bradshaw&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mckenzie&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">29</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;244 Columbus Place&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Euron&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bradshawmckenzie@euron.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hobucken&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CO&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="number">0</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="查询条件位于json-dsl查询">查询条件位于json（DSL查询）</h3>
<p>查询bank索引下的数据</p>
<p>GET <a href="http://localhost:9200/bank/_search">http://localhost:9200/bank/_search</a></p>
<p>调用</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>  # 查询所有</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span> # 排序规则，此处为简写</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span> # 排序规则，此处为全写</span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span>  # 分页查询，从<span class="number">0</span>开始，只查<span class="number">5</span>条</span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>   # 如果只想返回balance与firstname字段</span><br><span class="line">        <span class="string">&quot;balance&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;firstname&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>返回：</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>返回JSON</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bradshaw&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">16623</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="number">16623</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Amber&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">39225</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="number">39225</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Roberta&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">28838</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="number">28838</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Levine&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">44947</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="number">44947</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Rodriquez&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">27658</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="number">27658</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="全文检索-分词查询">全文检索（分词查询）</h3>
<p>使用match，是分词查询，会按评分进行排序</p>
<p>GET <a href="http://localhost:9200/bank/_search">http://localhost:9200/bank/_search</a></p>
<p>调用</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">             # 查询address包含Kings Place分词后的数据（此处会）</span><br><span class="line">        	 # 此处会被分为Kings，Place两个词，</span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kings Place&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>返回</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>返回JSON</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">182</span><span class="punctuation">,</span> # <span class="number">182</span>条</span><br><span class="line">            <span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span>  # 查询关系 为等于</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">7.6978617</span><span class="punctuation">,</span> # 最大得分</span><br><span class="line">        <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">7.6978617</span><span class="punctuation">,</span>  # 查询到的分数（此条是最高的）</span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">16418</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Elinor&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ratliff&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">36</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;282 Kings Place&quot;</span><span class="punctuation">,</span> # 查询匹配字段</span><br><span class="line">                    <span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Scentric&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;elinorratliff@scentric.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ribera&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WA&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;722&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">5.9908285</span><span class="punctuation">,</span> # 查询到的分数</span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">722</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">27256</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Roberts&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Beasley&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">34</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;305 Kings Hwy&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Quintity&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;robertsbeasley@quintity.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hayden&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PA&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;37&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1.7070332</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">37</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">18612</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mcgee&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mooney&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;826 Fillmore Place&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Reversus&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mcgeemooney@reversus.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tooleville&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="短语匹配">短语匹配</h3>
<p>使用match_phrase进行短语匹配。只要文档里面包含所有分词后的短语，就会被查到，是分词后去查询的，<strong>目标文档必须包含分词后的所有词</strong>，与<strong>term的精确匹配</strong>不同</p>
<p>GET <a href="http://localhost:9200/bank/_search">http://localhost:9200/bank/_search</a></p>
<p>调用：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_phrase&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kings Place&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>返回</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>返回JSON</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">7.6978617</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">7.6978617</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">16418</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Elinor&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ratliff&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">36</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;282 Kings Place&quot;</span><span class="punctuation">,</span> # 只有这一条是精确匹配</span><br><span class="line">                    <span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Scentric&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;elinorratliff@scentric.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ribera&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WA&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="多字段匹配">多字段匹配</h3>
<p>使用multi_match进行多字段匹配。多个字段匹配查询条件，相当于sql的or条件。会进行分词。</p>
<p>GET: <a href="http://localhost:9200/bank/_search">http://localhost:9200/bank/_search</a></p>
<p>调用:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill movico&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;address&quot;</span><span class="punctuation">,</span> <span class="string">&quot;city&quot;</span>  # 这两个字段匹配查询条件</span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>返回</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>返回JSON</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">6.505949</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;472&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">6.505949</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">472</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">25571</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Lee&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Long&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;288 Mill Street&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Comverges&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;leelong@comverges.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Movico&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MT&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;970&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">970</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">19648</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Forbes&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Wallace&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;990 Mill Road&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pheast&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;forbeswallace@pheast.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Lopezo&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AK&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;136&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">136</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">45801</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Winnie&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Holland&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;198 Mill Lane&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Neteria&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;winnieholland@neteria.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Urie&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IL&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;345&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">345</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">9812</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Parker&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hines&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;715 Mill Avenue&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Baluba&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;parkerhines@baluba.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Blackgum&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;KY&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="bool复合查询">bool复合查询</h3>
<p>用于构建合并多个查询条件。</p>
<p>must: 必须满足的条件；作为条件，同时还会<strong>贡献得分</strong>，与filter区别</p>
<p>must_not：必须不满足；不会贡献得分，通filter</p>
<p>should：应该，满足了会贡献得分。</p>
<p>GET：<a href="http://localhost:9200/bank/_search">http://localhost:9200/bank/_search</a></p>
<p>调用：</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>调用JSON</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span>  # 必须满足的条件</span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span>  # 匹配</span><br><span class="line">                        <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span>  # gender字段M</span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;must_not&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span>  # 必须不满足</span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">38</span> # 年龄不等于<span class="number">38</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  # 应该，满了会加分，不满足也会查到，但是不加分</span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Wallace&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<p>返回：</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>返回JSON</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">12.585751</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;970&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">12.585751</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">970</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">19648</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Forbes&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Wallace&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;990 Mill Road&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pheast&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;forbeswallace@pheast.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Lopezo&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AK&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="filter过滤">filter过滤</h3>
<p>用来作为筛选条件，不会贡献得分。不同于must与must_not</p>
<p>GET：<a href="http://localhost:9200/bank/_search">http://localhost:9200/bank/_search</a></p>
<p>调用</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> # 为范围查询</span><br><span class="line">                        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span>  # 查询年龄在<span class="number">18</span>到<span class="number">20</span></span><br><span class="line">                            <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>返回</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>返回JSON</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">44</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span>  # 最高的分为<span class="number">0</span>，验证了不会贡献得分</span><br><span class="line">        <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;157&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">157</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">39868</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Claudia&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Terry&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;132 Gunnison Court&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Lumbrex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;claudiaterry@lumbrex.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Castleton&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MD&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;215&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">215</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">37427</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Copeland&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Solomon&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;741 McDonald Avenue&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Recognia&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;copelandsolomon@recognia.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Edmund&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ME&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="term与文本精确查询">term与文本精确查询</h3>
<p>term的精确匹配，不会进行分词。非文本字段的精确查询，例如年龄、金额等数字。</p>
<p>若需要精确检索，使用字段.keywword。</p>
<p>GET：<a href="http://localhost:9200/bank/_search">http://localhost:9200/bank/_search</a></p>
<p>调用：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">28</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>文本的精确查询</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address.keyword&quot;</span><span class="punctuation">:</span> <span class="string">&quot;789 Madison Street&quot;</span> # keywword关键字</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="聚合检索aggs">聚合检索aggs</h3>
<p>用于对查询后的条件进行分析与提取，类似于SQL的group by和SQL的聚合函数。</p>
<p><strong>搜索address为mill，所有人的年龄分布，与平均年龄。但是不显示这些人的详情。</strong></p>
<p>GET：<a href="http://localhost:9200/bank/_search">http://localhost:9200/bank/_search</a></p>
<p>调用：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span>   # 查询address为mill的数据</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ageAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> # 自定义聚合名字为ageAgg</span><br><span class="line">            <span class="attr">&quot;terms&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> # 聚合类型terms，该类型类似于count group by `age` 按年龄分组统计数量</span><br><span class="line">                <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ag&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span> # 只展示前<span class="number">10</span>个</span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ageAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> # 自定义聚合名字为ageAvg</span><br><span class="line">            <span class="attr">&quot;avg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> # 聚合类型为avg</span><br><span class="line">                <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span> # 统计平均年龄</span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;0&quot;</span>  # 分页为<span class="number">0</span>，不要任何文档数据，只要聚合结果</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>返回：</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>返回JSON</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;aggregations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ageAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  # 自定义名字为ageAgg的聚合</span><br><span class="line">            <span class="attr">&quot;doc_count_error_upper_bound&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sum_other_doc_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span>  # 年龄<span class="number">38</span>的有<span class="number">2</span>个</span><br><span class="line">                    <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ageAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  # 自定义名字为ageAvg的聚合</span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">34.0</span>  # 平均年龄为<span class="number">34.0</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<p><strong>按年龄分组统计数量；按年龄、性别分组统计数量；  按年龄、性别分组统计平均工资；  按年龄的平均工资</strong></p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>调用JSON</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  # 聚合</span><br><span class="line">        <span class="attr">&quot;ageAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  #  自定义聚合名</span><br><span class="line">             </span><br><span class="line">            <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span>  # 按年龄count</span><br><span class="line">                <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2</span>   # 展示前<span class="number">3</span>条</span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> # 嵌套聚合，此聚合基于按age分组后</span><br><span class="line">                     </span><br><span class="line">                <span class="attr">&quot;genderAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  #自定义聚合名字</span><br><span class="line">                    <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gender.keyword&quot;</span><span class="punctuation">,</span>  # 聚合按gender的精确字段统计（因为此字段是文本）</span><br><span class="line">                        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  # 嵌套聚合，此聚合基于按age、gender分组后</span><br><span class="line">                        <span class="attr">&quot;balanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> # 自定义聚合名字</span><br><span class="line">                            <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> # 求balance平均值</span><br><span class="line">                                <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;balance&quot;</span> </span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">                <span class="attr">&quot;ageBalanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> # 自定义聚合名字</span><br><span class="line">                    <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> # 求平均值 （每个age的平均balance）</span><br><span class="line">                        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;balance&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<p>返回：</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>返回JSON</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;aggregations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ageAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> # 聚合名称</span><br><span class="line">            <span class="attr">&quot;doc_count_error_upper_bound&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sum_other_doc_count&quot;</span><span class="punctuation">:</span> <span class="number">879</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">31</span><span class="punctuation">,</span> # 年龄<span class="number">31</span>的</span><br><span class="line">                    <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">61</span><span class="punctuation">,</span> # 数量</span><br><span class="line">                    <span class="attr">&quot;genderAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> # 聚合名称</span><br><span class="line">                        <span class="attr">&quot;doc_count_error_upper_bound&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sum_other_doc_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span>  # gender 为M的</span><br><span class="line">                                <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">35</span><span class="punctuation">,</span> # 数量</span><br><span class="line">                                <span class="attr">&quot;balanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  # 聚合名称</span><br><span class="line">                                    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">29565.628571428573</span>  # balance平均值<span class="number">29565.628571428573</span></span><br><span class="line">                                <span class="punctuation">&#125;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> # gender为F的</span><br><span class="line">                                <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">26</span><span class="punctuation">,</span> # 数量<span class="number">26</span></span><br><span class="line">                                <span class="attr">&quot;balanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> # 聚合名称</span><br><span class="line">                                    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">26626.576923076922</span> # balance平均值<span class="number">29565.628571428573</span>（年龄<span class="number">31</span>的、gender为F的平均balance）</span><br><span class="line">                                <span class="punctuation">&#125;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ageBalanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  # 聚合名</span><br><span class="line">                        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">28312.918032786885</span> # balanc平均值<span class="number">28312.918032786885</span>（年龄<span class="number">38</span>的平均balance）</span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">60</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;genderAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;doc_count_error_upper_bound&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sum_other_doc_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;balanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">26348.684210526317</span></span><br><span class="line">                                <span class="punctuation">&#125;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;balanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">23405.68181818182</span></span><br><span class="line">                                <span class="punctuation">&#125;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ageBalanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">25269.583333333332</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="映射mapping">映射Mapping</h3>
<p>类似与创建SQL时的定义的字段数据类型（不同于type）。索引下的类型（type）在ES7版本可选，8版本移除。</p>
<p>映射会在创建时ES自动推断</p>
<p>GET <a href="http://localhost:9200/bank/_mapping">http://localhost:9200/bank/_mapping</a></p>
<p>获取所有字段映射</p>
<p>返回</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>返回JSON</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bank&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span> # 类型为long</span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span>  #类型为文本</span><br><span class="line">                    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<p><strong>手动创建映射</strong>，在创建索引时可以手动创建，创建my_index索引</p>
<p>PUT <a href="http://localhost:9200/my_index">http://localhost:9200/my_index</a></p>
<p>调用</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  # 创建的时候需要</span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> # 指定为映射</span><br><span class="line">            <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>添加映射</strong></p>
<p>PUT <a href="http://localhost:9200/my_index/_mapping">http://localhost:9200/my_index/_mapping</a></p>
<p>调用</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> # 添加映射</span><br><span class="line">        <span class="attr">&quot;employee-id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>迁移数据</strong></p>
<p>不支持修改索引，建议迁移。先创建索引，再迁移</p>
<p>PUT <a href="http://localhost:9200/_reindex">http://localhost:9200/_reindex</a></p>
<p>调用</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> # 从那迁移</span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> # 迁移到</span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;newbank&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="6-安装分词器">6 安装分词器</h2>
<p>这里使用IK分词器，<a href="https://github.com/medcl/elasticsearch-analysis-ik">medcl/elasticsearch-analysis-ik: The IK Analysis plugin integrates Lucene IK analyzer into elasticsearch, support customized dictionary. (github.com)</a>。下载与ES对应的ik分词器版本即可。<br>
然解压到之前映射的plugins目录下即可。</p>
<h3 id="使用ik分词器">使用Ik分词器</h3>
<p>GET <a href="http://localhost:9200/_analyze">http://localhost:9200/_analyze</a></p>
<p>调用</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span> # 使用ik分词器</span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Elasticsearch（简称ES）是一个基于Apache Lucene™的开源搜索引擎&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>返回</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;elasticsearch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ENGLISH&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;简称&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ENGLISH&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;是&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一个&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;基于&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;apache&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ENGLISH&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lucene&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">31</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">37</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ENGLISH&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;的&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;开源&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">41</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;搜索引擎&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">41</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">45</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/12/31/hello-world/</url>
    <content><![CDATA[<h1>你好世界</h1>
]]></content>
  </entry>
  <entry>
    <title>redisson使用</title>
    <url>/2023/07/23/redisson%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>本笔记基于redisson依赖，springBoot项目环境建议使用redisson-spring-boot-starter依赖。redisson锁实现同juc包中的锁。</p>
<span id="more"></span>
<h2 id="引入依赖">引入依赖</h2>
<p>真实项目中推荐redisson-spring-boot-starter。我这里使用纯redisson依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="配置redisson">配置redisson</h2>
<p>新建MyRedissonConfig文件，此文件从nacos中的配置获取redis地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">// 动态从nacos获取（自动刷新）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;redis.address&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String redisAddress;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(destroyMethod = &quot;shutdown&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redisson</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="comment">// java.lang.NoClassDefFoundError: io/netty/channel/epoll/EpollEventLoopGroup, 需要额外引入netty依赖</span></span><br><span class="line">        <span class="comment">// config.setTransportMode(TransportMode.EPOLL);</span></span><br><span class="line">        <span class="comment">// 单体模式启动</span></span><br><span class="line">        config.useSingleServer()</span><br><span class="line">                <span class="comment">// use &quot;rediss://&quot; for SSL connection</span></span><br><span class="line">                .setAddress(<span class="string">&quot;redis://&quot;</span> + redisAddress);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>redis的地址是配置在nacos中动态获取的。见上面配置类注释。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:6379</span></span><br></pre></td></tr></table></figure>
<h2 id="redisson使用">redisson使用</h2>
<p>redisson是根据锁的名字来区分是否同一把锁的。<br>
通过<code>lock.lock(10, TimeUnit.SECONDS)</code>方法上锁，此方法可以传参过期时间，表示时间到了之后会自动释放锁，（或者手动释放锁）。即使任务没有执行完毕，锁依旧会被释放。后续在尝试手动释放锁的时候会报锁不存在错误。<br>
若不传时间参数<code>lock.lock()</code>。则锁的过期时间为30s。并且redisson的看门狗会在经过10s后自动给锁续期为30s。直到主动释放锁。假设出现硬件故障（如断电）导致程序问题主动锁释放锁失败，此时由于程序问题，看门狗不会再续期，因此时间到之后，redis中的锁会自动过期。保证了不会由于硬件问题导致的死锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取锁，根据名字区分是否同一把锁</span></span><br><span class="line">        <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redisson.getLock(<span class="string">&quot;my-lock&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 加锁</span></span><br><span class="line">        lock.lock(); <span class="comment">// 不加自动过期时间，会默认过期时间30s，看门狗会在1/3的30秒时间（即每隔10s）自动续期至30s。</span></span><br><span class="line">        <span class="comment">// lock.lock(10, TimeUnit.SECONDS); // 10秒秒后自动解锁。不会自动续期，必须保证大于业务执行时间</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;加锁成功，执行业务...&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            <span class="comment">// 模拟执行任务耗时</span></span><br><span class="line">            Thread.sleep(<span class="number">10000L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 假设解锁代码没运行，会出现死锁吗？</span></span><br><span class="line">            <span class="comment">// 不会，redisson中的看门狗会自动对锁续期，默认续期30秒，若程序中断，看门狗不会自动续期，锁会自动过期</span></span><br><span class="line">            System.out.println(<span class="string">&quot;释放锁...&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            <span class="comment">// 解锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="redisson读写锁">redisson读写锁</h2>
<p>读写锁用于读多写少的并发情况。（读多写少的数据如果不要求强一致性，只要求最终一致性，非常适合放入redis中。注意，此段括号内容说的是数据存入缓存。锁还是要的）。<br>
读写锁互斥情况：</p>
<ol>
<li>读、读：不互斥，可以并发</li>
<li>读、写：互斥，只要读锁没有释放，持有写锁的就得等待</li>
<li>写、读：互斥，只要写锁没有释放，持有读锁的就得等待</li>
<li>写、写：互斥，只要写锁没有释放，尝试获取写锁就得等待。</li>
</ol>
<p>测试代码改数据加写锁、读数据加读锁。write接口往redis中写数据，read接口从redis中读数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试读写锁，保证一定能读到最新的数据。读读不互斥；读写、写读、写写互斥</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/write&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">writeValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 同一把读写锁</span></span><br><span class="line">    <span class="type">RReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> redisson.getReadWriteLock(<span class="string">&quot;rw-lock&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取写锁</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> lock.writeLock();</span><br><span class="line">    <span class="comment">// 加写锁</span></span><br><span class="line">    rLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        s = UUID.randomUUID().toString();</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="comment">// 将数据存入redis，供获取就读锁的对象读取</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;writevlue&quot;</span>, s);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        rLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/read&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">readValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> redisson.getReadWriteLock(<span class="string">&quot;rw-lock&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取读锁</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> lock.readLock();</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    rLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从redis中读取数据</span></span><br><span class="line">        s = stringRedisTemplate.opsForValue().get(<span class="string">&quot;writevlue&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        rLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="redisson信号量">redisson信号量</h2>
<p>同juc中的Semaphore，一般用于限制流量（如果需要限流可以使用专业的限流中间件，如<a href="https://github.com/alibaba/Sentinel">GitHub - alibaba/Sentinel (面向云原生微服务的高可用流控防护组件)</a>或 <a href="https://github.com/Netflix/Hystrix">GitHub - Netflix/Hystrix</a>）。初始化Semaphore有多少个资源。每次场次acquire会将资源减1，直到资源变为0， 此时其他想要acquire的会阻塞。直到有对象release信号量，信号量+1，才能被其他尝试acquire的获取。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动设置redis中的park键的值vlue为3，表示Semaphore的上限为3.可根据需要手动设置，因此不建议直接写死在代码中。</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/park&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">park</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RSemaphore</span> <span class="variable">park</span> <span class="operator">=</span> redissonClient.getSemaphore(<span class="string">&quot;park&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取资源，Semaphore资源-1。如果Semaphore资源为0会阻塞。</span></span><br><span class="line">        <span class="comment">// 如果获取不了时需要其他操作，可以使用tryAcquire()方法。返回bool值，表示是否获取成功，若不成功，可以自定义执行逻辑。不会阻塞。</span></span><br><span class="line">        park.acquire();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;停进&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/go&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">go</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RSemaphore</span> <span class="variable">park</span> <span class="operator">=</span> redissonClient.getSemaphore(<span class="string">&quot;park&quot;</span>);</span><br><span class="line">    <span class="comment">// 释放资源，Semaphore资源+1.</span></span><br><span class="line">    park.release();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;开走&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="countdownlatch闭锁">countDownLatch闭锁</h2>
<p>同juc的countDownLatch，调用await()方法的会阻塞，直到countDown被减为0。才会执行，一般用于使多个线程的任务全部完成后，在统一处理后续操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RCountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> redisson.getCountDownLatch(<span class="string">&quot;anyCountDownLatch&quot;</span>);</span><br><span class="line"><span class="comment">// 设置countDown上限为1</span></span><br><span class="line">latch.trySetCount(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 阻塞等待其他线程执行任务后减去countDown至0。</span></span><br><span class="line">latch.await();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在其他线程或其他JVM里</span></span><br><span class="line"><span class="type">RCountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> redisson.getCountDownLatch(<span class="string">&quot;anyCountDownLatch&quot;</span>);</span><br><span class="line"><span class="comment">// 执行任务后，将countDown减去1</span></span><br><span class="line">doSomething();</span><br><span class="line">latch.countDown();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>jMeter使用</title>
    <url>/2023/05/03/jMeter%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>jMeter使用</p>
<span id="more"></span>
<h2 id="1-切换语言">1.切换语言</h2>
<p><img src="/2023/05/03/jMeter%E4%BD%BF%E7%94%A8/%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80.webp" alt="切换语言"></p>
<h2 id="2-添加线程组任务">2.添加线程组任务</h2>
<p><img src="/2023/05/03/jMeter%E4%BD%BF%E7%94%A8/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%BB%841.webp" alt="创建线程组1"></p>
<p><img src="/2023/05/03/jMeter%E4%BD%BF%E7%94%A8/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%BB%842.webp" alt="创建线程组2"></p>
<p>此处需要测试的http请求，然后按要求填写域名或ip地址，端口，请求类型，参数即可</p>
<p><img src="/2023/05/03/jMeter%E4%BD%BF%E7%94%A8/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%BB%843.webp" alt="创建线程组3"></p>
<p>需要查看结果。添加监听器。这里的监听器主要有：查看结果树、汇总报告、聚合报告、汇总图、响应时间图。主要用前三个。后面两个用于图表展示。</p>
<p><img src="/2023/05/03/jMeter%E4%BD%BF%E7%94%A8/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%BB%844.webp" alt="创建线程组4"></p>
<h2 id="3-启动">3.启动</h2>
<p>启动即可</p>
<h2 id="4-可能的端口占用异常">4.可能的端口占用异常</h2>
<p>jMeter在跑大量测试的时候，模拟并发请求都会创建一个连接占用一个端口，win给TCP/IP的链接端口为1024-5000，并且四分钟循环回收，导致短时间大量请求端口占满。</p>
<p>解决方案参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/291449056">Jmeter跑脚本端口占用问题整理 - 知乎</a></p>
<p><a href="https://blog.csdn.net/fengyuyeguirenenen/article/details/123998742">WINDOWS下JMETER端口占用问题详细解决-CSDN博客</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>三条sql语句记录</title>
    <url>/2021/01/28/%E4%B8%89%E6%9D%A1sql%E8%AF%AD%E5%8F%A5%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>几条sql语句，觉得算是很常用的，遂记录下来</p>
<span id="more"></span>
<p>所用到的表的示例大致如下(数据纯属虚构)</p>
<p><img src="/2021/01/28/%E4%B8%89%E6%9D%A1sql%E8%AF%AD%E5%8F%A5%E8%AE%B0%E5%BD%95/t_member.png" alt></p>
<h2 id="一-统计每个月的总会员数量">一、统计每个月的总会员数量</h2>
<p>这个需要在controller与业务层进行一定的逻辑，sql层只需要查询每个月的x年x月31日之前的数据即可。具体实现逻辑如下，<strong>假设查询的是近一年的每个月的会员数量：</strong></p>
<ol>
<li>在controller层通过日历对象遍历出近一年的数据放入集合中，格式为yyyy-MM;</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM&quot;</span>);</span><br><span class="line"><span class="comment">// 查询月份集合</span></span><br><span class="line">List&lt;String&gt; months = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取两个日历对象，存储开始、结束日期</span></span><br><span class="line"><span class="type">Calendar</span> <span class="variable">startTime</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"><span class="type">Calendar</span> <span class="variable">endTime</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置日历的开始结束时间</span></span><br><span class="line">startTime.setTime(sdf.parse(startTimeStr));</span><br><span class="line">endTime.setTime(sdf.parse(endTimeStr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历添加年月</span></span><br><span class="line"><span class="keyword">while</span> (startTime.before(endTime)) &#123;</span><br><span class="line">    months.add(sdf.format(startTime.getTime()));</span><br><span class="line">    startTime.add(Calendar.MONTH, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上面的循环不会加入最后一个月，手动加入</span></span><br><span class="line">months.add(sdf.format(endTime.getTime()));</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在service层遍历，并手动拼接-31日，查询该年月日之前的会员总数，在存入集合</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 集合放查询到的结果</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">null</span> != months)&#123;</span><br><span class="line">    <span class="comment">// 2020-02</span></span><br><span class="line">    <span class="keyword">for</span> (String month : months) &#123;</span><br><span class="line">        month+=<span class="string">&quot;-31&quot;</span>;</span><br><span class="line">        list.add(memberDao.findMemberCountBeforeDate(month));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>Mysql查询某个日期之前的总人数：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">from</span> t_member <span class="keyword">where</span> regTime <span class="operator">&amp;</span>lt;<span class="operator">=</span> #&#123;<span class="keyword">value</span>&#125;     ( <span class="operator">&amp;</span>lt;  &quot;&lt;&quot;的转义)</span><br></pre></td></tr></table></figure>
<h2 id="二-查询男女性别数量">二、查询男女性别数量</h2>
<ol>
<li>这个只需要在sql使用即可</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">case</span> sex <span class="keyword">when</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">when</span> <span class="string">&#x27;2&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;未知&#x27;</span> <span class="keyword">end</span> <span class="keyword">as</span> name, <span class="built_in">COUNT</span>(id) <span class="keyword">as</span> <span class="string">&#x27;value&#x27;</span> <span class="keyword">FROM</span> t_member <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>查询结果</li>
</ol>
<p><img src="/2021/01/28/%E4%B8%89%E6%9D%A1sql%E8%AF%AD%E5%8F%A5%E8%AE%B0%E5%BD%95/%E7%94%B7%E5%A5%B3%E5%8D%A0%E6%AF%94%E7%BB%93%E6%9E%9C.png" alt></p>
<h2 id="三-查询会员年龄段人数">三、查询会员年龄段人数</h2>
<p><strong>展示0-18岁，18-30岁，30-45岁，45岁以上的人数和占比。</strong></p>
<ol>
<li>由于数据库的日期是date类型的，所以between是包括右边界的，18要归纳到18-30岁，所以这里0-18岁只能between 0 and 17；后面的同理。
<ul>
<li>注：如果是datetime类型，是不过包括右边界的，所以可以用0 between 18；</li>
</ul>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> (<span class="keyword">case</span></span><br><span class="line">	<span class="keyword">when</span> a.age <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">18</span> <span class="keyword">then</span> &quot;0-18岁&quot;</span><br><span class="line">	<span class="keyword">when</span> a.age <span class="keyword">between</span> <span class="number">18</span> <span class="keyword">and</span> <span class="number">30</span> <span class="keyword">then</span> &quot;18-30岁&quot;</span><br><span class="line">	<span class="keyword">when</span> a.age <span class="keyword">between</span> <span class="number">31</span> <span class="keyword">and</span> <span class="number">45</span> <span class="keyword">then</span> &quot;30-45岁&quot;</span><br><span class="line">	<span class="keyword">when</span> a.age <span class="operator">&gt;=</span> <span class="number">45</span> <span class="keyword">then</span> &quot;45岁以上&quot;</span><br><span class="line">	<span class="keyword">end</span>) <span class="keyword">as</span> name,		<span class="comment">-- 设置各个年龄段</span></span><br><span class="line">	<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> <span class="keyword">value</span>,	 <span class="comment">-- 设置各个年龄段的人数 </span></span><br><span class="line">	<span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">/</span>(<span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">from</span> t_member) <span class="keyword">as</span> proportion 	<span class="comment">-- 设置各个年龄段的占比</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> timestampdiff(<span class="keyword">year</span>, birthday,date_format(now(), <span class="string">&#x27;%y-%m-%d&#x27;</span>)) <span class="keyword">as</span> age <span class="keyword">from</span> t_member) <span class="keyword">as</span> a </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> name;		<span class="comment">-- 查询年龄</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>查询结果</li>
</ol>
<p><img src="/2021/01/28/%E4%B8%89%E6%9D%A1sql%E8%AF%AD%E5%8F%A5%E8%AE%B0%E5%BD%95/%E5%B9%B4%E9%BE%84%E5%8D%A0%E6%AF%94%E7%BB%93%E6%9E%9C.png" alt></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>不使用链表的散列</title>
    <url>/2022/04/17/%E4%B8%8D%E4%BD%BF%E7%94%A8%E9%93%BE%E8%A1%A8%E7%9A%84%E6%95%A3%E5%88%97/</url>
    <content><![CDATA[<p>《数据结构与算法分析Java语言描述》第五章5.4节<strong>读书笔记</strong></p>
<span id="more"></span>
<p>  分离链接法的缺点是使用了散列表，给这些新单元分配地址需要时间，导致算法速度有些减慢。另一种不使用链表的解决方法是尝试另外一些单元，直到找出单元为止。常见的是单元<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mn>0</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>h</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>h</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">h_0(x),h_1(x),h_2(x),...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span>相继被试选，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>h</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mspace width="1em"><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>T</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mspace></mspace></mrow><annotation encoding="application/x-tex">h_i(x) = (hash(x) + f(i)) \quad mod \quad TableSize</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span></span></span></span>，且f(0) =  0。函数f是冲突解决方法。一般来说其装填因子<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi><mo>=</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">\lambda = 0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>。这样的表叫做<strong>探测散列表</strong>。</p>
<h3 id="5-4-1-线性探测法">5.4.1 线性探测法</h3>
<p>  线性探测法中，冲突解决函数f是i的线性函数，典型的是f(i) = i (i &gt;= 0, i++)。这相当于冲突时，从冲突的地址+i，i从0递增，直到找到一个空的位置插入。如下是对于一个长度为10的散列表插入[89, 18, 49, 58, 69]时的情况。解决冲突的函数是f(i) = i。</p>
<img src="/2022/04/17/%E4%B8%8D%E4%BD%BF%E7%94%A8%E9%93%BE%E8%A1%A8%E7%9A%84%E6%95%A3%E5%88%97/使用线性探测法插入散列表.png" alt="使用线性探测法插入散列表" style="zoom: 67%;">
<p>  第一次冲突是在插入49时出现冲突(hash(x) = x)，根据冲突解决公式,h(49)=(hash(49) + 1) mod 10时。冲突解决，结束，49放入该位置。第二次是插入58时出现冲突，h(58) = (hash(58) + 3) mod 10时。冲突解决。由上可知，每次冲突出现时，只需要沿着冲突的位置继续向下寻找可用位置，直到解决冲突即可。只要表足够大，总可以找到一个空位置。但是可能花费较多的时间。另外，占据的单元会开始形成一些区块，其结果称为<strong>一次聚集</strong>。当出现冲突后，可能会需要多次试选才能解决冲突。<br>
  可以得到证明，（证明较为复杂）。使用线性探测，预期探测次数对于插入和不成功查找约为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>λ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{1}{2} (1 + \frac{1}{(1- \lambda)^2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">λ</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>，而成功的查找来说则是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>λ</mi></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{1}{2} (1 + \frac{1}{1- \lambda})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">λ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>。则插入与不成功查找的需要相同的次数，成功查找的次数比不成功查找的平均花费时间较少。<br>
  如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi><mo>=</mo><mn>0.75</mn></mrow><annotation encoding="application/x-tex">\lambda = 0.75</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">7</span><span class="mord">5</span></span></span></span>，则上述公式预计线性一次插入需8.5次探测，如过0.9，则需要50次探测。由此可以看到，如果表有超过一半被装填满的时候，线性探测法不是一个好的方法。</p>
<h3 id="5-4-2-平方探测法">5.4.2 平方探测法</h3>
<p>  平方探测法是为了解决线性探测法的<strong>一次聚集</strong>问题。较为流行的选择<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>i</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">f(i) = i^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，这相当于冲突时，加<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>i</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">i^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，i从0开始递增，如下图，当49与89冲突时，放入0位置。下次58放入时，则按公式依次选择后，放入2位置。</p>
<img src="/2022/04/17/%E4%B8%8D%E4%BD%BF%E7%94%A8%E9%93%BE%E8%A1%A8%E7%9A%84%E6%95%A3%E5%88%97/使用平方探测法插入散列表.png" alt="使用平方探测法插入散列表" style="zoom:67%;">
<p>  对于平方探测法，一旦表的填充超过一半，则不够好。特别的，如果表的大小不是素数，在被填充一半之前，就不能一次找到空的单元了，证明如下。</p>
<blockquote>
<p>定理5.1：如果使用平方探测法，且表的大小是素数，那么当表小于一半的时候，总能够插入一个元素。</p>
</blockquote>
<p>证明：采用反证法</p>
<p>  令表的大小TableSize是一个大于3的素数，证明前TableSize/2个备选位置是互异的。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><msup><mi>i</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>T</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">)</mo></mspace></mrow><annotation encoding="application/x-tex">h(x) + i^2(mod \quad TableSize)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><msup><mi>j</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>T</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">)</mo></mspace></mrow><annotation encoding="application/x-tex">h(x) + j^2(mod \quad TableSize)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span>是这些位置的其中两个，其中0 &lt;= , j &lt;= TableSize/2 (注意会向下取整，且tableSize是素数)。为推出矛盾，我们假设前两个位置相同，但<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo mathvariant="normal">≠</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">i \ne j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>，于是有</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><msup><mi>i</mi><mn>2</mn></msup><mo>=</mo><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><msup><mi>j</mi><mn>2</mn></msup><mspace width="2em"><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>T</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">)</mo></mspace></mspace></mrow><annotation encoding="application/x-tex">h(x) + i^2 = h(x) + j ^2 \qquad (mod \quad TableSize)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>i</mi><mn>2</mn></msup><mo>=</mo><msup><mi>j</mi><mn>2</mn></msup><mspace width="2em"><mspace width="2em"><mspace width="2em"><mspace width="2em"><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>T</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">)</mo></mspace></mspace></mspace></mspace></mspace></mrow><annotation encoding="application/x-tex">i^2 = j^2 \qquad \qquad \qquad \qquad (mod \quad TableSize)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mspace width="2em"><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>T</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">)</mo></mspace></mspace></mrow><annotation encoding="application/x-tex">(i-j) + (i + j) = 0 \qquad (mod \quad TableSize)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span></span></p>
<p>由于TableSize是素数，要么i - j = 0，要么i+j=0。由于i，j互异，则第一个选择不可能，又因为0 &lt;= i，j &lt;= tableSIze/2，则第二个选择不可能。从而，前tableSize/2个备选位置都是互异的。则推出如上定理5.1。</p>
<p>  即使表的填充位置只比一半多一个，则也可能插入失败。同时删除操作不能执行，因为相应的单元可能已经引起冲突，元素绕过它存在了别处，那么所有剩下的contains操作都会失败，因此探测表散列需要惰性删除，<br>
  探测表散列的大部分实现如下，此处不使用链表数组，使用单元数组HashEntry，其每一项有下列三种情形：</p>
<ol>
<li>null</li>
<li>非null，且该项是活动的（isActive 为true）</li>
<li>非null，且该项已被标记删除（isActive 为false）</li>
</ol>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>平方探测法的实现（展开）</span></div>
    <div class="xContent"><div class="inner">
        <p>ps: 判断是否时素数<code>isPrime()</code>方法，平方探测<code>findPos()</code>具体后移动平方的实现方法，这两个方法经典。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuadraticProbingHashTable</span>&lt;AnyType&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_TABLE_SIZE</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">private</span> HashEntry&lt;AnyType&gt;[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> currentSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">QuadraticProbingHashTable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 调用另一个构造方法，需要传参数的那个构造方法。</span></span><br><span class="line">        <span class="built_in">this</span>(DEFAULT_TABLE_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">QuadraticProbingHashTable</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        allocateArray(size);</span><br><span class="line">        makeEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        currentSize = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 将所有元素置null</span></span><br><span class="line">        Arrays.fill(array, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化HashEntry数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arraySize 给定的HashEntry数组的大小，会自动调整为素数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">allocateArray</span><span class="params">(<span class="type">int</span> arraySize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = <span class="keyword">new</span> <span class="title class_">HashEntry</span>[nextPrime(arraySize)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(AnyType x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">currentPos</span> <span class="operator">=</span> findPos(x);</span><br><span class="line">        <span class="keyword">return</span> isActive(currentPos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">capacity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 插入的元素x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否插入成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(AnyType x)</span> &#123;</span><br><span class="line">        <span class="comment">// findPos会按平方探测法找到一个没有被占用的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">currentPos</span> <span class="operator">=</span> findPos(x);</span><br><span class="line">        <span class="keyword">if</span> (isActive(currentPos)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入（数组）</span></span><br><span class="line">        array[currentPos] = <span class="keyword">new</span> <span class="title class_">HashEntry</span>&lt;&gt;(x, <span class="literal">true</span>);</span><br><span class="line">        currentSize++;</span><br><span class="line">        <span class="comment">// 平方探测法超过一半需要扩容并rehash</span></span><br><span class="line">        <span class="keyword">if</span> (currentPos &gt; array.length / <span class="number">2</span>) &#123;</span><br><span class="line">            rehash();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 被删除的元素x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否删除成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(AnyType x)</span> &#123;</span><br><span class="line">        <span class="comment">// 查找到元素的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">currentPos</span> <span class="operator">=</span> findPos(x);</span><br><span class="line">        <span class="keyword">if</span> (isActive(currentPos)) &#123;</span><br><span class="line">            <span class="comment">// 标记为被删除</span></span><br><span class="line">            array[currentPos].isActive = <span class="literal">false</span>;</span><br><span class="line">            currentSize--;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩容并拷贝到新数组，注意此处惰性删除的元素会被真正的删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">()</span> &#123;</span><br><span class="line">        HashEntry&lt;AnyType&gt;[] oldArray = array;</span><br><span class="line">        allocateArray(<span class="number">2</span> * oldArray.length);</span><br><span class="line">        currentSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (HashEntry&lt;AnyType&gt; entry : oldArray) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry != <span class="literal">null</span> &amp;&amp; entry.isActive) &#123;</span><br><span class="line">                insert(entry.element);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询元素的节点位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 元素x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 元素所在位置的下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">findPos</span><span class="params">(AnyType x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 通过hash计算出节点的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">currentPos</span> <span class="operator">=</span> myHash(x);</span><br><span class="line">        <span class="comment">// 如果节点不为空且不相等，则需要继续往后找</span></span><br><span class="line">        <span class="keyword">while</span> (array[currentPos] != <span class="literal">null</span> &amp;&amp; !array[currentPos].element.equals(x)) &#123;</span><br><span class="line">            <span class="comment">// 这里实现了平方探测查找，首先currentPos + 1, currentPos + 1 + 3; currentPos + 1 + 3 + 5...</span></span><br><span class="line">            currentPos += offset;</span><br><span class="line">            offset += <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 实现环行查找</span></span><br><span class="line">            <span class="keyword">if</span> (currentPos &gt;= array.length) &#123;</span><br><span class="line">                currentPos -= array.length;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> currentPos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点是否激活</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentPos 节点位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果节点被激活（没有被惰性删除）返回true, 否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isActive</span><span class="params">(<span class="type">int</span> currentPos)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array[currentPos] != <span class="literal">null</span> &amp;&amp; array[currentPos].isActive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">myHash</span><span class="params">(AnyType x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hashVal</span> <span class="operator">=</span> x.hashCode();</span><br><span class="line">        hashVal %= array.length;</span><br><span class="line">        <span class="keyword">if</span> (hashVal &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            hashVal += array.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hashVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传说的数获取素数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arraySize 素数的大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 新的素数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nextPrime</span><span class="params">(<span class="type">int</span> arraySize)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arraySize % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            arraySize++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!isPrime(arraySize)) &#123;</span><br><span class="line">            arraySize += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arraySize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断一个正整数是否是素数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n  数n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 素数：true;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">( <span class="type">int</span> n )</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( n == <span class="number">2</span> || n == <span class="number">3</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( n == <span class="number">1</span> || n % <span class="number">2</span> == <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i * i &lt;= n; i += <span class="number">2</span> ) &#123;</span><br><span class="line">            <span class="keyword">if</span>( n % i == <span class="number">0</span> ) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashEntry内部内，用来存储HashTable的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;AnyType&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HashEntry</span>&lt;AnyType&gt; &#123;</span><br><span class="line">        <span class="keyword">public</span> AnyType element;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果被惰性删除则为false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> isActive;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">HashEntry</span><span class="params">(AnyType element)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.element = element;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">HashEntry</span><span class="params">(AnyType element, <span class="type">boolean</span> isActive)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.element = element;</span><br><span class="line">            <span class="built_in">this</span>.isActive = isActive;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<p>  平方探测法解决了<strong>一次聚集</strong>，但是散列(计算到插入同一位置)到同一位置时，将继续往后探索相同的备选单元。这称为二次聚集。下面的双散列将解决这个问题，代价是要计算一个附加的散列函数。</p>
<h3 id="5-4-3-双散列">5.4.3 双散列</h3>
<p>  双散列简单来说就是采取两个散列函数，其中一个散列计算具体的落入的位置，第二个散列是在冲突后，要从冲突的位置移动的步长。例如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mi>a</mi><mi>s</mi><msub><mi>h</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>t</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">hash_1(x) = x \ \ mod \ \ tableSize</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span></span></span></span>（tableSize必须为素数），<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mi>a</mi><mi>s</mi><msub><mi>h</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>R</mi><mo>−</mo><mo stretchy="false">(</mo><mi>x</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">hash_2(x) = R - (x \ mod \ R)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span>，（R必须为素数）。</p>
<p>  这里取tableSize = 10（计算方便），R = 7（小于tableSize 的素数）。首先89存入，下标9的位置没有冲突，直接存入，不计算散列函数2。假设再49插入时计算散列函数1，发现插入位置9发生冲突，需要计算散列函数2，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mi>a</mi><mi>s</mi><msub><mi>h</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mn>49</mn><mo stretchy="false">)</mo><mo>=</mo><mn>7</mn><mo>−</mo><mo stretchy="false">(</mo><mn>49</mn><mtext> </mtext><mi mathvariant="normal">%</mi><mtext> </mtext><mn>7</mn><mo stretchy="false">)</mo><mo>=</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">hash_2(49) = 7 - (49 \ \% \ 7) = 7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">4</span><span class="mord">9</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">4</span><span class="mord">9</span><span class="mspace"> </span><span class="mord">%</span><span class="mspace"> </span><span class="mord">7</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span>。从9开始，移动7个步长，所以移动到6的位置。</p>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找的细节实现</title>
    <url>/2021/10/31/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9A%84%E7%BB%86%E8%8A%82%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>二分查找的一些细节</p>
<span id="more"></span>
<h2 id="1-什么是二分查找">1. 什么是二分查找</h2>
<blockquote>
<p>对于已经排序的表(假设该表是升序)，，假设目标值在闭区间<code>[l, r]</code>中， 每次将区间长度缩小一半，当<code>l = r</code>时，我们就找到了目标值。</p>
</blockquote>
<h2 id="2-二分查找容易遇到的问题">2. 二分查找容易遇到的问题</h2>
<p>  二分查找原理简单，但是如果细节处理不好，容易出现错误答案，甚至是死循环的结果。网上给出的模板甚多，这里只给出Y大的模板。如下</p>
<h2 id="3-模板">3. 模板</h2>
<p>  原模板是C++版，如下已改为java版。</p>
<h3 id="3-1-给出要查找数的左边界">3.1 给出要查找数的左边界</h3>
<blockquote>
<p>如要查找升序数组中数4第一次出现的位置：[3, 3 , 4, 4, 4, 4, 4, 6, 8, 9]，结果应该为2；<br>
如查找升序数组中第一个大于4(大于4的数中的左边界)的数：[3, 3 , 4, 4, 4, 4, 4, 6, 6, 8, 9 ]，结果应该为7;<br>
注意第二种情况，并不是找4，找大于4的数，所以是大于4的数左边界。</p>
</blockquote>
<p>  当我们将区间<code>[l, r]</code>划分成<code>[l, mid]</code>和<code>[mid + 1, r]</code>时，其更新操作是<code>r = mid</code>(取被划分的左区间)，或者<code>l = mid + 1</code>(取被划分的右区间)，计算<code>mid</code>时不需要加1。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 如果满足在左子表的条件</span></span><br><span class="line">        <span class="keyword">if</span> (check(mid)) &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 取右子列表</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 跳出循环时l=r,返回哪个都一样</span></span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-给出要查找数的右边界">3.2 给出要查找数的右边界</h3>
<blockquote>
<p>如要查找升序数组中数4第最后一次出现的位置：[3, 3 , 4, 4, 4, 4, 4, 6, 8, 9]，结果应该为6；<br>
如查找升序数组中最后一个小于4(小于4的数当中的右边界)的数：[3, 3 , 4, 4, 4, 4, 4, 6, 6, 8, 9 ]，结果应该为1;<br>
注意第二种情况，并不是找4，找小于4的数，所以是小于4的右边界。</p>
</blockquote>
<p>  当我们将区间<code>[l, r]</code>划分成<code>[l, mid - 1]</code>和<code>[mid, r]</code>时，其更新操作是<code>r = mid - 1</code>或者<code>l = mid</code>，此时为了防止死循环，计算mid时需要加1。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearch2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 如果满足在右子表的条件</span></span><br><span class="line">        <span class="keyword">if</span> (check(mid)) &#123;</span><br><span class="line">            l = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 取左子表</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 跳出循环时l=r,返回哪个都一样</span></span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-总结">4. 总结</h2>
<h3 id="4-1-如何选择模板">4.1 如何选择模板</h3>
<p>  假设答案为N, 满足条件的数为o，不满足条件的数为x，<br>
当数组为<code>xxxxNoooo</code>，这时答案为所有符合条件的值的最左边，所以应该使用第一种左边界的模板。<br>
当数组为<code>oo0oNxxxx</code>，这时答案为所有符和条件的值的最右边，所以应该使用第二种右边界的模板。</p>
<h3 id="4-2-记忆">4.2 记忆</h3>
<p>确定左边界模板：</p>
<ol>
<li>左边界：mid = (l + r) &gt;&gt; 1</li>
<li>满足条件选左子表，if(check(mid)) { r = mid } ; check满足的条件下，直接=mid，不需要+1。</li>
<li>不满足条件，l = mid + 1；(如果是要右区间，l = mid + 1；如果要左区间，r = mid - 1)。</li>
</ol>
<p>确定右边界模板：</p>
<ol>
<li>左边界：mid = (l + r + 1) &gt;&gt; 1</li>
<li>满足条件选右子表，if(check(mid)) { l = mid } ; check满足的条件下，直接=mid，不需要+1。</li>
<li>不满足条件，r = mid - 1；(如果是要右区间，l = mid + 1；如果要左区间，r = mid - 1)。</li>
</ol>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉查找树与AVL树</title>
    <url>/2021/10/23/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E4%B8%8EAVL%E6%A0%91/</url>
    <content><![CDATA[<p>《数据结构与算法分析Java语言描述》第二章4.3与4.4节<strong>读书笔记</strong></p>
<span id="more"></span>
<h2 id="4-3-二叉查找树">4.3 二叉查找树</h2>
<blockquote>
<p>树的节点存储数据，一棵非空树要成为查找树，则对于任意节点x有：x的左子树都小于它，右子树节点都大于它。<br>
二叉查找树的平均深度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，证明可网上查询。可以使用递归实现，不必担心栈溢出。或见4.3.5小节</p>
</blockquote>
<p>如下是一个二叉查找树的实现，其中BinaryNode是一个内部类，用来实现节点。</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>二叉查找树主代码实现(点击展开)</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一棵二叉查找树</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/23</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearchTree</span>&lt;AnyType&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BinaryNode&lt;AnyType&gt; root;</span><br><span class="line">    <span class="comment">// 比较器</span></span><br><span class="line">    <span class="keyword">private</span> Comparator cmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinarySearchTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带比较器的构造方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c 构造器传入的比较器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinarySearchTree</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> AnyType&gt; c)</span> &#123;</span><br><span class="line">        root = <span class="literal">null</span>;</span><br><span class="line">        cmp = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行比较</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">myCompare</span><span class="params">(AnyType lhs, AnyType rhs)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cmp != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果传入了比较器，则使用传入的比较器进行比较</span></span><br><span class="line">            <span class="keyword">return</span> cmp.compare(lhs, rhs);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果没用，则强制转为Compareable, 如果报错，说明不可转，则也应该直接抛出异常</span></span><br><span class="line">            <span class="keyword">return</span> ((Comparable) lhs).compareTo(rhs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.root == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(AnyType x)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> contains(x, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AnyType <span class="title function_">findMax</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BufferUnderflowException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> findMax(root).element;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AnyType <span class="title function_">findMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BufferUnderflowException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> findMin(root).element;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(AnyType x)</span> &#123;</span><br><span class="line">        root = insert(x, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(AnyType x)</span> &#123;</span><br><span class="line">        root = remove(x, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// todo</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归判断树中是否包含项为x节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 需要查找的数据x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 二叉查找树的根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果树存在元素x返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(AnyType x, BinaryNode&lt;AnyType&gt; t)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果节点为null，终止递归，该递归是尾递归(可以使用尾递归的原因是该递归很明显栈深为O(logN))</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查找的元素与根节点比较</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">compareResult</span> <span class="operator">=</span> myCompare(x, t.element);</span><br><span class="line">        <span class="comment">// 如果x比根节点小，则继续找左子树</span></span><br><span class="line">        <span class="keyword">if</span> (compareResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> contains(x, t.left);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compareResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果x比根节点大，则继续找右子树</span></span><br><span class="line">            <span class="keyword">return</span> contains(x, t.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// x等于根节点，返回true，跳出递归</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归查询二叉查找树的最小的元素</span></span><br><span class="line">    <span class="keyword">private</span> BinaryNode&lt;AnyType&gt; <span class="title function_">findMin</span><span class="params">(BinaryNode&lt;AnyType&gt; t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 尾递归的出口，最深的左子节点即为最小元素，尾递归可以改为如下while循环</span></span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> findMin(t.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非递归查询二叉查找树的最大的元素</span></span><br><span class="line">    <span class="keyword">private</span> BinaryNode&lt;AnyType&gt; <span class="title function_">findMax</span><span class="params">(BinaryNode&lt;AnyType&gt; t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (t.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                t = t.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将元素插入二叉查找树 （注意，该二叉查找树不是平衡的，该例都是插入到叶子结点后(不需要平衡)），建议手画理解</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 要插入的元素x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 该二叉查找树的根节点，用来确定是哪一棵树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> t：插入的二叉树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BinaryNode&lt;AnyType&gt; <span class="title function_">insert</span><span class="params">(AnyType x, BinaryNode&lt;AnyType&gt; t)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归出栈条件：如果递归结果的根节点为null，则说明可以此处插入</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BinaryNode</span>&lt;&gt;(x, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">compareResult</span> <span class="operator">=</span> myCompare(x, t.element);</span><br><span class="line">        <span class="keyword">if</span> (compareResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 此处说明递归：如果x比root小，则root.left 作为新的root进行递归调用，记作rootL，进入递归后，如果为null</span></span><br><span class="line">            <span class="comment">// 则说明此处为插入点，返回一个new BinaryNode(出栈条件)，跳出底层递归，此时t.left进行接收，从而实现插入</span></span><br><span class="line">            <span class="comment">// 注意此处的左侧的t.left的t，是由insert递归传入的，可以是上面说的rootL，t.left实际上确定了。t的left指针指向哪一个节点</span></span><br><span class="line">            t.left = insert(x, t.left);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compareResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            t.right = insert(x, t.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果要插入的元素与二叉查找树的某个元素相同(可以将相同的元素保留在另一个结果当中)</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此处的情况是，当t != null才能走到这里，每一层递归，返回的是root,用于上述的t.left或t.right</span></span><br><span class="line">        <span class="comment">// 递归到最后返回到第一次的时候，则为初始传入的t的根节点</span></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从二叉查找树中删除元素x(注意：该二叉查找树不是平衡的，对于删除的节点只有一个，则直接移动这唯一的一个节点上去)</span></span><br><span class="line"><span class="comment">     * 对于有两个子节点的，该例x节点删除后，移动上去的都是x节点的右子树的最小的节点(该节点不可能有左子树))，然后递归的删除移动上去的节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 要删除的节点x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 二叉查找树的根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> t 二叉查找树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BinaryNode&lt;AnyType&gt; <span class="title function_">remove</span><span class="params">(AnyType x, BinaryNode&lt;AnyType&gt; t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">compareResult</span> <span class="operator">=</span> myCompare(x, t.element);</span><br><span class="line">        <span class="keyword">if</span> (compareResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            t.left = remove(x, t.left);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compareResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            t.right = remove(x, t.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.left != <span class="literal">null</span> &amp;&amp; t.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 找到了要删除的元素，要删除的元素有两个子节点</span></span><br><span class="line">            <span class="comment">// 找到该节点作为root的子树的最小的节点的值，赋给该节点(用最小的元素替换删除的节点)</span></span><br><span class="line">            t.element = findMin(t.right).element;</span><br><span class="line">            <span class="comment">// 该节点的右子树也要删除刚刚最小的元素(刚刚替换上去的元素)</span></span><br><span class="line">            t.right = remove(t.element, t.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 只有一个子节点或没有子节点的情况，直接将子节点移动到删除的节点上去(两个子节点为null则为null)</span></span><br><span class="line">            t = t.left != <span class="literal">null</span> ? t.left : t.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归最终会返回传入的根节点</span></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BinaryNode</span>&lt;AnyType&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> AnyType element;</span><br><span class="line">        <span class="keyword">public</span> BinaryNode&lt;AnyType&gt; left;</span><br><span class="line">        <span class="keyword">public</span> BinaryNode&lt;AnyType&gt; right;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 构造一个节点，同时知名左子节点与右子节点</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> element 当前节点存储的元素</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> left    左子节点</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> right   右子节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BinaryNode</span><span class="params">(AnyType element, BinaryNode&lt;AnyType&gt; left, BinaryNode&lt;AnyType&gt; right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.element = element;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 构造一个只有节点，无左子节点的，无右子节点的数据</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> element 当前节点存储的数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BinaryNode</span><span class="params">(AnyType element)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.element = element;</span><br><span class="line">            <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="4-3-0-节点元素的比较实现">4.3.0 节点元素的比较实现</h3>
<p>  二叉查找树是有序的，因此必须使存储的元素是可以比较的，要使一个类是可以比的，有两种实现方式，1种是实现Comparable接口，另一种是令其传入Comparator比较器。这里选择了第二种，通过构造方法传入比较器。如果没有传入比较器，则内部将类强转为Comparable的，如果是不可比的，这时会抛出异常。(因为查找树是必须有序的，所以不可比也应该抛出异常)。</p>
<h3 id="4-3-1-contains方法">4.3.1 contains方法</h3>
<p>  该方法返回是否包含某个x元素，返回true或false，如果树t是空集，则返回false，如果x比t小，则继续查找左子树，否则继续查找右子树，直到查找到一个节点为null的点，说明没有。这使用递归实现。完整实例77-101行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归判断树中是否包含项为x节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 需要查找的数据x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 二叉查找树的根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果树存在元素x返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(AnyType x, BinaryNode&lt;AnyType&gt; t)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果节点为null，终止递归，该递归是尾递归(可以使用尾递归的原因是该递归很明显栈深为O(logN))</span></span><br><span class="line">    <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查找的元素与根节点比较</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">compareResult</span> <span class="operator">=</span> myCompare(x, t.element);</span><br><span class="line">    <span class="comment">// 如果x比根节点小，则继续找左子树</span></span><br><span class="line">    <span class="keyword">if</span> (compareResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> contains(x, t.left);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compareResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果x比根节点大，则继续找右子树</span></span><br><span class="line">        <span class="keyword">return</span> contains(x, t.right);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// x等于根节点，返回true，跳出递归</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-2-findmin与findmax方法">4.3.2 findMin与findMax方法</h3>
<p>  此两个方法，分别返回树种的最小的节点与最大的节点。对于最小节点，从root节点开始，向左子树查找，只要有左儿子就向左进行，如果左儿子节点为null，说明该节点最小元素。对于最大节点，从root节点开始，向右子树查找，只要有右儿子就向右进行，其余同查找最小节点。完整实例103-122行。<br>
  findMIn的实现使用的尾递归，即在尾部只实现对自身的递归调用，而且无其他处理，尾递归一把会被编译器优化，但是建议写成findMax的循环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归查询二叉查找树的最小的元素</span></span><br><span class="line"><span class="keyword">private</span> BinaryNode&lt;AnyType&gt; <span class="title function_">findMin</span><span class="params">(BinaryNode&lt;AnyType&gt; t)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.left == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 尾递归的出口，最深的左子节点即为最小元素，尾递归可以改为如下while循环</span></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> findMin(t.left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非递归查询二叉查找树的最大的元素</span></span><br><span class="line"><span class="keyword">private</span> BinaryNode&lt;AnyType&gt; <span class="title function_">findMax</span><span class="params">(BinaryNode&lt;AnyType&gt; t)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (t.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            t = t.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-3-insert方法">4.3.3 insert方法</h3>
<p>  该方法实现了在树中插入一个元素，然后返回该树的root节点(通过该节点可以获取到整棵树)。由于该树不是平衡的二叉查找树，该方法使用了简单的将将元素插入到叶子节点末端。如果插入的节点比root节点小，则继续与左子树的root节点比较，重复该步骤，直到某个叶子节点，与该叶子节点比较，如果小于，获取该叶子节点的左子节点，如果节点为null，则在null的地方插入；如果大于，获取该叶子节点的右子节点，如果节点为null，则在null的地方插入。完整实例124-151。<br>
  该方法是一个递归实现，注意递归较难理解，建议手动推导递归理解，理解每一层递归出栈的数据，后续怎么接收。以及最终结果返回的t的数据的具体含义。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将元素插入二叉查找树 （注意，该二叉查找树不是平衡的，该例都是插入到叶子结点后(不需要平衡)），建议手画理解</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 要插入的元素x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 该二叉查找树的根节点，用来确定是哪一棵树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> t：插入的二叉树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> BinaryNode&lt;AnyType&gt; <span class="title function_">insert</span><span class="params">(AnyType x, BinaryNode&lt;AnyType&gt; t)</span> &#123;</span><br><span class="line">    <span class="comment">// 递归出栈条件：如果递归结果的根节点为null，则说明可以此处插入</span></span><br><span class="line">    <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BinaryNode</span>&lt;&gt;(x, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">compareResult</span> <span class="operator">=</span> myCompare(x, t.element);</span><br><span class="line">    <span class="keyword">if</span> (compareResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 此处说明递归：如果x比root小，则root.left 作为新的root进行递归调用，记作rootL，进入递归后，如果为null</span></span><br><span class="line">        <span class="comment">// 则说明此处为插入点，返回一个new BinaryNode(出栈条件)，跳出底层递归，此时t.left进行接收，从而实现插入</span></span><br><span class="line">        <span class="comment">// 注意此处的左侧的t.left的t，是由insert递归传入的，可以是上面说的rootL，t.left实际上确定了。t的left指针指向哪一个节点</span></span><br><span class="line">        t.left = insert(x, t.left);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compareResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        t.right = insert(x, t.right);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果要插入的元素与二叉查找树的某个元素相同(可以将相同的元素保留在另一个结果当中，或者什么也不做)</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此处的情况是，当t != null才能走到这里，每一层递归，返回的是root,用于上述的t.left或t.right</span></span><br><span class="line">    <span class="comment">// 递归到最后返回到第一次的时候，则为初始传入的t的根节点</span></span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-4-remove方法">4.3.4 remove方法</h3>
<p>  如果要删除的节点是叶子节点x，则直接删除，如果x只有一个子节点，则直接将x的子节点移动到删除的节点x即可。如果x有两个子节点，则将右子树的最小节点移动上去，然后对于右子树，继续将移动上去的元素删除，直到节点为null，则代表子树要删除的元素为null，此时跳出递归。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从二叉查找树中删除元素x(注意：该二叉查找树不是平衡的，对于删除的节点只有一个，则直接移动这唯一的一个节点上去)</span></span><br><span class="line"><span class="comment">     * 对于有两个子节点的，该例x节点删除后，移动上去的都是x节点的右子树的最小的节点(该节点不可能有左子树))，然后递归的删除移动上去的节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 要删除的节点x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 二叉查找树的根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> t 二叉查找树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> BinaryNode&lt;AnyType&gt; <span class="title function_">remove</span><span class="params">(AnyType x, BinaryNode&lt;AnyType&gt; t)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">compareResult</span> <span class="operator">=</span> myCompare(x, t.element);</span><br><span class="line">    <span class="keyword">if</span> (compareResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        t.left = remove(x, t.left);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compareResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        t.right = remove(x, t.right);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.left != <span class="literal">null</span> &amp;&amp; t.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 找到了要删除的元素，要删除的元素有两个子节点</span></span><br><span class="line">        <span class="comment">// 找到该节点作为root的子树的最小的节点的值，赋给该节点(用最小的元素替换删除的节点)</span></span><br><span class="line">        t.element = findMin(t.right).element;</span><br><span class="line">        <span class="comment">// 该节点的右子树也要删除刚刚最小的元素(刚刚替换上去的元素)</span></span><br><span class="line">        t.right = remove(t.element, t.right);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 只有一个子节点或没有子节点的情况，直接将子节点移动到删除的节点上去(两个子节点为null则为null)</span></span><br><span class="line">        t = t.left != <span class="literal">null</span> ? t.left : t.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归最终会返回传入的根节点</span></span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/10/23/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E4%B8%8EAVL%E6%A0%91/remove%E4%B8%80%E4%B8%AA%E5%AD%90%E8%8A%82%E7%82%B9%E4%B8%8E%E4%B8%A4%E4%B8%AA%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%E6%83%85%E5%86%B5.webp" alt="remove一个子节点与两个子节点的情况"></p>
<ul>
<li>删除的节点4只有一个子节点：直接将子节点3移动到删除的节点即可。(将节点2的指针指向子节点)</li>
<li>删除的节点2两个子节点：将2的值改为右子树的最小的元素3，(注意，此时的原本的3的元素节点并没有删除)，然后将右子树中的3的节点按照此逻辑递归删除。</li>
<li>如果删除的次数不多，则使用惰性删除，当元素被删除时，只是被标记删除，仍然留在树中。</li>
</ul>
<h3 id="4-3-5-平均查找深度">4.3.5 平均查找深度</h3>
<blockquote>
<p>树的节点平均深度为O(logN)。一棵树的所有节点的深度的和为<strong>内部路径长</strong>。<br>
(如上图4-23：(6-&gt;2) + ((6-&gt;2) + (2-&gt;1)) + ((6-&gt;2) + (2-&gt;4)) + ((6-&gt;2) + (2-&gt;4) + (4-&gt;3)) + (6-&gt;8) = 9路径长<br>
深度计算：1 + (1 + 1) + (1+1) + (1+1+1) + 1 = 9路径长</p>
</blockquote>
<p>令D(N)是具有N个节点的树T的内部路径长，则D(1) = 0。一棵N节点的树由一棵i节点的左子树和一棵（N-i-1）节点的右子树组成。则D(N) = D(i) + D(N-i-1)，但是因为在原树中，左右子树的所有节点深度会被加一，因此需要加 N - 1。则递推公式：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>D</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>+</mo><mi>D</mi><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">D(N) = D(i) + D(N-i-1) + N - 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<p>对于二叉查找树，所有子树大小都等可能出现，则有D(i)与D(N-i-1)的平均值是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><mo stretchy="false">)</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>D</mi><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\frac{1}{N}) \sum_{j=0}^{N-1}D(j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.417049em;vertical-align:-0.43581800000000004em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span>。于是有</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>2</mn><mi>N</mi></mfrac><mo stretchy="false">[</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></munderover><mi>D</mi><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>+</mo><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">D(N) = \frac{2}{N}[\sum_{j=0}^{N-1}D(j)] + N - 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2421130000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">[</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<p>该值的解，可以的到平均值D(N) = O(NlogN)</p>
<h2 id="4-4-avl树">4.4 AVL树</h2>
<blockquote>
<p>AVL是一棵自平衡的二叉查找树。<br>
平衡：每个节点的左子树与右子树<strong>高度</strong>最大差为1。即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><msub><mi>H</mi><mtext>最高</mtext></msub><mo>−</mo><msub><mi>H</mi><mtext>最低</mtext></msub><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">|H_{最高}-H_{最低}| &lt;= 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">最</span><span class="mord cjk_fallback mtight">高</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">最</span><span class="mord cjk_fallback mtight">低</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，对于空树，高度定义为0</p>
</blockquote>
<p> 可以粗略证明，一棵AVL树的高度最多为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.44</mn><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo><mo>−</mo><mn>1.328</mn></mrow><annotation encoding="application/x-tex">1.44log(N+2) - 1.328</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">4</span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">3</span><span class="mord">2</span><span class="mord">8</span></span></span></span>。但实际高度只略大于log(N)。对于最少节点一棵高度为9的树，其左子树高度为7，右子树高度为8。在高度h的树中。最少节点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">)</mo><mo>=</mo><mi>S</mi><mo stretchy="false">(</mo><mi>h</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>S</mi><mo stretchy="false">(</mo><mi>h</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">S(h) = S(h-1) + S(h-2) + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。对于h=0，S(h) = 1；h=1,S(h) = 2，函数S(h)与斐波那契数列相关。因此推导出上面的高度。<br>
<img src="/2021/10/23/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E4%B8%8EAVL%E6%A0%91/二叉查找树与AVL树.webp" alt="图4-29 二叉查找树与AVL树" style="zoom: 67%;"></p>
<p>如上图，左图的左子树的高度为3(3-&gt;4-&gt;2，叶子节点3高1，4高2，2高3)，右子树的高度为2(7-&gt;8)，差为1。右图的左子树高度为3，右子树的高度为1，相差为2，不是AVL树(叶子节点的高度为0，注意与深度的区别)。‘可以简单的看作是两棵子树的最大深度相差为大于1’。<br>
  除去插入操作外(删除操作是惰性删除，不删除，只标记删除)，所有的对树的操作时间复杂度皆为O(logN)，因为插入操作会破坏树的平衡，这时需要进行旋转操作来维持树的平衡。<br>
  当一个节点插入后，任意两棵子树的高度差为2，只有插入点到根节点的平衡会被打破，因为只有这些节点的子树发生了变化。把必须平衡的节点记为a，失去平衡的情况可能会有以下四种：</p>
<ol>
<li>对a的左儿子的的左子树进行一次插入，失去平衡，左左（LL）。</li>
<li>对a的左儿子的的右子树进行一次插入，失去平衡，左右（LR）。</li>
<li>对a的右儿子的的左子树进行一次插入，失去平衡，左左（RL）。</li>
<li>对a的右儿子的的右子树进行一次插入，失去平衡，左左（RR）。</li>
</ol>
<p>  情况1是情况4的镜像对称，该情况可以通过<strong>单次旋转</strong>完成。情况2是情况3的镜像对称，该操作发生在‘内部’的情形，需要通过<strong>双旋转</strong>平衡。</p>
<h3 id="4-4-1-单旋转">4.4.1 单旋转</h3>
<h4 id="4-4-1-1-左左情况-右旋">4.4.1.1 左左情况(右旋)</h4>
<p><img src="/2021/10/23/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E4%B8%8EAVL%E6%A0%91/%E8%B0%83%E6%95%B4%E6%83%85%E5%86%B51%E7%9A%84%E5%8D%95%E6%97%8B%E8%BD%AC.webp" alt="图4-31 调整情况1的单旋转"></p>
<p>  如上图，对于单旋转的情况1，节点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">k_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>不满足AVL平衡的性质。为使树平衡，我们需要把节点X向上移动一层，节点Z向下移动一层。将树想象为灵活有重量的，现在拿住<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">K_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>节点()，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">K_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>成为根，因为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>2</mn></msub><mo>&gt;</mo><msub><mi>K</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">K_2 &gt; K_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，所以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">K_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>变成<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">K_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的右孩子。子树Y中的元素都大于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">K_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，小于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">K_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，所以可以将其放置到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">K_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的左孩纸的位置。<br>
如下图是一种实际情况的处理：左左</p>
<img src="/2021/10/23/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E4%B8%8EAVL%E6%A0%91/单旋转实例.webp" alt="图4-32 左左单旋转实例" style="zoom:70%;">
<p>  该平衡二叉树插入6后，对8而言，左子树高度为2，右子树高度为0(不存在)，相差为2，只对6、7、8而言，拿住7，进行一次右旋。(树原本是平衡的，被破坏平衡后，先处理较小子树的不平衡情况，所以这里只处理8子树的情况)。</p>
<h4 id="4-4-1-12右右情况-左旋">4.4.1.12右右情况(左旋)</h4>
<p>  情况4是情况1的一种镜像对称(优先处理子树的不平衡，这里<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">K_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的子树是平衡的，是对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">K_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>不平衡，对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">K_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是右右情况)。实例略。</p>
<img src="/2021/10/23/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E4%B8%8EAVL%E6%A0%91/调整情况4的单旋转.webp" alt="图4-33 调整情况4的单旋转" style="zoom:80%;">
<h3 id="4-4-2-双旋转">4.4.2 双旋转</h3>
<p>4.4.2.1 左右单旋转</p>
<p>左右的情况：</p>
<p><img src="/2021/10/23/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E4%B8%8EAVL%E6%A0%91/%E5%B7%A6%E5%8F%B3%E5%8F%8C%E6%97%8B%E8%BD%AC.webp" alt="左右双旋转"></p>
<p>  如上图，子树Y比子树Z高2层，将其抽象成如右图所示地3个连接点与4棵子树，B、C只比D深<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">1\frac 12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord">1</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">K_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>重新作为根，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">K_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>比<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">K_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>小，因此作为子节点，同样<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">K_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>作为右节点。<br>
  PS：对于左右的情况，可以先左旋，再右旋(操作次数会增加)，如下图(这里假设插入到B)：<br>
下图有误，是在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">K_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的节点下插入，应该只有B或者C，且插入的高度为1，但是对旋转逻辑无影响。</p>
<img src="/2021/10/23/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E4%B8%8EAVL%E6%A0%91/调整情况2的左右.webp" alt="调整情况2的左-右" style="zoom:80%;">
<p>同样的对于右左的情况：<br>
<img src="/2021/10/23/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E4%B8%8EAVL%E6%A0%91/右-左双旋转修复情况.webp" alt="右-左双旋转修复情况" style="zoom:80%;"></p>
<p>右-左 双旋转实例<br>
<img src="/2021/10/23/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E4%B8%8EAVL%E6%A0%91/右左双旋转实例.webp" alt="右-左双旋转实例" style="zoom:80%;"></p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>Avl树主代码实现(点击展开)</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AvlTree</span>&lt;AnyType <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;AnyType&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 允许的最大高度差(超过该该高度，树会失去平衡)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ALLOWED_IMBALANCE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根节点</span></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;AnyType&gt; root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AvlNode&lt;AnyType&gt; <span class="title function_">getRoot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AvlTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(AnyType x)</span> &#123;</span><br><span class="line">        root = insert(x, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(AnyType x)</span> &#123;</span><br><span class="line">        root = remove(x, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算节点的高度，空树的高度定义为-1，叶子节点的高度定义为0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 节点的高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">(AvlNode&lt;AnyType&gt; t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t == <span class="literal">null</span> ? -<span class="number">1</span> : t.height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 供外部调用获取高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入节点x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 要插入的值x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 插入的tree，这里一般是root节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;AnyType&gt; <span class="title function_">insert</span><span class="params">(AnyType x, AvlNode&lt;AnyType&gt; t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AvlNode</span>&lt;&gt;(x, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">compareResult</span> <span class="operator">=</span> x.compareTo(t.element);</span><br><span class="line">        <span class="keyword">if</span> (compareResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            t.left = insert(x, t.left);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compareResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            t.right = insert(x, t.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 添加的节点已经存在</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> balance(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 平衡Avl树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 树的根节点t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 平衡后的跟节点t</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;AnyType&gt; <span class="title function_">balance</span><span class="params">(AvlNode&lt;AnyType&gt; t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果左子树的高度大于右子树超过1，则说明左边失去平和，需要右旋</span></span><br><span class="line">        <span class="keyword">if</span> (height(t.left) - height(t.right) &gt; ALLOWED_IMBALANCE) &#123;</span><br><span class="line">            <span class="comment">// 如果左子树的左子树的高度 大于等于 左子树右子树的高度（左左情况，单右旋即可）</span></span><br><span class="line">            <span class="keyword">if</span> (height(t.left.left) &gt;= height(t.left.right)) &#123;</span><br><span class="line">                t = rotateWithLeftChild(t);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则，为左右情况(root的左子树 - 右子树&gt; 1， 并且root.left.left &lt; root.left.right)。</span></span><br><span class="line">                <span class="comment">// 需要(左)右双旋转</span></span><br><span class="line">                t = doubleWithLeftChild(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 与上面相反</span></span><br><span class="line">            <span class="keyword">if</span> (height(t.right) - height(t.left) &gt; ALLOWED_IMBALANCE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (height(t.right.right) &gt;= height(t.right.left)) &#123;</span><br><span class="line">                    t = rotateWithRightChild(t);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    t = doubleWithRightChild(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t.height = Math.max(height(t.left), height(t.right)) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向右单旋转 （左开弓(&lt;) 变为右开弓形(&gt;)）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k2 树根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 平衡后的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;AnyType&gt; <span class="title function_">rotateWithLeftChild</span><span class="params">(AvlNode&lt;AnyType&gt; k2)</span> &#123;</span><br><span class="line">        <span class="comment">// 记录k2的左节点 k1</span></span><br><span class="line">        AvlNode&lt;AnyType&gt; k1 = k2.left;</span><br><span class="line">        <span class="comment">// 将k2的左节点设置为k1的右节点(原本k2的左节点的右节点)</span></span><br><span class="line">        k2.left = k1.right;</span><br><span class="line">        <span class="comment">// k2变为k1的右节点</span></span><br><span class="line">        k1.right = k2;</span><br><span class="line">        <span class="comment">// k2的高度与k1的高度变化，需要重新计算</span></span><br><span class="line">        k2.height = Math.max(height(k2.left), height(k2.right)) + <span class="number">1</span>;</span><br><span class="line">        k1.height = Math.max(height(k1.left), k2.height) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> k1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向(左)右双旋转(先左旋root的左子树，再右旋root)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 树根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 平衡后的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;AnyType&gt; <span class="title function_">doubleWithLeftChild</span><span class="params">(AvlNode&lt;AnyType&gt; root)</span> &#123;</span><br><span class="line">        root.left = rotateWithRightChild(root.left);</span><br><span class="line">        <span class="keyword">return</span> rotateWithLeftChild(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向左单旋(与向左旋转相反)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 平衡后的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;AnyType&gt; <span class="title function_">rotateWithRightChild</span><span class="params">(AvlNode&lt;AnyType&gt; root)</span> &#123;</span><br><span class="line">        AvlNode&lt;AnyType&gt; k1 = root.right;</span><br><span class="line">        root.right = k1.left;</span><br><span class="line">        k1.left = root;</span><br><span class="line">        root.height = Math.max(height(root.left), height(root.right)) + <span class="number">1</span>;</span><br><span class="line">        k1.height = Math.max(height(k1.left), height(k1.right)) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> k1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从Avl树中删除节点t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 要删除的节点x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 根节点t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除节点后x的根节点(删除后需要重新平衡）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;AnyType&gt; <span class="title function_">remove</span><span class="params">(AnyType x, AvlNode&lt;AnyType&gt; t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">compareResult</span> <span class="operator">=</span> x.compareTo(t.element);</span><br><span class="line">        <span class="keyword">if</span> (compareResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            t.left = remove(x, t.left);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compareResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            t.right = remove(x, t.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.left != <span class="literal">null</span> &amp;&amp; t.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// x=t 并且t的左右子节点不为空</span></span><br><span class="line">            <span class="comment">// 将root节点的值设置为右子树最小值，然后删除右子树的最小值</span></span><br><span class="line">            t.element = findMin(t.right).element;</span><br><span class="line">            t.right = remove(t.element, t.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// x=t 并且t的左右子节点 至少右一个为空</span></span><br><span class="line">            t = t.left != <span class="literal">null</span> ? t.left : t.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> balance(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在root节点的所有子树中查找最小的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 找到的最小的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> AvlNode&lt;AnyType&gt; <span class="title function_">findMin</span><span class="params">(AvlNode&lt;AnyType&gt; root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向(右)左双旋转(先右旋root的右子树，再左旋root)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 树根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 平衡后的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;AnyType&gt; <span class="title function_">doubleWithRightChild</span><span class="params">(AvlNode&lt;AnyType&gt; root)</span> &#123;</span><br><span class="line">        root.right = rotateWithLeftChild(root.right);</span><br><span class="line">        <span class="keyword">return</span> rotateWithRightChild(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AvlNode</span>&lt;AnyType&gt; &#123;</span><br><span class="line">        <span class="comment">// 节点存储的值</span></span><br><span class="line">        <span class="keyword">public</span> AnyType element;</span><br><span class="line">        <span class="comment">// 左子节点</span></span><br><span class="line">        <span class="keyword">public</span> AvlNode&lt;AnyType&gt; left;</span><br><span class="line">        <span class="comment">// 右子节点</span></span><br><span class="line">        <span class="keyword">public</span> AvlNode&lt;AnyType&gt; right;</span><br><span class="line">        <span class="comment">// AVL树的高度</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> height;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">AvlNode</span><span class="params">(AnyType theElement)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.element = theElement;</span><br><span class="line">            <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">AvlNode</span><span class="params">(AnyType theElement, AvlNode&lt;AnyType&gt; lt, AvlNode&lt;AnyType&gt; rt)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.element = theElement;</span><br><span class="line">            <span class="built_in">this</span>.left = lt;</span><br><span class="line">            <span class="built_in">this</span>.right = rt;</span><br><span class="line">            <span class="comment">// 叶子节点的高度为0，空树的高度为-1</span></span><br><span class="line">            <span class="built_in">this</span>.height = <span class="number">0</span>;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>打印树中的元素，测试用(点击展开)</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前序遍历(根，左右)，测试用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrderPrint</span><span class="params">(AvlNode&lt;AnyType&gt; node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(node.element + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            preOrderPrint(node.left);</span><br><span class="line">            preOrderPrint(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中序遍历(左根右)，测试用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inOrderPrint</span><span class="params">(AvlNode&lt;AnyType&gt; node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node != <span class="literal">null</span>) &#123;</span><br><span class="line">            inOrderPrint(node.left);</span><br><span class="line">            System.out.println(root.element + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            inOrderPrint(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后序遍历(左右根)，测试用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrderPrint</span><span class="params">(AvlNode&lt;AnyType&gt; node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node != <span class="literal">null</span>) &#123;</span><br><span class="line">            postOrderPrint(node.left);</span><br><span class="line">            postOrderPrint(root.right);</span><br><span class="line">            System.out.println(root.element + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>]]></content>
      <categories>
        <category>cs基础</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>伸展树(Splay)</title>
    <url>/2022/02/27/%E4%BC%B8%E5%B1%95%E6%A0%91Splay/</url>
    <content><![CDATA[<p>伸展树简介</p>
<span id="more"></span>
<h2 id="4-5-伸展树">4.5 伸展树</h2>
<blockquote>
<p>本质是一颗二叉查找树，在查找后，通过AVL的旋转操作，将查找的那个节点，旋转到root节点位置，达到将<code>经常查找的节点</code>置于root节点附近的目的，减少查询次数。</p>
</blockquote>
<p>  伸展树保证从空树开始连续M次对树的操作最多花费<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>M</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(M \log N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，但是不保证最坏的情况下时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，m次伸展操作的均摊时间效率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>M</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(M \log N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>。<br>
  即使只读访问，每次访问后，其结构也会发生变化，因此在多线程下，其需要额外的维护。</p>
<h3 id="4-5-1-一个简单的伸展想法">4.5.1 一个简单的伸展想法</h3>
<p>  假设我们想查找的是k1，则从k1开始，自底向上的去操作，每次和<code>他的父节点进行单旋转</code>，将k1旋转上去(这个操作会将k1的父节点旋转下来，k1旋转上去)，直到将k1旋转到root节点。这样的操作虽然可以将k1旋转上去，但是其会将以前比k1靠近root的节点推到k1之前那么深，违背了最近查找节点置于顶部的逻辑。</p>
<h3 id="4-5-2-正确的伸展">4.5.2 正确的伸展</h3>
<p>   正确的旋转，是每次旋转都基于AVL的旋转操作，将查找节点K1旋转到root节点。主要基于以下两种操作</p>
<ol>
<li>
<p>zig-zag(之字形)<br>
<img src="/2022/02/27/%E4%BC%B8%E5%B1%95%E6%A0%91Splay/Zigzag.png" alt="zig-zag（图源wikipedia）"><br>
要将x旋转上去，g、p、x组成之字形，先将x旋转到p上，再将x旋转到根节点即可。</p>
</li>
<li>
<p>zig-zig(一字型)<br>
<img src="/2022/02/27/%E4%BC%B8%E5%B1%95%E6%A0%91Splay/Zigzig.png" alt="zig-zig(图源wikipedia)"><br>
g、p、x组成一字型，先将p旋转上去，再将x旋转上去即可。</p>
</li>
<li>
<p>实例：<br>
使用如下示例，对k1进行操作：<br>
示例原图：<br>
<img src="/2022/02/27/%E4%BC%B8%E5%B1%95%E6%A0%91Splay/伸展树示例(原图).png" alt="伸展树示例(原图)" style="zoom:75%;"></p>
<p>进行一次zig-zag旋转：</p>
<img src="/2022/02/27/%E4%BC%B8%E5%B1%95%E6%A0%91Splay/伸展树示例旋转1.png" alt="伸展树示例(zig-zag旋转后)" style="zoom:80%;">
<p>进行一次zig-zig旋转：<br>
<img src="/2022/02/27/%E4%BC%B8%E5%B1%95%E6%A0%91Splay/伸展树示例(zig-zig).png" alt="伸展树示例(zig-zig旋转后)" style="zoom:85%;"></p>
<h3 id="4-5-3-自顶向下的伸展树">4.5.3 自顶向下的伸展树</h3>
<p>   在自底向上的伸展树中，我们需要求一个节点的父节点和祖父节点，在实现的过程中需要使用栈来保存访问路径进行回溯，这种伸展树难以实现，自顶向下可以只使用O(1)的存储方式，实现一样的效果。</p>
<p>TODO : 该章节为书本第十二章实现，暂定之后实现</p>
</li>
</ol>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>优先队列（堆）</title>
    <url>/2023/01/15/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%88%E5%A0%86%EF%BC%89/</url>
    <content><![CDATA[<p>《数据结构与算法分析Java语言描述》第六章6.1节<strong>读书笔记</strong></p>
<span id="more"></span>
<p>优先队列又称为堆，是用来处理具有优先级的元素的数据结构。</p>
<h2 id="6-1-模型">6.1 模型</h2>
<p>优先队列分为两种。<br>
一种是小顶堆实现的优先队列，在堆顶是最小的元素，每次可以直接访问最小的元素。<br>
另一种是大顶堆实现的优先队列，在堆顶是最大元素。每次可以直接访问最大的元素。</p>
<p>对于小顶堆而言，至少支持两种操作，insert插入，将元素按优先级插入到指定位置，deletemin删除，删除堆顶的最小元素。insert操作等价于入队，deletemin等价于出队。（由堆的优先级，可以引出堆排序）。</p>
<p>后续以小顶堆为例。</p>
<h2 id="6-2-一些简单实现">6.2 一些简单实现</h2>
<p>使用有序链表来实现，表头的元素最小，则每次deleteMin的时间复杂度是O(1)，对于N个元素，则是O(N)。对于每次insert操作，由于需要遍历找到插入的位置，时间复杂度是O(N)，对于N个元素，则是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p>
<p>使用二叉查找树实现，二叉查找树两种操作实现皆是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，对于N个元素，实现是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(NlogN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>。不过二叉查找树的实现较为复杂，而且许多支持的操作我们并不需要。将实现二叉堆，来支持这个操作，并且时间复杂度都是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(NlogN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>。</p>
<h2 id="6-3-二叉堆">6.3 二叉堆</h2>
<p>堆一般指二叉堆。堆具有<strong>结构性</strong>和<strong>堆序性</strong>。对堆的一次操作，可能会破坏这两个性质中的一个。因此对于堆一次操作，必须还原这两个性质，才算作一次操作终止。</p>
<h3 id="6-3-1-结构性质">6.3.1 结构性质</h3>
<p>堆是一棵完全二叉树，除最底层外，每一层都被填满。容易证明一棵高为h的完全二叉树有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mtext>到</mtext><msup><mn>2</mn><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mtext>个节点</mtext></mrow><annotation encoding="application/x-tex">2^h 到 2^{h+1}-1个节点</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">到</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">节</span><span class="mord cjk_fallback">点</span></span></span></span>。即节点个数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><msup><mn>2</mn><mi>h</mi></msup><mtext>或</mtext><msup><mn>2</mn><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mtext>个节点，因此，高度</mtext></mrow><annotation encoding="application/x-tex">N = 2^h 或 2^{h+1}-1个节点，因此，高度</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">或</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">节</span><span class="mord cjk_fallback">点</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">高</span><span class="mord cjk_fallback">度</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h = O(logN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>。</p>
<p><strong>堆性质</strong>：堆大多都由数组实现，而不是链表。对于数组上的任一位置i的元素，其左儿子在2i，右儿子在2i+1。它的父亲在i/2上(java的整除的性质，对于节点i，无论他是左儿子，还是右儿子，整除得到的结果都是i/2)。</p>
<p>由于是用数组实现，当我们遍历所有元素时，可以直接通过计算，来得知访问的下标。例如下标1的左儿子在下标2，右儿子在下标3。按顺序访问。</p>
<p>**本节我们图示皆以二叉树展示，但是实现仍然是数组。**实现的是小顶堆。</p>
<p>注意：我们的堆数组，下标为0的位置是不使用的，因为2i =  0，得到的结果和父节点是一样的位置。所以有效节点从1开始。(线段树也是如此，使用数组实现树，且0的位置不使用)。</p>
<h3 id="6-3-2-堆序性">6.3.2 堆序性</h3>
<p>对于小顶堆，根节点应该是最小的元素。同时，对于二叉堆的任意子树，也是一个小顶堆，子树的根节点也应该是子树的最小元素。</p>
<p>因此，对于一个小顶堆，对于任意节点i，如果其有左右子节点，则应该满足，num[i] &lt;= num[2i]，num[i] &lt;= num[2i + 1]。</p>
<p><img src="/2023/01/15/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%88%E5%A0%86%EF%BC%89/%E5%B0%8F%E9%A1%B6%E5%A0%86.webp" alt></p>
<p>根据堆序性，最小的元素总是可以以O(1)的时间在堆的根处找到。实现为findMin。</p>
<h3 id="6-3-3-堆的基本操作">6.3.3 堆的基本操作</h3>
<p><strong>插入</strong>（insert）</p>
<p>为了将一个元素X插入到堆中，可以先在下一个可用的位置创建一个空节点。如果X可以放入该节点而不破化<strong>堆序性</strong>，那么插入完成。否则空节点应该朝着根的方向冒一步。继续该过程，知道X能被放入空节点为止。如下图，为了插入14，先创建空节点，插入14不满足，将空节点上冒，知道将14插入正确的位置。</p>
<p><img src="/2023/01/15/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%88%E5%A0%86%EF%BC%89/%E5%B0%9D%E8%AF%95%E6%8F%92%E5%85%A514.webp" alt="尝试插入14：创建一个空节点，再将空节点上冒"></p>
<p><img src="/2023/01/15/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%88%E5%A0%86%EF%BC%89/%E5%B0%9D%E8%AF%95%E6%8F%92%E5%85%A514%E5%90%8E%E7%BB%AD.webp" alt="尝试插入14：后续"></p>
<p>这种策略一般叫做上滤，新元素在堆中上滤知道找出正确的位置。使用如下代码实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T x)</span> &#123;</span><br><span class="line">    <span class="comment">// currentSize：被使用的数组大小</span></span><br><span class="line">    <span class="keyword">if</span> (currentSize == array.length - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 下标0不用，所以需要减去1</span></span><br><span class="line">        <span class="comment">// 2倍扩容，同时可以使用的空间为2的倍数个</span></span><br><span class="line">        <span class="built_in">this</span>.enlargeArray(array.length * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用的位置加1（currentSize + 1后为即将尝试使用的下标）</span></span><br><span class="line">    currentSize++;</span><br><span class="line">    <span class="comment">// 空节点下标</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hole</span> <span class="operator">=</span> currentSize;</span><br><span class="line">    <span class="comment">// 先将x存到下标0的位置（该位置不使用），hole = hole / 2：意思是访问hole的父节点，空节点上滤</span></span><br><span class="line">    <span class="keyword">for</span> (array[<span class="number">0</span>] = x; x.compareTo(array[hole / <span class="number">2</span>]) &lt; <span class="number">0</span>; hole /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 理解的为x在空节点hole处，</span></span><br><span class="line">        <span class="comment">// x.compareTo(array[hole / 2]) &lt; 0 ： x小于父节点的元素。将父节点的值下浮到空节点（等同于将空节点上冒到父节点）</span></span><br><span class="line">        array[hole] = array[hole / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    array[hole] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要插入的元素是最小的元素，那么他将一直被推向顶端。</p>
<p><strong>deleteMin</strong>（删除最小元素）</p>
<p>最小的元素在顶端，即下标为1处。删除最小的元素，要在根节点（下标1处）建立一个空穴。将空穴中的两个字节的的较小值移入空穴，则空穴下移动一层。重复这一过程。最后再将堆中的最大元素（如图31）被移入空穴。</p>
<p><img src="/2023/01/15/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%88%E5%A0%86%EF%BC%89/deleteMin_%E6%A0%B9%E5%A4%84%E5%BB%BA%E7%A9%B4.webp" alt="在根处建穴"></p>
<p><img src="/2023/01/15/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%88%E5%A0%86%EF%BC%89/deleteMin_%E6%8E%A5%E4%B8%8B%E6%9D%A5%E4%B8%A4%E6%AD%A5.webp" alt="deleteMin_接下来两步"></p>
<p><img src="/2023/01/15/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%88%E5%A0%86%EF%BC%89/deleteMin_%E6%9C%80%E5%90%8E%E4%B8%A4%E6%AD%A5.webp" alt="deleteMin_最后两步"></p>
<p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">deleteMin</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 堆为空</span></span><br><span class="line">    <span class="keyword">if</span> (currentSize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最小的元素在根处</span></span><br><span class="line">    <span class="type">T</span> <span class="variable">minItem</span> <span class="operator">=</span> array[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 将最大的元素放置到根处，相当于删掉了根处的元素，同时使用抽象出来的方法下浮最大值。</span></span><br><span class="line">    array[<span class="number">1</span>] = array[currentSize];</span><br><span class="line">    currentSize -= <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 将节点1处的值下浮</span></span><br><span class="line">    percolateDown(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> minItem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">percolateDown</span><span class="params">(<span class="type">int</span> hole)</span> &#123;</span><br><span class="line">    <span class="type">int</span> child;</span><br><span class="line">    <span class="comment">// 要下浮的元素的值</span></span><br><span class="line">    <span class="type">T</span> <span class="variable">temp</span> <span class="operator">=</span> array[hole];</span><br><span class="line">    <span class="keyword">for</span> (; hole * <span class="number">2</span> &lt;= currentSize; hole = child) &#123;</span><br><span class="line">        <span class="comment">// 左儿子的下标</span></span><br><span class="line">        child = hole * <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 如果左儿子不是最后一个元素，并且右儿子小于左儿子，</span></span><br><span class="line">        <span class="keyword">if</span> (child != currentSize &amp;&amp; array[child + <span class="number">1</span>].compareTo(array[child]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 要移动的则是较小的右儿子</span></span><br><span class="line">            child++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (array[child].compareTo(temp) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果子节点的值比要下浮的值小，那么子节点向上移动（相当于下浮节点下浮）</span></span><br><span class="line">            array[hole] = array[child];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 否则终止</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// temp(最大值)移动到空穴位置，完成下浮</span></span><br><span class="line">    array[hole] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>建堆</strong></p>
<p>通过初始构造集合建堆，可以考虑建堆使用N个insert方法来建堆，每个insert的平均时间是O（1）,而最坏的时间是O（lgN）。因此总的平均时间为O（N），总的最坏时间为O（NlgN）。</p>
<p>一般的算法是将N项以任意顺序放入堆中，保持结构性，此时percolateDown(i)从节点i下滤，使用如下的程序创建一棵堆序的树。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用数组建堆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BinaryHeap</span><span class="params">(T[ ] items )</span> &#123;</span><br><span class="line">    currentSize = items.length;</span><br><span class="line">    <span class="comment">// 开辟空间数组</span></span><br><span class="line">    array = (T[]) <span class="keyword">new</span> <span class="title class_">Comparable</span>[ ( currentSize + <span class="number">2</span> ) * <span class="number">11</span> / <span class="number">10</span> ];</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 初始化堆数组</span></span><br><span class="line">    <span class="keyword">for</span>(T item : items ) &#123;</span><br><span class="line">        array[i++] = item;</span><br><span class="line">    &#125;</span><br><span class="line">    buildHeap();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildHeap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> currentSize / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 循环遍历来下浮建堆</span></span><br><span class="line">        percolateDown(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-4-完整代码">6.4 完整代码</h2>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>堆完整代码</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryHeap</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> T&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前堆中的元素数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> currentSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储堆的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T[] array;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Construct the binary heap.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryHeap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 调用本类的另一个构造方法</span></span><br><span class="line">        <span class="built_in">this</span>(DEFAULT_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryHeap</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        currentSize = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 堆数组的0的位置是不使用的，所以长度需要加1</span></span><br><span class="line">        array = (T[]) <span class="keyword">new</span> <span class="title class_">Comparable</span>[capacity + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用数组建堆</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryHeap</span><span class="params">(T[] items)</span> &#123;</span><br><span class="line">        currentSize = items.length;</span><br><span class="line">        <span class="comment">// 开辟空间数组</span></span><br><span class="line">        array = (T[]) <span class="keyword">new</span> <span class="title class_">Comparable</span>[(currentSize + <span class="number">2</span>) * <span class="number">11</span> / <span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 初始化堆数组</span></span><br><span class="line">        <span class="keyword">for</span> (T item : items) &#123;</span><br><span class="line">            array[i++] = item;</span><br><span class="line">        &#125;</span><br><span class="line">        buildHeap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildHeap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> currentSize / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 循环遍历来xia&#x27;fu&#x27;shen&#x27;sh</span></span><br><span class="line">            percolateDown(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentSize == array.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 下标0不用，所以需要减去1</span></span><br><span class="line">            <span class="comment">// 2倍扩容，同时可以使用的空间为2的倍数个</span></span><br><span class="line">            <span class="built_in">this</span>.enlargeArray(array.length * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将X上冒到正确的位置</span></span><br><span class="line">        currentSize++;</span><br><span class="line">        <span class="comment">// 空节点下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">hole</span> <span class="operator">=</span> currentSize;</span><br><span class="line">        <span class="comment">// 先将x存到下标0的位置（该位置不使用），hole = hole / 2：意思是访问hole的父节点，空节点上冒</span></span><br><span class="line">        <span class="keyword">for</span> (array[<span class="number">0</span>] = x; x.compareTo(array[hole / <span class="number">2</span>]) &lt; <span class="number">0</span>; hole /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 理解的为x在空节点hole处，</span></span><br><span class="line">            <span class="comment">// x.compareTo(array[hole / 2]) &lt; 0 ： x小于父节点的元素。将父节点的值下浮到空节点（等同于将空节点上冒到父节点）</span></span><br><span class="line">            array[hole] = array[hole / <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        array[hole] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">deleteMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 堆为空</span></span><br><span class="line">        <span class="keyword">if</span> (currentSize == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最小的元素在根处</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">minItem</span> <span class="operator">=</span> findMin();</span><br><span class="line">        <span class="comment">// 将最大的元素放置到根处，相当于删掉了根处的元素，同时使用抽象出来的方法下浮最大值。</span></span><br><span class="line">        array[<span class="number">1</span>] = array[currentSize];</span><br><span class="line">        currentSize -= <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 将节点1处的值下浮</span></span><br><span class="line">        percolateDown(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> minItem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">findMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentSize == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">percolateDown</span><span class="params">(<span class="type">int</span> hole)</span> &#123;</span><br><span class="line">        <span class="type">int</span> child;</span><br><span class="line">        <span class="comment">// 要下浮的元素的值</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">temp</span> <span class="operator">=</span> array[hole];</span><br><span class="line">        <span class="keyword">for</span> (; hole * <span class="number">2</span> &lt;= currentSize; hole = child) &#123;</span><br><span class="line">            <span class="comment">// 左儿子的下标</span></span><br><span class="line">            child = hole * <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 如果左儿子不是最后一个元素，并且右儿子小于左儿子，</span></span><br><span class="line">            <span class="keyword">if</span> (child != currentSize &amp;&amp; array[child + <span class="number">1</span>].compareTo(array[child]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 要移动的则是较小的右儿子</span></span><br><span class="line">                child++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (array[child].compareTo(temp) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果子节点的值比要下浮的值小，那么子节点向上移动（相当于下浮节点下浮）</span></span><br><span class="line">                array[hole] = array[child];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则终止</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// temp移动到空穴位置</span></span><br><span class="line">        array[hole] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">enlargeArray</span><span class="params">(<span class="type">int</span> newSize)</span> &#123;</span><br><span class="line">        T[] old = array;</span><br><span class="line">        array = (T[]) <span class="keyword">new</span> <span class="title class_">Comparable</span>[newSize];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; old.length; i++) &#123;</span><br><span class="line">            array[i] = old[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numItems</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        BinaryHeap&lt;Integer&gt; h = <span class="keyword">new</span> <span class="title class_">BinaryHeap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">37</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">37</span>; i != <span class="number">0</span>; i = (i + <span class="number">37</span>) % numItems) &#123;</span><br><span class="line">            h.insert(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; numItems; i++) &#123;</span><br><span class="line">            System.out.println(h.findMin());</span><br><span class="line">            h.deleteMin();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>写于博客一周年之际</title>
    <url>/2022/02/01/%E5%86%99%E4%BA%8E%E5%8D%9A%E5%AE%A2%E4%B8%80%E5%91%A8%E5%B9%B4%E4%B9%8B%E9%99%85/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="40e032806c54b6fddb1404fb7654c35eb2bf74e78fbe01ccacb536bbcaa31fde">86daf2dd9f98eea2571c3fce34d1e7ad96c1370e83194598f6c978065ed8904c5cbc44ea630774e40ec20a8e7d5333a96a60945abf4ad35d69a90784d88590e9e579eb9090d92d01fa86400dad40342825591275fb4ae7041f36aec2b0f4f0ef6883623908b1ae46b97eb77a7516f9121ae064ade59a1add00b6f5cad55d29183b5a20bf29fe32f6abe631ab6755b264dcd1e206f49fd318df61159da9cab4cdc84d38d69a66bf2fc8a5261d6aa2050c146886952b639fd8c5d5a2908687c044d8947d0eab69a1a9384d1de07684e6edca06a50dbb8b0c3f45c3e5d01b6b41d134465e7d8013608274358d6a69dccef08fefad51c352ea5a3e432e824034ea2e2f19a999a0bf4d33639565dd79a1f5bac8614ccd1b8c2ddeb717ab04a6f667e29a53d231a2c805c286cc0319dbec8cf9a1985f385d4125d6c7e76f2668a87035911f10e454b7ec756b06b3e562410e5805f1ee2549ad81d74eec68579822f0076fb959b280f25db640586c69a75e9027d967ae092887ec56214dbcec85cbec6ba4bbee21889b2db935990d50eba55ab1edf311ee3160154a995edcd060f37d31d22a4d5cc74dff7876676fe43085ebc55e355d624fb4fe00f336e81ccfc38651ed4ceb59da8dfb6b3046722af1f559adae34a8989280c211ee17efec9f862a6d65717b05ec36a51e0f8c13071b2c9a99dfc39f30106ad0da598f6fe4e91c13a7599aa1caeba3930ec57c74aec01e3a00ca9eaaa283e9567a9ffea1bbda9a26d4da01f4d3df6f4f88c284568575c3f64cf2a91f8ba967510d4170a1057965bf486d8c9cfa5918dea9a54ebdf6b5e9de68567b536fd2b0a5dfc63c9db4e0aa3fb6124b66dcd49ca341516c5e980429abb9eece4da859f8d5cd9768a59f8391ef74d319bc876d3761d6ceb3c2ca4300e0d16f0a0c1c0be2198a358b3f2998a7cc606916fc624ca67fb181a2408194abad43a057006a8cac968d2f8722a4e117fdac3ce6bb8a26b409cec1cd78f7083f3ec6bf5a1649537cc933e6ade51d2f68186d08603896c9e96baba0cf08d642683058ce62e86ed42d9caf89e06018219f8ac99c5363fc271580fd4fcadec258751255ddae774372bc753ec9333b494cdef980b36febab376d66fe147a9d363f06490787968529683ddd3fa749b5a36d51d5cb4dc5861c1cbba8683394be7f69f3d2bc9138ce859593eb8368be8ca68495555f361d3b885c0eaaf112e333e0f3c5ad53e4ad982b97bb986160716d795aee06be7d065af7838251d87df1d91c15a1b2098656ab846d3dfa2a55d289ebaabcd388006008a65b1fff9a8d4afb0df931ed0dce8493534205bc9ce59453202b953a65b010ace3abf83cec2b2db5011988090e4187da57ff964040fcf61cc00862f4a0f0d073c90eccd6bc6f2ce61633e247cc9c9a0a31256ade4f462c715fef14308be787fb66f42cd31231a3653df2134c0c87a453325712cf3c6490ceafb0cc487b09134408fef4ddcaafa7b64efa0942d5ba97344d54d17eb2dfd8adff68d3a97e5cd1134f3bf3b22a334950636c66e1c7afcfb4ecf95a0e20eaa6d0e76a2e0b7957c240bb84831ef9b205f79561d2f90156275b60ae1728bae3b4916b20734e8a2b1654d134e06329979e57480efdf07afa92a5dd43353518bab9a4a9428e4b0c6aa7c12c8f391fd3887ff1153a026e3b12703e0dfc6fb5a6ea9faa13abd830b22a9914384950b646ca6e29a3626b43ec03d984c6ba589199222333519fa0ee5fee4cd2c4f7c54e1d8f89d93d1cf957bc457d0427fa82198a2cd23b93b2444b724ab451518244960cd9bc0af7be6211a2d0eeabc90984ab1958c06d74bd9d87f1fae0a1e069455423be21795d3720c8b9f231582f41d64bfe0b8ff0213ec0fbbbe0fa8abf86e51688a372a27f9b07b665550bf356662194360fa360925e1e4652bc62f6f9ffdb0a45df18e6f72759d5c8aeae770a030d1b2f7cba7870568ebc4ba61fcf45bacb5e64fcc98c3031dd240dc5f359a4f9838947e589548bf4d6e2ba10e12f5486cf45309ae99532e1053f9c28d0ffcf8fbf6500b3db2bc9f3dd1e4c6c8fc095fed404a0eacb9182591fc13c091c730c6652ddf73da21c6fb5b7650660cdc27075a544e110c745b381561217e9f4226e128ec578d8e18ce84835fd69896c9ba93611eb6c9915b3e61596c6c17cd7283f878dfd510ab82d4333d7a78faf679f7284dc518d2ba8858a3991dd1ae7e4cf164db4805da03cc0709571d3d59cc368e2e48388180bcf3e049688e616eebefc095319b4a78d0883408cb0bfbed45798920f273be20ec6afc0586d9798e1bfaaf9eaf2ebe5396aae4bbde8fa0d3439a8fac42b3e677e08abed13e75e4ecf4f237345c7af059f41b25aac95647f9e4e7d5875baf27befb47bca9f94197fd4a153f25fb6a0d8890cee569acdc941531c78b9733dc632ced36c81e2ec2b2881fdd942dce169d0a81a4c557f44fccf9fa4a1dc88bd618952584297479bf81ce4e7a155ebf3a31d5c88a88df4baf0b9e0b1e973cf0479d6388ae0a43b8d83103753b1ca14bbac17e3c843d24b200a19255b21ff9d84ca1b6a1f40215123f2b4f4fd02c66f7399de445a2be773a4f856207a6267c307f3e93a2810509be0ee41f967707c02c0475666e808b3fd9340756d6b3175b9e4fbe32d5d1e843e3932e862d24090c880fbc66a538743bcb03504753066b0712f3744b2b9c902066b745dd97cc54a8d59a8fbae0fdc6e03218d2865b501dfa4423a15fbc52d53b61d96aca3b1eda1854835b6595d949fa68832659cbc2ae0ba8cfb845d00e28ba6d38dbeb5483bf3d6a49301a5dd58eaca0cbec460b5dc02d21b921fbf0810a9860cf4fa5b1c724bf58ed98930a2bee1135943c410f584a49185d2285223c63ae3250c0425f95e264857d3940bc3c21300657e42bd813b32b8925cb26e5aca158dc0ace4e44553f4fb71e01fecc2d2b7762e7cd7b49bcfb1bbac091a748834a6e53a6c52d1596d426ee62973603705744c68261ea8d26f4a577c8cdadb1ea4d5910b5335ffefee4c0deb9363d4f1c42b266691884c2134b5d83a478bc05f807b52312764f4ba1aae2feb56306365e600219b97495bcc78fd223ecb774299ce504f103699491ba211d2a35dedf2fd44605f7b4311afba0e916fc0e38f76cf80a5175e41020e3f9cb76d36e80073558f46735d4b5d3268f656c4547472e9c0ba19072955f0879936e61530572ba9012b5bf529d7d0a35c6727743499d58a4be1a84efbf5f27a6a08df179052709ed6854952539853dac9c93ee7f79c81d3191092ddcec2435e5c8af212f019e1a52b9b93d8e2c5a2995f213dc756837a57067ea50ec4b1d6b708a6d358bd1fd2f9b870d9eabe0f3a2f01ba28d83816e8ed0fc9fa5497fb83c587b2a99187763be6d49555edd182ead3227f7bd4afce0b06dfb7d6c6cb12673d97749cbfecc3a7720635bccda4d9f9d60234e475475006a037fe15a47e6a13751aab69d09b0b596f55f46058e9cc1a263d78f0ffac502068776f3905682f8a33cdb73ccf015aacedc67def58abade86ceffdc5f99ef5bc115d401a54821993aa0d7fa78b65bfc98be4e73173354eaeab3889515149dc1606a986a7bb209546e69ae51e9ae7541abf00bd712cf65114f19494b07ab8f3ca2b84c7c6a8bf9db2a7aa3b821f73558a4a8b13a440d7690cfee687b6c692314d3d5bb1c4f98a93b657546677ebf8d76edd2944c0790ab9799bb94bcde4552a93e254dd0f49458d49d2c340ba93b9766851a8d21ebfa2f7f76e0513968ebd89c8bb2c8422bc35c1cc3636469e58ce34efe77e4d4b69badf9de2396a5d1dd6dddef4b7b6737c97c9baee164f08190c1779ea8a483cfbfd0093f5f04bcc560f264a69cd4e7493174d9eb930846bdf26c212af4a8bab91c889d61238b08413fdca74bb3defa637f49852a29956a297d00d4b3b69e2ebeb0b88f5a5b3d6bdcaa4848612b559c06872f065a64b64e57ffbde7026627cb036e30b4ef0bffeea38701b143d8cb9c9c03473ef8406e0aef97c9476c069ec36b544ff6e1a701ada84d33ad8f9678292570bc4787438d7a9b41909f85ac346f9ac8cf4dff2f9ab84cdd96ed26793e5cc03a3bd368c9bdd3f21b5abed51ff8c59b23ff272639c35ee0987c9e474dc76e7dc124c617ea84c7def9ba410f86d28308105427c16ee08c28057bad0451b4ca4fc4ed3390a47b2e69f686c59c90fe0ca7495c5c8fd06cf3f5b44a210cfe7c9935ee1f63a1d0c7e62f01647ed92977859bed7ff06bbf01d897e94d7f77c1e4e3dcb734e1b41fef0f364e8a6fcc5f2e2c8f836ad75dbd06ef0d9e3922996648996365664a5fe744a881950826eb20dd281ce71bb41fc79a3d61e35e7df86635b747b56302c44c2e2c505ee5f67c9819717801314e4b98cdf1ae8de9f4685383bc9df18c6d7003fcec354d1e8a053fd127294a950c02ffa9c85d650e8fe4dfd3018efc32d75793ba9fd66c1cce980b36b093a85636d5f292874026de66db6a3b8d897f4a7cc12ddf4fefaefb9f2895f067b6af262a2730d5986490e1a792537633d42157f7899e4c872789aba577609e765a1afd5067ce31a490f59d4169f0dd58fc03cefbc6978a824c37c468d7e167d4307484afb20d7da0b39f5a0008f06c714d816fbd1ec79756c59a6eda61ac6d5fd6b7b87254b036ac52cb66d4b4b327a892bc801229efd5f2f9c23be39460b0e6dc8125b17995f334043bbdb5dcee227f283ccc1c18b5db795cce7e0cb0827583ea59acf7526ef8916e88248867f18affe02add493baadc1b4da2cf7b53f8f2420d8bb50e8e1346ed036121ecad08f3d288e1b8d10a5eb6b1d4462b29b715301d354ced144c5af7492d0e2e10685199b81310c6d9e1af656160d30494776a72d6459ddfefd571a5b290bc299a95763881db48f48b385fe95b0d5241383285e2a964e1c9db5dd9965acfeeef389a124e3a33d0a00dffc149fa5235208bb307d6e820aa61c9ad4d260e351e7917f47e3441434a0290dc676de3c036b8f216457bf3ccee2c6f773084aacd9318e5ffe362e86ca1100341bdbe4ca466b252604518db1845a5ae1aed0018e0e59c047edae97764e71e2acbe922b6e38040d34e648bd553840a2538f9049cb1446b2418a7d737f69a1ab50597e24ff109adb0733f87117193b491e328001ae9f5c685dd02d69b92ef68d4daf5f81ed179aa9175394bb00195761d3171a96648fac8ce281f577dd0998f3603d6266fe605dadd77a0ced19732fca154f7e70e4260c48a5b5517c7c8eea73dba15253b115a41e34c55ca1417f4950df678dc2a3d378e263abd8853f098e936fa4fb75f4bbf2b832965597b5ea86f91c5b11203fe3e62332cc1676432dfbd63a2e0afe790c68aec686597e41a4ac67b12d5241fba101d07b8a19b62902cb076bc7064cf845abd88c8c7f2f6ff2dd18692792e6fe72cfe6d47b242322320d1cf33ee04e778c3e8e1cac1370182b4aecd1c576c7aa4ccea277f6b47b750fbe66d4ccbd20e09cd4cf857a4a5aabcf1857af83549c55cec6fdf8c80e40f2ce3c959a13f0be72c909b309cb6cb5209a80290df3e42b5906fecee74aebc4e3c5abf671cd13631d25d3df66dfe53265e35021516f948afd3e28b4aca747b4628a5772df6d0ec5a15e1aa986ed537fc32b89d81127f9bab08f72d8f78d5b4040b6899c14f59eb3f8d179c58492d07b2dbac8e2ad282ff97b417746e23b4fc66f032f75169b188c2688ac908223ac5348d6ad4493d24602786795c070dfc9d43ba5605c98e93b4d45555eb9a6dec68c244ebae257315ff87f580001ef9a15128275a74acd0e576fa537d3f44c0996e36e93838cd44c3a05ada00a75277bba38405b916336cb0d6e2d3c99b4f0bd4fa565c3a181e0b06836bc7bfca5fa7283053748b110cbf60b8e5c8b452da9818911e786c65b7bd85fc2ede3ed745247a9fde0c45bad9669e398b124bb98db74f8a7f4c4aeb1807cef26d392d764b90229eb766f572cc109c6d5c29ea3579022c1ab77c4c5b2f4ff74e6c3b43daa934eb9765faffbe2e7676a39cd64f4771777feebc07b3f9f37e0913ae93647c777bf3de2b827f7d3ec6dcca7c872dff947d9905fff7be330da752902630a427fe8963de5e1b8cecd151a5c1a5d23cb98fce8c3fcda5203d4c01de283982e499c6bc424f193ce11597c14f134e55265babf52f30eb0bc8ee56dc8eddb83c1e05cf99ba719699f31f39beee2d52679b4ea4ec2b1caff9057162f824460506274a6755483638c600ede6d9e6e9fc080407bd215ddc65b9333b2b8a83f8f429b73518f32dfe7860fd4d08e6655284422521dc7828790e552a2476be05e72a54ac0b5b7506293aea60304984f5458b24ce1b10941732714cd06e8011ae91c19951b28eb30e13597c01100babbe17fb61822227fb2f5ee87b2a417624fd5131c8fd2246bd7a58226a2756e327d70be5f66d67d5264cc9d6936396bff0f3bee410e69db4221cbd908381c8d7df31c8079273c3bb5a85b709e67c5b182bbff4eea32b50477d1e344dffb1cc41a44ddd1c0226a76f7a91bf8bba0df9f6c1133440d7716f4a121d18236ae0d8451a0e5980a0f7905e406d40bc95ade56648d41ff620ba370ec07691b69536d4e852a195ea22cf2352cea0676719c13168dd8595addebad37b4b75f4737a342998ffea4d03eb926d879b4a4f392cabd09c911a2044f64d04b98241f3c65bc43df3891c07728cf7599ad6920b2004984a541f8750e53b8d8f170a589435f50dc4f66e3fd48b70c3429fa231a74570f4ed2a10dc57e8e83f2c68754b9cf2d0675ba81ae5486dd31a6adb88e1e0e7506c2a144906fe3bedb3be5477721e531af405495c19360320d33fb44bd713ddbe782ac387b1b3a8cf917206788af62f707f8b2c283355e991859b5a0033aded2e9b7bce65798d35b9b99e4140098eff99d693b2793634e65172a4ecda8cbb7c2d84da9a9c424a95115801c163e817de8e175bbafad834d5051020a78dc7fb3ceb0de81ae873f67a269d262e3b71a32669cc887d80487c7d10c085b4922da4606711fda8eae399ea23e75b008deeea18528af6d1c31445dbee9f432675c49b09ddf3777ff2262b962d44f8e8315c8648aef90825ec11239e2fec39c1b41ae798d18fc05f8df357bb936c5b2c5b577c1e94b844cdf66def3c244259074e8818b78a4faf789266ca807bf1961183a598eff1028840a1303e8d34ed07e682066d8336bc1586fa5cff694e621e485ceaa455b9e7c51871f12b675b7bd6c00fc38cbbb18be72b3d59ba78b05bd7483c444ee55192a823e651e49621afdef2d051bf537e63f1c3cc3a8fc3a37523e704447b4987d524bfc7ba3c21bb50e7d722ef838634d344b59bb6b889910778a0ef95b8c5e08005f6608eb8a70e304f7c3081906426727deaa99a85637c62f2f520cac96e4236b50c5d068d8f376c32b0af8475ebc4b8762b1ad268ada9193000420ded7cde7ff0177079461e8f8cfd852f5169ea5924a0eea43afc9f85e9354062ea23e37ddd991c7683ffa1f5117780f036bf76b6104b5b687c84faf43c9a22731954d3ea68cd3a0a34e3cb6dca8117272ae410feaea1f483816e3a222e346139556db6176e5c3ebe30385739b50536947410ac7faf0e78da1481e76370a2c85da17c38473b26059efd07952e21cf3d347de119fa6b7a8ff3dbefce08f9839a7bc75cb8ddd7ffcbf5de9be43cac8cfbc7189108b1626bd6a4b5e6e695f424644dd25b8151fd73973391df39ab80442300ddfca808f8782b428ceb2edf46e970c2bac89540be7cfa58fe93b5eaf6acd96abf6558b77bc90871ac596da36ea76442fefa12e823cc9f88d79aeb200d520dbaf3e41bd117cde45d586e6b09cc2cdef8a4bda5b4ae218f063ff511317f34a260dbf334421b7e79b1028b4e215d227d6ca032b41297d5f53a8980245f3cdd46e19ef99630f6857893b221b5d0e4792b0014be7bd65a2040b9856f3d0456a494e70ca9b1ca67766112d4c633183460b837fdedc7dd96af32c84f3a47f4c0fa9c1d8bb49e4f3a975277d11f41fc1c3fdee5183ff690a08d157db6e89a80a0fd6399fa574c94a9ba429a28126be3924a4389ca031d32f24c56e791031658032cde50f44b5df05e1f55edda68fdb21943ba8bce20388e7668215c3c7f49a2620eabc2cd50158e866acde2aa7f029e20f841df7c3645aab242557b864bb3fe41d41d3514fb85f6b241a0204456a56404a24b51f49a32564fc4e409cce2d14f4f785d05332f37e8c75e9d977a2eec748da99ebf7c0598d7239457092b02edb41b471fed8e28e46724fa508dbadfe74c178f696490efab77e8c48c3e844f798f5c89ea1c9d70197091ceb1d059c582637a91e95898f6cec6934509f75c8a23ff5d17ac98c4c86949bef57aec294c94a1b3e12a3539cc7b79d078da0f7f950521bf877735dafa69427cf31c9a5abbcbe03645d34f50040af089a5364ae4bf1d47ba816882ea8c6bd67f1ca4db202dd3ddf6f4ffe248b136d20b27eeab9df8076b7e883638584fe49624d0196db07e16f18b4294d1d9f3c107c2eae99d1099509c2e10bc70200a8b450dbb1e4b85ff20eca8df2ddf368af7ec173bd7356f98b92caa5dcdd10c3326d6ace004f3d30ecba8724513ada453554e30eac8305912b3e05b292bbb675ee4bb2e6d0845c34d91bf7c8acecdd5e2bf8b53cb19f0047af2b476766e0f4b3242f0053b0dc70f1d428ca6828b2ce803f8335696baa7a2d781799218e9f8abb554147c6a4427d1963ab994c55d04ef57020a6a56e0341e10b5fbedbce9ac187a73c7e8912e22fbe400fa6bcb58a81ef60aa1122ec8ca383c4251c12849f674a8e0f84825522694b7bc505eb8c0666fcf8204d2e97dc38c520d2b24bdd6916285bdc2df0b86a54082be8f72f03d438e25995a5f6190bb68bb401c2f04a8634d02d80e98416f518c6f5fa1fbfd941cf502e1bac0dec6c94fe2eaa7814638b0aa3e8beb498662fc64097e2ee3e5b7e5850eea48302a7d5868f3bca0e0d3190de2af2eff6b4f0dd906a2dbc0831c3af0059266efb971690f46d3829a6ac0566d5ed92c4e5a50b4934f16091fe3373a768b4214ae65838a2bfe5eed84ccbb5f1bec3114927879d9c7d1b0069b4ed7c57ca8bc40aaa5ffcb00b25f36ff062b003a9361d7777a9ae47dab7af4c5254dc4af07ccb0cd5e0bb3e86bd551ced7e7e6380f086a7348ec2a5431c4a489cc2f813da919361205092440fc41e39324093b689002f7b470433ed4d9bbde8c834a7eccb1db83ea4f202d41a8e77aa8306f88d7b7cda2815a61589ec7c37150182ee34e19808a153d5bb316de40dd0f180ebc7deeed0c5d115be1d716110fa28b84b380faa0dc4da97c488dc96a17b94803bfad6e36833f214fd55f8e66e2bba2daa2fc9507d4f29ad0a4d06da065db35c785de1cb8bd08b272dda189a3aced2cb1e5f39918274e7cf05eb2ee747a92fcd85731ca5a1d19b2bae20503843da1eb8e490d01ba3fd42060c8585d3f121cc3110c7739957393eb96616aa783fae094ddd7fc0162fa19908172dc3b43febe1db1214166cbae28277a8d7ace2093522a7ca463b2e149bf8afc75f70a12fdec86f0f48183e6bb99c4540a94eeb49456b24759c4a84e95b476698efdd20880d4e81713207654b5a132456d18a1c0cbf583fedb6f89912101c228cdac2c6168f0b9231be987ca0361bd2b26b91704b658e036870efedba99b6e6fd01e6fb43899a761a2843a2f2ff562b9ed83e8442ade06fbe1781ad60b14b2073730ba3df75d04510ef1515af6a45e6f0f70287ff885cd53e6ede10ce581f62d6e03409debdf623a66b83ddf82af072173eac64453708cde9cc203ab5b46e08e743445d3f1a4b9bb3b48bf29ed4f39a88998c287631eaae0e9db5002a0cc9d965573cf9e8fa40207a37f74a726c69a62180953446a3b76ec3befd3b8683f740620f601b98fa269a0e8f6d1346d0bf33fe49f5cfbc8c62494b7d983d87325272f768</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>站点相关</category>
        <category>博客相关</category>
      </categories>
  </entry>
  <entry>
    <title>原码-反码-补码</title>
    <url>/2021/06/06/%E5%8E%9F%E7%A0%81-%E5%8F%8D%E7%A0%81-%E8%A1%A5%E7%A0%81/</url>
    <content><![CDATA[<p>问题：byte类型的127加上1，得到的结果是-128</p>
<span id="more"></span>
<h3 id="一-原码">一、原码</h3>
<p>  计算机只能存储、计算二进制数据，一个byte有8个字节。那要计算两个十进制的数据，需要先将十进制数据转换为二进制数据。<br>
例十进制：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>7</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">7+1=8
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span></span></p>
<p>转换为二进制计算：8字节，高位补0</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>00000111</mn><mo>+</mo><mn>00000001</mn><mo>=</mo><mn>00001000</mn></mrow><annotation encoding="application/x-tex">0000 0111 + 0000 0001 = 0000 1000
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></span></p>
<p>  对于正数的计算，这个没有问题。但是对于负数如何表示？再去维护一个符号用于表示负数的代价过于高昂，于是采用了在8字节的最高位表示为1用于表示负数，只用7位表示计数。于是 -1 表示为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10000001</mn></mrow><annotation encoding="application/x-tex">1000 0001</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span></span></span></span>。对于正数，不需要额外的处理，反码就是源码本身。<br>
例十进制：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>−</mo><mn>2</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">2-2=0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p>
<p>反码的出现不仅表示了负数，而且还把减法可以表示为加上一个负数，从而不再需要设计减法计数器电路。但是计算会出现如下问题：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>00000010</mn><mo>+</mo><mn>10000010</mn><mo>=</mo><mn>10000100</mn></mrow><annotation encoding="application/x-tex">0000 0010 + 1000 0010 = 1000 0100
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span></span></p>
<p>转换为二进制可知，计算的结果为-4，计算出现了问题。</p>
<h3 id="二-反码">二、反码</h3>
<p>  为了解决这个问题，出现了反码。同样，<span style="color:red">正数的反码是其本身</span>；对于负数，就是最高位的符号位不变，其余位置取反，例如-2​二进制是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10000010</mn></mrow><annotation encoding="application/x-tex">1000 0010</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span></span></span></span>，则其反码为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>11111101</mn></mrow><annotation encoding="application/x-tex">1111 1101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span></span></span></span>，<br>
例十进制：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>−</mo><mn>2</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">2-2=0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p>
<p>则二进制：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000001</mn><msub><mn>0</mn><mtext>原码</mtext></msub><mo>+</mo><mn>1000001</mn><msub><mn>0</mn><mtext>原码</mtext></msub><mspace width="1em"></mspace></mrow><annotation encoding="application/x-tex">0000 0010_{原码 } + 1000 0010_{原码 } \quad 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">原</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">原</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000001</mn><msub><mn>0</mn><mtext>反码</mtext></msub><mo>+</mo><mn>1111110</mn><msub><mn>1</mn><mtext>反码</mtext></msub><mo>=</mo><mn>1111111</mn><msub><mn>1</mn><mtext>反码</mtext></msub></mrow><annotation encoding="application/x-tex">0000 0010_{反码 } + 1111 1101_{反码 } = 1111 1111_{反码 } 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">反</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">反</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">反</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>先转换为反码，再计算，得到的是反码的结果，但是要得到真正的结果，还需要再转为原码。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1111111</mn><msub><mn>1</mn><mtext>反码</mtext></msub><mo>−</mo><mo>−</mo><mo>&gt;</mo><mn>10000000</mn><mtext>原码</mtext></mrow><annotation encoding="application/x-tex">1111 1111_{反码 } --&gt; 1000 0000{原码 } 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">反</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord cjk_fallback">原</span><span class="mord cjk_fallback">码</span></span></span></span></span></span></p>
<p>结果为-0，可见，结果是正确的，但是出现-0的结果需要处理。</p>
<h3 id="三-补码">三、补码</h3>
<p>  同样，为了解决出现-0的情况，出现了补码。同样,<span style="color:red">正数的补码是其本身</span>；对于负数，负数的补码是其反码+1。例如，-2的二进制是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10000010</mn></mrow><annotation encoding="application/x-tex">1000 0010</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span></span></span></span>，则其反码为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>11111101</mn></mrow><annotation encoding="application/x-tex">1111 1101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span></span></span></span>，则其补码为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>11111110</mn></mrow><annotation encoding="application/x-tex">1111 1110</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span></span></span></span>。<br>
例十进制：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>−</mo><mn>2</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">2-2=0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p>
<p>则二进制：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000001</mn><msub><mn>0</mn><mtext>原码</mtext></msub><mo>+</mo><mn>1000001</mn><msub><mn>0</mn><mtext>原码</mtext></msub><mspace width="1em"></mspace></mrow><annotation encoding="application/x-tex">0000 0010_{原码 } + 1000 0010_{原码 } \quad 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">原</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">原</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000001</mn><msub><mn>0</mn><mtext>反码</mtext></msub><mo>+</mo><mn>1111110</mn><msub><mn>1</mn><mtext>反码</mtext></msub><mo>=</mo><mn>1111111</mn><msub><mn>1</mn><mtext>反码</mtext></msub></mrow><annotation encoding="application/x-tex">0000 0010_{反码 } + 1111 1101_{反码 } = 1111 1111_{反码 } 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">反</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">反</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">反</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000001</mn><msub><mn>0</mn><mtext>补码</mtext></msub><mo>+</mo><mn>1111111</mn><msub><mn>0</mn><mtext>补码</mtext></msub><mo>=</mo><mn>0000000</mn><msub><mn>0</mn><mtext>补码</mtext></msub></mrow><annotation encoding="application/x-tex">0000 0010_{补码 } + 1111 1110_{补码 } = 0000 0000_{补码 } 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">补</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">补</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">补</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>计算十进制结果：由于最高位是0，则表示正数，补码是原码本身，所以原码为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>00000000</mn></mrow><annotation encoding="application/x-tex">0000 0000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>，结果为0</p>
<h3 id="四-已知补码求原码">四、已知补码求原码</h3>
<blockquote>
<p>已知某补码为 1111 1110，求原码</p>
</blockquote>
<p>1.正数：<br>
  如果以0开头，则证明其为正数，原码就是补码本身，如 0000 0010的补码就是本身<br>
2.负数：<br>
  如果以1开头，则证明为负数，先 将最高位不变，其余7位取反。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1111111</mn><msub><mn>0</mn><mtext>补码</mtext></msub><mo>−</mo><mo>−</mo><mo>&gt;</mo><mtext>取反</mtext><mn>10000001</mn></mrow><annotation encoding="application/x-tex">1111 1110_{补码 } --&gt;取反  1000 0001 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">补</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">反</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span></span></span></span></span></p>
<p>  再+1，即可得到原码(-2)：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10000001</mn><mo>+</mo><mn>00000001</mn><mo>=</mo><mn>1000001</mn><msub><mn>0</mn><mtext>原码</mtext></msub></mrow><annotation encoding="application/x-tex">1000 0001 + 0000 0001 = 1000 0010_{原码}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">原</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<h3 id="五-普通结果验证">五、普通结果验证</h3>
<blockquote>
<p>5-3与3-5</p>
</blockquote>
<h4 id="1-运算1：">1.运算1：</h4>
<p>5+ (-3)  (省略了反码的计算步骤)</p>
<ol>
<li>原码：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000010</mn><msub><mn>1</mn><mtext>原码</mtext></msub><mo>+</mo><mn>1000001</mn><msub><mn>1</mn><mtext>原码</mtext></msub></mrow><annotation encoding="application/x-tex">0000 0101_{原码} + 1000 0011_{原码}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">原</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">原</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li>
<li>补码：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000010</mn><msub><mn>1</mn><mtext>补码</mtext></msub><mo>+</mo><mn>1111110</mn><msub><mn>1</mn><mtext>补码</mtext></msub><mo>=</mo><mn>0000001</mn><msub><mn>0</mn><mtext>补码</mtext></msub></mrow><annotation encoding="application/x-tex">0000 0101_{补码} + 1111 1101_{补码} = 0000 0010_{补码}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">补</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">补</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">补</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li>
<li>结果：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000001</mn><msub><mn>0</mn><mtext>补码</mtext></msub></mrow><annotation encoding="application/x-tex">0000 0010_{补码}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">补</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是正数，原码为本身，所以十进制为2.</li>
</ol>
<h4 id="2-运算2：">2.运算2：</h4>
<p>3+(-5)  (省略了反码的计算步骤)</p>
<ol>
<li>原码：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000001</mn><msub><mn>1</mn><mtext>原码</mtext></msub><mo>+</mo><mn>1000010</mn><msub><mn>1</mn><mtext>原码</mtext></msub></mrow><annotation encoding="application/x-tex">0000 0011_{原码} + 1000 0101_{原码}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">原</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">原</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li>
<li>补码：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000001</mn><msub><mn>1</mn><mtext>补码</mtext></msub><mo>+</mo><mn>1111101</mn><msub><mn>1</mn><mtext>补码</mtext></msub><mo>=</mo><mn>1111111</mn><msub><mn>0</mn><mtext>补码</mtext></msub></mrow><annotation encoding="application/x-tex">0000 0011_{补码} + 1111 1011_{补码} = 1111 1110_{补码}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">补</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">补</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">补</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li>
<li>结果：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1111111</mn><msub><mn>0</mn><mtext>补码</mtext></msub></mrow><annotation encoding="application/x-tex">1111 1110_{补码}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">补</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是负数，原码为最高位不变，其余位取反再加1，则为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10000010</mn></mrow><annotation encoding="application/x-tex">1000 0010</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span></span></span></span>，结果为-2。</li>
</ol>
<h3 id="六-128问题">六、-128问题</h3>
<blockquote>
<p>byte类型127+1 = -128</p>
</blockquote>
<ol>
<li>原码：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>01111111</mn><mo>+</mo><mn>00000001</mn></mrow><annotation encoding="application/x-tex">0111 1111 + 0000 0001</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span></span></span></span></li>
<li>补码：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>01111111</mn><mo>+</mo><mn>00000001</mn><mo>=</mo><mn>10000000</mn></mrow><annotation encoding="application/x-tex">0111 1111 + 0000 0001 = 1000 0000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></li>
<li>结果：-128没有原码与反码，只有补码，按照约定，补码为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10000000</mn></mrow><annotation encoding="application/x-tex">1000 0000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>则为-128。</li>
</ol>
<h3 id="七-延申：">七、延申：</h3>
<p>  实际上，现代计算机中的逻辑计算电路，都是按照补码来进行存储的。所以实际的计算过程中，直接使用补码。</p>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯算法</title>
    <url>/2021/11/14/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>回溯(backtrack)简介</p>
<span id="more"></span>
<h2 id="1-什么是回溯法">1. 什么是回溯法</h2>
<p>  回溯(backtrack)是按条件沿着树的深度去搜索，直到达到满足目标条件或不再可能达到目标，就回退一步树的深度，选择树的另一个分支，这种走不通就退回的换分支技术为回溯。<br>
  回溯的本质是一个穷举的深度优先搜索(DFS)，每一种深搜都会对应一棵树，其时间复杂度较高，与穷举的区别在于满足条件或者知道后面不可能满足条件后，就进行回退，寻找另一种可能的解。其降低了重复的穷举的步骤，时间复杂度比穷举低。</p>
<h2 id="2-什么情况需要回溯">2. 什么情况需要回溯</h2>
<p>  当只需要最优解时与最终解时，很容易想到贪心与动态规划，但是一旦要给出所有可能的解，这时就应该使用回溯了。</p>
<h2 id="3-回溯模板-java">3. 回溯模板(java)</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 并不是回溯，根据题目不同，会有不同</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">getResult</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">// 存储结果的List</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 存储临时结果、并用来回溯的List,这里使用了ArrayDeque(数组实现的队列),便于弹出最后一个元素。</span></span><br><span class="line">    Deque&lt;Integer&gt; tempDeque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>;</span><br><span class="line">    <span class="comment">// ? 代表可能有或没有</span></span><br><span class="line">    <span class="comment">// ?1 : 这里指 记录元素是否被使用，可能是数组或者set，这个可能由该方法传入，也可能方法内部创建(如果此情况，每一次递归深搜都会创建)，需要根据具体情况确定。</span></span><br><span class="line">    <span class="comment">// ?2 : 这里指 需要达成的目标，有时目标需要传入，如：所有可能的target和。</span></span><br><span class="line">    backTrack(nums, <span class="number">0</span>, resList, tempDeque, ?<span class="number">1</span>， ?<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> resList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backTrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> deepth, List&lt;List&lt;Integer&gt;&gt; resList, Deque&lt;Integer&gt; tempDeque)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (到达终点/达到条件) &#123;</span><br><span class="line">        <span class="comment">// 按条件存放结果</span></span><br><span class="line">        resList.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(temList));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (越界或者不合法状态) &#123; <span class="comment">// 例如 deepth == nums.length;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 剪枝(降低遍历的时间复杂度，写更好，可以不写)</span></span><br><span class="line">    <span class="keyword">if</span> (特殊状态) &#123;	<span class="comment">// 例如，例如要找和为5的，此时结果已经大于5了</span></span><br><span class="line">        <span class="comment">// 此时return，触发递归父级的回溯。</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 真正的深度递归与回溯</span></span><br><span class="line">    <span class="keyword">for</span> (扩展方式) &#123; <span class="comment">// 扩展方式可能多种，目前有 int i = 0; 也有int i = deepth的。。。</span></span><br><span class="line">        <span class="keyword">if</span> (扩展方式达到合法状态) &#123; <span class="comment">// 有时回溯递归也可能在if判断之外</span></span><br><span class="line">            修改操作; <span class="comment">// 根据题意</span></span><br><span class="line">            标记使用; </span><br><span class="line">            backTrack(nums, deepth + <span class="number">1</span>, resList, tempDeque, ?<span class="number">1</span>， ?<span class="number">2</span>); <span class="comment">// 深度需要+1</span></span><br><span class="line">            还原标记;</span><br><span class="line">            tempList.pollLast(); <span class="comment">// 回溯，将结果的最后一个元素弹出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-名词释义">4. 名词释义</h2>
<ol>
<li>回溯：搜索到结果后，撤销上一步的搜索，进行另一个可能结果的下一步搜索</li>
<li>剪枝：在不可继续搜索的情况下，绝对不可能满足目标情况下，提前return，触发递归父级的回溯，从而提前回溯。</li>
<li>记忆集：有时结果不需要重复的，这时可以用set存储结果，或者boolean数组标记对应的下标是否被使用，避免重复使用。</li>
<li>排序：由于回溯本质是一个优化过后的穷举，其时间复杂度较高，因此在处理之前，可以考虑对其进行<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(NlogN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>时间复杂度排序，由于时间复杂度只取最高的，因此该时间复杂度可以忽略不记。</li>
</ol>
<h2 id="5-例子">5. 例子</h2>
<h3 id="5-1-leetcode40-组合总和-ii">5.1 <a href="https://leetcode-cn.com/problems/combination-sum-ii/">LeetCode40 组合总和 II</a></h3>
<blockquote>
<p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。candidates 中的每个数字在每个组合中只能使用一次。<br>
注意：解集不能包含重复的组合。</p>
<p>例：输入: candidates = [10,1,2,7,6,1,5], target = 8,<br>
输出: [ [1,1,6], [1,2,5], [1,7], [2,6] ]</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; tempList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backTrack(candidates, tempList, resList, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> candidates: 给定的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idx: 此时处于树地深度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resList: 存储地最终结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temList: 存储地单个结果，用来回溯</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target: 要达到的目标结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backTrack</span><span class="params">(<span class="type">int</span>[] candidates, List&lt;Integer&gt; tempList, List&lt;List&lt;Integer&gt;&gt; resList, <span class="type">int</span> target, <span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="comment">// target == 0时，达到结果了，添加结果，return触发父级的回溯</span></span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            resList.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(tempList));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果到达树的最深处，return触发父级的回溯</span></span><br><span class="line">        <span class="keyword">if</span> (idx == candidates.length) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// set建立在回溯方法内部，因此每一次new都是不一样的，所以每一次递归都不一样</span></span><br><span class="line">        <span class="comment">// 只有在出递归后，在同一级递归里，同一个for循环里才是一样的。(同一个递归层级里有多次for循环，这个多次的for循环用的是同一个set，但是递归后用的就是新的了)</span></span><br><span class="line">        Set&lt;Integer&gt; tempSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 如果接下来要进行比较的num比目标大，则之后的深度遍历永远不可能达到目标，进行return剪枝，触发父级回溯</span></span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果包含已经使用的nums，则跳过该数</span></span><br><span class="line">            <span class="keyword">if</span> (tempSet.contains(candidates[i])) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tempList.add(candidates[i]);</span><br><span class="line">            <span class="comment">// 将该数接入结果</span></span><br><span class="line">            tempSet.add(candidates[i]);</span><br><span class="line">            <span class="comment">// 深度递归，target - num，同时深度 + 1</span></span><br><span class="line">            backTrack(candidates, tempList, resList, target - candidates[i], i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            tempList.remove(tempList.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-leetcode46-全排列">5.2 <a href="https://leetcode-cn.com/problems/permutations/">LeetCode46 全排列</a></h3>
<blockquote>
<p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <strong>所有可能的全排列</strong> 。你可以 <strong>按任意顺序</strong> 返回答案。</p>
<p>例：输入：nums = [1,2,3]<br>
输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;Integer&gt; tempList = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">boolean</span>[] used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> resList;</span><br><span class="line">        &#125;</span><br><span class="line">        backTrack(nums, <span class="number">0</span>, resList, tempList, used);</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums: 给定的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idx: 此时处于树地深度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resList: 存储地最终结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temList: 存储地单个结果，用来回溯</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> used: boolean 数组，用来标记对应下标的元素是否被使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backTrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> idx, List&lt;List&lt;Integer&gt;&gt; resList, Deque&lt;Integer&gt; tempList, <span class="type">boolean</span>[] used)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果到达最后，添加结果并return，触发父级的回溯。</span></span><br><span class="line">        <span class="keyword">if</span> (idx == nums.length) &#123;</span><br><span class="line">            resList.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(tempList));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!used[i]) &#123;</span><br><span class="line">                <span class="comment">// 将该下下标的元素标记为使用</span></span><br><span class="line">                tempList.addLast(nums[i]);</span><br><span class="line">                used[i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// 深度递归</span></span><br><span class="line">                backTrack(nums, idx + <span class="number">1</span>, resList, tempList, used);</span><br><span class="line">                <span class="comment">// 将该下标的元素标记为未使用</span></span><br><span class="line">                used[i] = <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">// 弹出最后一个元素，回溯</span></span><br><span class="line">                tempList.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>初识动态规划</title>
    <url>/2021/10/17/%E5%88%9D%E8%AF%86%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p>动态规划简介</p>
<span id="more"></span>
<h2 id="1-什么是动态规划">1.什么是动态规划</h2>
<blockquote>
<p>动态规划一般简称dp，动态规划求解的问题一般可以把复杂的问题拆分一个个子问题，最终通过求解最优子结构，来得到问题的解。</p>
</blockquote>
<h2 id="2-如何识别动态规划题目">2. 如何识别动态规划题目</h2>
<p>  问题一般只会要求求出最终解或最优解，但是可以穷举出所有可能的结果集，并且穷举的过程中出现了大量的重复子计算(将在例题中说明)，。如<strong>最长递增子序列、最小编辑距离、背包问题、凑零钱问题</strong>等等，都是动态规划的经典应用场景。<br>
  动态规划可以很容易看出用递归实现，但是递归的存在重复的递归，使得时间复杂度很高，这时递归不被允许使用，(可以使用记忆集(List或map)，将之前计算过的答案记下来再直接使用，避免重复计算，降低时间复杂度，注意，括号内的类容不是动态规划)。</p>
<h2 id="3-动态规划解题步骤">3. 动态规划解题步骤</h2>
<ol>
<li>当识别出可以使用动态规划后，先尝试去写出状态转移方程。</li>
<li>最终解：画出递归树，root节点即为要求出的最终解，找到最优解/最终解可以如何由子问题得出，以此确定状态转移方程。(最简单的是一维数组，有二维甚至多维数组)。</li>
<li>最优解：假设i-1处的最优解为dp[i-1]，推出dp[i]处的最优解的所有可能，一般使用Math.max或Math.min的到所有可能解的最优，与dp[i]处的解比较，得出最优解。</li>
</ol>
<h2 id="4-动态规划例题">4.动态规划例题</h2>
<h3 id="4-1-青蛙跳台阶问题-斐波那契数列">4.1  青蛙跳台阶问题（斐波那契数列）</h3>
<blockquote>
<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 <code>n</code> 级的台阶总共有多少种跳法。</p>
</blockquote>
<p>分析(递归树略)：</p>
<ol>
<li>台阶数为1：跳法：1种。跳：1。</li>
<li>台阶数为2：跳法：2种。跳：1 + 1、2。</li>
<li>台阶数为3：跳法：3种。跳：1+1+1、1+2、2+1。</li>
<li>台阶数为4：跳法：5种。跳：1+1+1+1、1+2+1、1+1+2、2+1+1、2+2。</li>
</ol>
<p> 可以看出，在找跳法时，是存在重复计算的。例如，台阶为3时，跳了1+1+1时，计算了跳到1的情况，这时1+2，又要计算一遍跳到1的情况(每次都要从台阶1跳)。<br>
 尝试写出转移方程：最终答案为n级台阶，那么n级台阶可以由n-1级台阶跳一级过来，也可以由n-2级台阶跳两级过来（如跳3级台阶，则可以从1级跳过来：这时跳法是1+2(如果跳1+1+1，则实际上从2级跳过来的，是重复计算，不应考虑，所以应从1直接跳到3，只能跳2级，原本只有一种跳法)，所以只有一种跳法；从2级跳过来：这时跳法是：1+1+1 (1+1  +1，前面的1+1是本来到2级台阶的方法，所以这是直接从2级台阶跳)与2+1。可以看到总跳法为两个子问题的和）。<strong>此题为求最终问题</strong>，所以得到状态转移方程：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[n] = dp[n-1] + dp[n-2]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">]</span></span></span></span></span></p>
<p> 另外此题的递归方程也是该方程<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n) = f(n-1) + f(n-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span>。可以很容易的写出递归求解，但是该递归的复杂度很高，时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>，因为存在重复的递归计算。例如求f[n]时需要求解f(n-2)，再求解f(n-1)时，也需要求解f(n-2)。导致时间复杂度很高。(可以考虑使用记忆集存储)。因此不考虑，以下为动态规划解答。时间复杂度分析：O(N)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 基线条件</span></span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 状态转移方程</span></span><br><span class="line">        dp[i] = dp[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-最大连续子序列和">4.2 最大连续子序列和</h3>
<blockquote>
<p>给定一个数组，求该数组的最大连续的子序列的和。例如[-1,-2,5-3,8,-1]，则最大子序列之和为10 ：5+(-3)+8</p>
</blockquote>
<p>分析：</p>
<ol>
<li>从索引0开始穷举，一个个加，得到从索引0的最大和为7，注意，此时已经计算了一遍连续数字的和。</li>
<li>从索引1开始穷举，一个个加，得到从索引最大的和为8，此时又计算了一遍连续数字的和。</li>
</ol>
<p> 假设已经求出前面的dp[n-1]处的最大子序列和，这时如果dp[n]是正数，dp[n] = dp[n-1] + nums[n]，如果dp[n]是负数，肯定nums[n]单独更大，所以状态转移方程为：时间复杂度分析：O(N)</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[n] = max(dp[n-1] + nums[n], nums[n])
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxRes</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 状态转移方程(当dp[i-1] + nums[i] &lt; num[i],即dp[i]为负数时，从nums[i]重新选)</span></span><br><span class="line">        dp[i] = Math.max(dp[i-<span class="number">1</span>] + nums[i], nums[i]);</span><br><span class="line">        <span class="comment">// 保存最大的解</span></span><br><span class="line">        maxRes = Math.max(maxRes, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxRes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串Hash</title>
    <url>/2022/11/27/%E5%AD%97%E7%AC%A6%E4%B8%B2Hash/</url>
    <content><![CDATA[<p>字符串的匹配算法之一，字符串匹配个人觉得比较复杂，所以单独写一篇</p>
<span id="more"></span>
<p>字符串查找算法中，一个很重要的算法是KMP，但是KMP的理解与记忆还是比较困难的。<br>
而字符串Hash算法则是一种比较容易简单的算法。但是字符串Hash算法仍然有其缺陷，就是Hash冲突的存在，无论怎么处理，冲突的概率只会降低，不会完全消失。但好在，一般的题目降低到较低的冲突概率即可AC。</p>
<h2 id="1-字符串hash原理">1.字符串Hash原理</h2>
<p>我们要在一个主串中查找一个模式串，则模式串的长度是已知的为n。字符串Hash的本质原理是枚举所有长度为n的子串的Hash值。所以如何能够快速的求出以left为起点，right为结束点，长度为n的字符串的Hash值。是最为关键的。<br>
字符串Hash使用进制思想求出Hash值，使用前缀和以O(1)的时间求出left到right的Hash值。</p>
<p>对于字符串<code>abc</code>，计算Hash值时，我们将其转换为一个p进制数，其Hash值计算如下(未取模)：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>a</mi><mtext>的</mtext><mi>A</mi><mi>S</mi><mi>C</mi><mi>I</mi><mi>I</mi><mtext>码值</mtext><mo>∗</mo><msup><mi>p</mi><mn>0</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>a</mi><mi>b</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>a</mi><mtext>的</mtext><mi>A</mi><mi>S</mi><mi>C</mi><mi>I</mi><mi>I</mi><mtext>码值</mtext><mo>∗</mo><msup><mi>p</mi><mn>1</mn></msup><mo>+</mo><mi>b</mi><mtext>的</mtext><mi>A</mi><mi>S</mi><mi>C</mi><mi>I</mi><mi>I</mi><mtext>码值</mtext><mo>∗</mo><msup><mi>p</mi><mn>0</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>a</mi><mi>b</mi><mi>c</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>a</mi><mtext>的</mtext><mi>A</mi><mi>S</mi><mi>C</mi><mi>I</mi><mi>I</mi><mtext>码值</mtext><mo>∗</mo><msup><mi>p</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi><mtext>的</mtext><mi>A</mi><mi>S</mi><mi>C</mi><mi>I</mi><mi>I</mi><mtext>码值</mtext><mo>∗</mo><msup><mi>p</mi><mn>1</mn></msup><mo>+</mo><mi>c</mi><mtext>的</mtext><mi>A</mi><mi>S</mi><mi>C</mi><mi>I</mi><mi>I</mi><mtext>码值</mtext><mo>∗</mo><msup><mi>p</mi><mn>0</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
a &amp;= a的ASCII码值 * p^0\\
ab &amp;= a的ASCII码值 * p^1 + b的ASCII码值 * p^0\\
abc &amp;= a的ASCII码值 * p^2 + b的ASCII码值 * p^1 + c的ASCII码值 * p^0\\
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.572324em;vertical-align:-2.036162em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.536162em;"><span style="top:-4.672054em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3.147946em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span></span></span><span style="top:-1.6238380000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.036162em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.536162em;"><span style="top:-4.672054em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">a</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">值</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span><span style="top:-3.147946em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">a</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">值</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">值</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span><span style="top:-1.6238380000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">a</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">值</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">值</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">值</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.036162em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>则字符串<code>bc</code>的Hash快速取值如下：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>b</mi><mi>c</mi><mo>=</mo><mi>b</mi><mtext>的</mtext><mi>A</mi><mi>S</mi><mi>C</mi><mi>I</mi><mi>I</mi><mtext>码值</mtext><mo>∗</mo><msup><mi>p</mi><mn>1</mn></msup><mo>+</mo><mi>c</mi><mtext>的</mtext><mi>A</mi><mi>S</mi><mi>C</mi><mi>I</mi><mi>I</mi><mtext>码值</mtext><mo>∗</mo><msup><mi>p</mi><mn>0</mn></msup><mo>=</mo><mi>a</mi><mi>b</mi><mi>c</mi><mo>−</mo><mi>a</mi><mo>∗</mo><msup><mi>p</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
bc =  b的ASCII码值 * p^1 + c的ASCII码值 * p^0 = abc - a * p^2
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.524108em;vertical-align:-0.512054em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.012054em;"><span style="top:-3.147946em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">b</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">值</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">值</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.512054em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>具体的我们可以有：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo stretchy="false">[</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mtext>到</mtext><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">]</mo><mo>=</mo><mi>H</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo stretchy="false">[</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">]</mo><mo>−</mo><mi>H</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo stretchy="false">[</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>∗</mo><mi>p</mi><mi>A</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>−</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Hash[left到right] = Hash[right] - Hash[left - 1] * pArr[right - left + 1]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">h</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">到</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">h</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">h</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></span></p>
<p>于是我们可以开辟两个数组，一个存储到下标1到下标i的Hash值，一个是下标i的进制值幂次结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意字符串的下标从1开始，我们的两个数组意义上也从1开始</span></span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 存储进制的幂次结果，p[0]不代表字符，由于是幂次，p^0 = 1;</span></span><br><span class="line">h[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// 存储下标1到i的Hash值，所以0只能初始化0.</span></span><br><span class="line"><span class="comment">// 这里的示例我们给131进制</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line">    h[i] = h[i - <span class="number">1</span>] * <span class="number">131</span> + s.charAt(i - <span class="number">1</span>); <span class="comment">// 对于第i个字符，其下标是i-1</span></span><br><span class="line">    p[i] = p[i - <span class="number">1</span>] * <span class="number">131</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对于下标left 到right 之间的字符Hash,left &lt;= right</span></span><br><span class="line">h[left到right] = h[right] - hash[left - <span class="number">1</span>] * P[right - left + <span class="number">1</span>];</span><br></pre></td></tr></table></figure>
<h2 id="2-双hash取模">2.双Hash取模</h2>
<p>单Hash取模，就是只模一次，比双模冲突的概率高一点。节省版面，只介绍双hash取模。</p>
<p>所谓的双Hash取模，即只取两次模。进制质数：131，13331 ； 取模质数： 1e9 + 7，1e9 + 9。<br>
这几个数都是经验值。两种数都取质数，能显著降低冲突。<br>
同时取模质数应该尽可能的大。同时数组要开long数组，避免溢出变为负数的情况。还要使用同余定理，避免求left到right减出负数的情况。</p>
<p>模板题：<a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">28. 找出字符串中第一个匹配项的下标 - 力扣（LeetCode）</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">mod1</span> <span class="operator">=</span> (<span class="type">int</span>) (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">mod2</span> <span class="operator">=</span> (<span class="type">int</span>) (<span class="number">1e9</span> + <span class="number">9</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="number">131L</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="number">13331L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> haystack.length();</span><br><span class="line">        <span class="comment">// long数组</span></span><br><span class="line">        <span class="type">long</span>[] hArr1 = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">long</span>[] hArr2 = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">long</span>[] pArr1 = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">long</span>[] pArr2 = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        hArr1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        hArr2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        pArr1[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        pArr2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 第一个字符记为1，所以到等于n结束</span></span><br><span class="line">        <span class="comment">// 处理Hash与进制的幂次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">// 下标为i时，找的是i-1个字符</span></span><br><span class="line">            hArr1[i] = ((hArr1[i - <span class="number">1</span>] * p1) % mod1 + haystack.charAt(i - <span class="number">1</span>)) % mod1;</span><br><span class="line">            hArr2[i] = ((hArr2[i - <span class="number">1</span>] * p2) % mod2 + haystack.charAt(i - <span class="number">1</span>)) % mod2;</span><br><span class="line"></span><br><span class="line">            pArr1[i] = (pArr1[i - <span class="number">1</span>] * p1) % mod1;</span><br><span class="line">            pArr2[i] = (pArr2[i - <span class="number">1</span>] * p2) % mod2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> needle.length();</span><br><span class="line">        <span class="type">long</span> <span class="variable">ansHash1</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">ansHash2</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="comment">// 计算要匹配字符串的Hash值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            ansHash1 = ((ansHash1 * p1) % mod1 + needle.charAt(i - <span class="number">1</span>)) % mod1;</span><br><span class="line">            ansHash2 = ((ansHash2 * p2) % mod2 + needle.charAt(i - <span class="number">1</span>)) % mod2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据前缀Hash枚举所有Hash，i从1开始。原因见上面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n - k + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> i + k - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">tempHash1</span> <span class="operator">=</span> hArr1[right] - hArr1[left - <span class="number">1</span>] * pArr1[right - left + <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// (-x % mod + mod) % mod 同余定理，避免减出负数的情况,。如果是正数，与该公式结果相同</span></span><br><span class="line">            tempHash1 = (tempHash1 % mod1 + mod1) % mod1;</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">tempHash2</span> <span class="operator">=</span> hArr2[right] - hArr2[left - <span class="number">1</span>] * pArr2[right - left + <span class="number">1</span>];</span><br><span class="line">            tempHash2 = (tempHash2 % mod2 + mod2) % mod2;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tempHash1 == ansHash1 &amp;&amp; tempHash2 == ansHash2) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>散列函数与分离链接法</title>
    <url>/2022/04/10/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E4%B8%8E%E5%88%86%E7%A6%BB%E9%93%BE%E6%8E%A5%E6%B3%95/</url>
    <content><![CDATA[<p>《数据结构与算法分析Java语言描述》第五章5.2与5.3节<strong>读书笔记</strong></p>
<span id="more"></span>
<h2 id="5-1-散列">5.1 散列</h2>
<ol>
<li>
<p>理想的散列是只包含固定大小的数组，</p>
</li>
<li>
<p>通常查找是对某个数据域进行的，这部分叫做关键字(key)</p>
</li>
<li>
<p>每个关键字按照一定规则，均匀的映射到整个数组中。这个映射叫做散列函数</p>
</li>
</ol>
<div class="alert alert-info"><div class="icon"><i class="fa fa-info"></i></div><div class="text"><p>优秀的散列函数，能够将映射冲突的可能性降低到最小</p>
</div></div>
<h2 id="5-2-散列函数">5.2 散列函数</h2>
<p>  如果输入的关键字都是整数，则一般的简单映射函数就是使用<code>key % tableSize</code>，直接取模。同时保证表的大小为素数，是一个好得做法。但是通常得关键字都是字符串。则散列函数有以下方法可以考虑。</p>
<h3 id="5-2-1-散列函数实现方案一">5.2.1 散列函数实现方案一</h3>
<blockquote>
<p>把字符串得ASCII码或者Unicode码的值相加。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(String key, <span class="type">int</span> tableSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hashVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; key.length(); i++) &#123;</span><br><span class="line">        hashVal += key.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hashVal % tableSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  以上函数，实现简单，计算方便，但是如果表很大，则表的的高位利用率较低，导致冲突率增大。<br>
假设表的大小是一个素数：tableSize = 10007，并假设所有关键字至多8个字符(ASCII字符)，则该散列函数只能计算得到 0~1016（127*8）范围内的值。之后对tableSize 进行取余操作，导致1017之后的数是一定取不到的。从而分配不到高位的数组上去。</p>
<div class="alert alert-info"><div class="icon"><i class="fa fa-info"></i></div><div class="text"><p>Java的散列表如HashMap等只会进行扩容，并不会缩小数组，如果采用ASCII码方案，HashMap的数组扩容后，使用不满，可能导致上述的情况发生。</p>
</div></div>
<h3 id="5-2-2-散列函数实现方案二">5.2.2 散列函数实现方案二</h3>
<blockquote>
<p>假设key至少有三个字符，只考察前三个字符，将ASCII码乘起来得到一个整数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hash2</span><span class="params">(String key, <span class="type">int</span> tableSize)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (key.charAt(<span class="number">0</span>) + <span class="number">27</span> * key.charAt(<span class="number">1</span>) + <span class="number">27</span> * <span class="number">27</span> * key.charAt(<span class="number">2</span>)) % tableSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  值27表示ASCII字符加一个空格，第一个字符就是本来的值，第二个字符是27 * 原值，第三个字符是27*27*原值。假设在完全随机的情况下，则3个字符的组合有19683种组合的可能。大于tableSize = 10007，则可以均匀分布。但是单词是有一定规律的，并不是均匀分布的。根据统计单词的前三个字母只有2851种组合，所以这种方法还是不适合。</p>
<div class="alert alert-info"><div class="icon"><i class="fa fa-info"></i></div><div class="text"><p>Java的HashMap的数组最大为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>30</mn></msup></mrow><annotation encoding="application/x-tex">2^{30}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>，如果采用这种方案，最大可能需要所有计算和大于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>30</mn></msup></mrow><annotation encoding="application/x-tex">2^{30}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>的情况，需要7位的情况。</p>
</div></div>
<h3 id="5-2-3-散列函数实现方案三">5.2.3 散列函数实现方案三</h3>
<blockquote>
<p>所有字符参与计算，计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>k</mi><mi>e</mi><mi>y</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>K</mi><mi>e</mi><mi>y</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>∗</mo><mn>3</mn><msup><mn>7</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">\sum_{i=0}^{keySize - 1} Key[i]* 37^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2887179999999998em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9890079999999999em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mord mathdefault mtight">e</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord"><span class="mord">7</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span>，使用horner法则 计算一个37的n次多项式,37是一个质数。</p>
</blockquote>
<p>  根据horner法则计算一个37的多项式：例如：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>k</mi></msub><mo>=</mo><msub><mi>k</mi><mn>0</mn></msub><mo>+</mo><mn>37</mn><msub><mi>k</mi><mn>1</mn></msub><mo>+</mo><mn>3</mn><msup><mn>7</mn><mn>2</mn></msup><msub><mi>k</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">h_k = k_0 + 37k_1 + 37^{2}k_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord">3</span><span class="mord">7</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.964108em;vertical-align:-0.15em;"></span><span class="mord">3</span><span class="mord"><span class="mord">7</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则根据horner法则可以转为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>k</mi></msub><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><msub><mi>k</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>∗</mo><mn>37</mn><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>∗</mo><mn>37</mn><mo>+</mo><msub><mi>k</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">h_k = ((k_2) * 37 + k_1)*37 + k_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，可以简化计算复杂度。将其扩展到n项式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hash3</span><span class="params">(String key, <span class="type">int</span> tableSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hashVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; key.length(); i++) &#123;</span><br><span class="line">        hashVal += <span class="number">37</span> * hashVal + key.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    hashVal %= tableSize;</span><br><span class="line">    <span class="comment">// hashVal可能会存在int溢出的问题，导致为负数，因为取余tableSize后，则hashVal绝对值一定小于tableSize，相加将其变正即可</span></span><br><span class="line">    <span class="keyword">if</span> (hashVal &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        hashVal += tableSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hashVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  改散列函数基本可用，且实现简单。但是如果关键字特别长，则计算耗时特别多，一个行之有效的方法是只取奇数位置的字符串进行计算。不能只取部分的原因是，例如地址之类的，前半部分都是一样的。</p>
<h2 id="5-3-哈希冲突之分离链接法">5.3 哈希冲突之分离链接法</h2>
<blockquote>
<p>将散列到数组同一个位置上的所有元素都保留到同一个列表中。并连接到数组对应下标上的位置(数组中并不存储元素，只存储于列表)</p>
</blockquote>
<h3 id="5-3-1-具体操作">5.3.1 具体操作</h3>
<p>  为简化操作，这里假设关键字是前10个完全平方数，并假设散列函数是hash(x) = x mod 10（表的大小不是素数(是10)，这里是为简化操作）。<br>
<img src="/2022/04/10/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E4%B8%8E%E5%88%86%E7%A6%BB%E9%93%BE%E6%8E%A5%E6%B3%95/分离链接散列表.png" alt="分离链接散列表" style="zoom:80%;"><br>
  先计算出hash，确定应该是数组的哪个下标的位置，然后遍历该下标的链表。如果执行插入，则查看当前插入的元素是否已经在链表上，不在则将值插入到链表头(最近操作的值，在未来的使用概率越大，可以加快查找)。</p>
<div class="alert alert-info"><div class="icon"><i class="fa fa-info"></i></div><div class="text"><p>Jdk8的hashMap从之前的头插法改为尾插法，是为了解决多线程下，hashMap扩容时rehash时导致的链表成环的问题(并发请用correntHashMap)。jdk8及之后改为了尾插法。</p>
</div></div>
<p>  本次实现的对象，必须实现equals方法于hashCode方法。hashCode用来计算判断应该链在哪条链表下，equals用于在hsah冲突后判断是否时同一个对象。如下是一个实现。</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>链接法的大部分实现</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeparateChainingHashTable</span>&lt;AnyType&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_TABLE_SIZE</span> <span class="operator">=</span> <span class="number">101</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * List数组,数组的每个位置准出List(链表)，就是之前说的hash表的数组</span></span><br><span class="line"><span class="comment">     * 位置上的链表，就是链接上去的链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;AnyType&gt;[] theLists;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> currentSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参构造调用有参构造，并设置默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SeparateChainingHashTable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// this指代本类，类名()就是构造方法</span></span><br><span class="line">        <span class="built_in">this</span>(DEFAULT_TABLE_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组链表的构造方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 数组的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SeparateChainingHashTable</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化指定长度的链表数组</span></span><br><span class="line">        theLists = <span class="keyword">new</span> <span class="title class_">LinkedList</span>[nextPrime(size)];</span><br><span class="line">        <span class="comment">// 给数组上的每一个位置创建链表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; theLists.length; i++) &#123;</span><br><span class="line">            theLists[i] = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算hash值，并计算出应该插入数组上的哪个下标的链表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 要计算插入位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 要插入位置的下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">myHash</span><span class="params">(AnyType x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hashVal</span> <span class="operator">=</span> x.hashCode();</span><br><span class="line">        hashVal %= theLists.length;</span><br><span class="line">        <span class="keyword">if</span> (hashVal &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            hashVal += theLists.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hashVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩容并进行reHash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reHash</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;AnyType&gt;[] oldLists = theLists;</span><br><span class="line">        <span class="comment">// new创建的新的list</span></span><br><span class="line">        theLists = <span class="keyword">new</span> <span class="title class_">List</span>[nextPrime(<span class="number">2</span> * theLists.length)];</span><br><span class="line">        <span class="comment">// 创建链表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; theLists.length; j++) &#123;</span><br><span class="line">            theLists[j] = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        currentSize = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 将所有oldList中的元素插入新的List</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; oldLists.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (AnyType item : oldLists[i]) &#123;</span><br><span class="line">                insert(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 待插入的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(AnyType x)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取x应该插入的那个链表</span></span><br><span class="line">        List&lt;AnyType&gt; whichList = theLists[myHash(x)];</span><br><span class="line">        <span class="keyword">if</span> (!whichList.contains(x)) &#123;</span><br><span class="line">            whichList.add(x);</span><br><span class="line">            <span class="comment">// 每插入一个元素currentSize就会加1，当currentSize大于数组长度后，就会rehash扩容</span></span><br><span class="line">            currentSize += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (currentSize &gt; theLists.length) &#123;</span><br><span class="line">                reHash();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断整个数组链表是否包含某个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 要查询的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true如果包含</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(AnyType x)</span> &#123;</span><br><span class="line">        <span class="comment">// 计算在那条链表</span></span><br><span class="line">        List&lt;AnyType&gt; whichList = theLists[myHash(x)];</span><br><span class="line">        <span class="keyword">return</span> whichList.contains(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除元素x</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 待删除的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(AnyType x)</span> &#123;</span><br><span class="line">        List&lt;AnyType&gt; whichList = theLists[myHash(x)];</span><br><span class="line">        <span class="keyword">if</span> (whichList.contains(x)) &#123;</span><br><span class="line">            whichList.remove(x);</span><br><span class="line">            currentSize--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; theLists.length; i++) &#123;</span><br><span class="line">            theLists[i].clear();</span><br><span class="line">        &#125;</span><br><span class="line">        currentSize = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<blockquote>
<p>装填因子<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span>：散列表中的元素个数与数组大小的比值</p>
</blockquote>
<p>  上例的装填因子<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span>=1.0，链表的平均长度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span>(计算方法如上定义，平均每个列表有多少个元素)，一次平均查找需要1+<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">\lambda / 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">λ</span><span class="mord">/</span><span class="mord">2</span></span></span></span>。由此可以得出，表大小对查找效率基本无影响，影响较大的是装填因子。分离散列的一般做法是让<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span> = 1，</p>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数学基础与要分析的问题</title>
    <url>/2021/04/05/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E4%B8%8E%E8%A6%81%E5%88%86%E6%9E%90%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>《数据结构与算法分析Java语言描述》第一章2.1~2.3节<strong>读书笔记</strong></p>
<span id="more"></span>
<h2 id="1-数学基础">1. 数学基础</h2>
<h3 id="1-1-定义">1.1 定义</h3>
<p>1 定义：如果存在正常数c和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">N \ge n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>c</mi><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N) \le cf(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，则记为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N)=O(f(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>。<br>
  释义：T(N)的增长率小于或等于f(N)。</p>
<p>2 定义：如果存在正常数c和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">N \ge n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>≥</mo><mi>c</mi><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N) \ge cf(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，则记为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N)=\Omega(g(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>。<br>
  释义：T(N)的增长率大于或等于g(N)。 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span> 读作&quot;omega&quot;。</p>
<p>3 定义：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N)= \Theta(h(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>当且仅当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N)=O(h(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N) = \Omega(h(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，<br>
  释义：T(N)的增长率等于h(N)。 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span> 读作&quot;omega&quot;。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Θ</span></span></span></span> 读作&quot;Theta&quot;。</p>
<p>4 定义：如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N) = O(p(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo mathvariant="normal">≠</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N) \ne \Theta(p(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>o</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N) = o(p(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>。<br>
  释义：T(N)的增长率小于p(N)。 读作&quot;小o&quot;。不同于大O，大O包含<strong>增长率相同</strong>的可能性。</p>
<h3 id="1-2-法则">1.2 法则</h3>
<p><strong>法则1</strong>：如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_1(N) = O(f(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_2(N)=O(g(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>,那么：</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>T</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>+</mo><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_1(N) + T_2(N) = O(f(N) + g(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>∗</mo><msub><mi>T</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_1(N) * T_2(N) = O(f(N) * g(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></li>
</ul>
<p><strong>法则2</strong>：如果T(N)是一个k次多项式，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>θ</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mi>k</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N)=\theta(N^k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> (T(N)的增长率与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>N</mi><mi>K</mi></msup></mrow><annotation encoding="application/x-tex">N^K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span></span></span></span></span></span></span></span>相同)</p>
<p><strong>法则3</strong>：对任意常数k，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msup><mi>g</mi><mi>k</mi></msup><mi>N</mi><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">log^kN=O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.043548em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，它告诉我们对数的增长非常缓慢。(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msup><mi>g</mi><mi>k</mi></msup><mi>N</mi></mrow><annotation encoding="application/x-tex">log^kN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.043548em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 对数的k次方)</p>
<h3 id="1-3-大o表示法">1.3 大O表示法</h3>
<blockquote>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N)=Of(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p>
</blockquote>
<p>例如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N)=O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，(N平方级)，人们不说&quot;…级的&quot;，而说&quot;大O…&quot;</p>
<ol>
<li>上界：当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N)=Of(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>时，保证函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>的增速不快于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，因此<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>的一个上界。</li>
<li>下界：同上，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>的一个下界。</li>
</ol>
<p>如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N)=O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>成立，则显然<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N)=O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>成立，但<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N)=O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>最佳。</p>
<p>在表示大O时，低阶项一般可以忽略，常数项也可以弃掉。</p>
<p>  例如：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>N</mi><mi mathvariant="normal">/</mi><mn>1.5</mn><mo>+</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">T(N) = N/1.5 + 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">/</span><span class="mord">1</span><span class="mord">.</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，这是一个线性函数，系数与常数项可以省略，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N)=O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，</p>
<h3 id="1-4-增长率的比较">1.4 增长率的比较</h3>
<p>通过计算极限<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>i</mi><msub><mi>m</mi><mrow><mi>N</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></msub><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">lim_{N \rightarrow \infty} (f(N)/g(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>来确定两个函数f(N)与g(N)的相对增长率，必要时可使用<strong>洛必达法则</strong></p>
<ul>
<li>极限是0：意味着<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(N) = O(g(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>。</li>
<li>极限是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo stretchy="false">(</mo><mtext>常数</mtext><mo stretchy="false">)</mo><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">c(常数)\ne0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord cjk_fallback">常</span><span class="mord cjk_fallback">数</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，意味着<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(N) = \Theta(g(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></li>
<li>极限是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>：意味着<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(N)=O(f(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></li>
<li>极限摆动：二者无关(本书中不会出现)</li>
</ul>
<p>洛必达法则：若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>i</mi><msub><mi>m</mi><mrow><mi>N</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></msub><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">lim_{N \rightarrow \infty} f(N) = \infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>i</mi><msub><mi>m</mi><mrow><mi>N</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></msub><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">lim_{N \rightarrow \infty} g(N)= \infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>i</mi><msub><mi>m</mi><mrow><mi>N</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></msub><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>l</mi><mi>i</mi><msub><mi>m</mi><mrow><mi>N</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></msub><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msup><mi>g</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">lim_{N \rightarrow \infty} f(N)/g(N) = lim_{N \rightarrow \infty} f&#x27;(N)/g&#x27;(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>。</p>
<table><br></table>
<h2 id="2-要分析的问题">2. 要分析的问题</h2>
<blockquote>
<p>运行时间，一般分析最坏的情况。</p>
<p>运行空间：现代计算机而言，空间一般可以不考虑</p>
</blockquote>
<h2 id="3-运行时间计算">3. 运行时间计算</h2>
<blockquote>
<p>计算大O的运行时间，大O是一个上界。分析的结果为程序在一定时间范围内能够终止运行提供了保证。程序可能提前结束，但绝不可能错后。</p>
</blockquote>
<h3 id="3-2-一般法则">3.2 一般法则</h3>
<p><strong>法则1</strong>：for循环<br>
  一个for循环的的运行时间至多是该for循环内部语句的运行时间乘以迭代次数。</p>
<p><strong>法则2</strong>：嵌套for循环<br>
  一组嵌套for循环内部的一条语句运行的总时间，为该语句运行时间乘以该组所有for循环的大小的乘积。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;n ;j++;) &#123;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  如上：每一个for循环的时间复杂度都是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，两个嵌套则为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p>
<p><strong>法则3</strong>：顺序语句<br>
  将各个语句的运行时间求和即可。其中最大值就是所得的运行时间。如下程序，首先是花费<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，接着是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，因此总量也是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">    a[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n; j++) &#123;</span><br><span class="line">        a[i] += a[j] + i + j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>法则4</strong>：if/else语句<br>
  一个if/else语句的运行时间从不超过判断的运行时间再加上S1和S2中运行时间长者的总运行时间。</p>
<h3 id="3-3-其他情形">3.3 其他情形</h3>
<p>  显然，分析的策略是从内部向外开展，如果有方法调用，那么首先需要分析这些方法调用。如果有递归过程，有以下几种可能。</p>
<ol>
<li>实际是for循环的递归：如下，分析很简单，本质上就是一个O(N)的复杂度。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>普通正常的递归：实际上正常使用的递归，转换成一个循环结构是非常困难的。如下程序，它递归的使用效率非常低。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  该程序的效率实际上非常低。令<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>为调用函数fib(n)的运行时间。 <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N) = fib(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></strong><br>
分析：</p>
<ol>
<li>
<p>如果N=0或N=1，则在第2行即可执行完毕，则可以说<strong>T(0)=T(1) =1</strong>。</p>
</li>
<li>
<p>若N&gt;2，则执行该方法的时间是第2行的常数工作加上第5行的工作，第5行由一次加法和两次方法调用组成。</p>
</li>
<li>
<p>方法调用必须使用他们自己来分析他们，第一次方法调用是fib(n-1),按照T的定义(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N) = fib(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>)，它需要T(N-1)个时间单元。类似，第二次方法调用需要T(N-2)个时间单元。</p>
</li>
<li>
<p>此时总的时间需求为T(N-1) + T(N-2) + 2，其中2指第二行的工作加上第五行的加法，于是对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>≥</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">N \ge  2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，有下列运行时间公式。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">T(N) = T(N-1) + T(N-2) + 2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></span></p>
<p>但是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fib(N) = fib(N-1) + fib(N-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span> (由程序的递归条件可以确定)，因此由归纳法容易证明，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>≥</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(N) \ge fib(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span> 。在1.2.5节证明过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mo stretchy="false">(</mo><mn>5</mn><mi mathvariant="normal">/</mi><mn>3</mn><msup><mo stretchy="false">)</mo><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">fib(N) &lt; (5/3)^N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">5</span><span class="mord">/</span><span class="mord">3</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span> (斐波那契数列)，类似,可以证明<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>≥</mo><mo stretchy="false">(</mo><mn>3</mn><mi mathvariant="normal">/</mi><mn>2</mn><msup><mo stretchy="false">)</mo><mi>N</mi></msup><mspace width="1em"><mi>N</mi><mo>&gt;</mo><mn>4</mn></mspace></mrow><annotation encoding="application/x-tex">fib(N) \ge (3/2)^N \quad N&gt;4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mord">/</span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>；从而证明这个的运行时间以指数速度增长。</p>
<p>该递归耗时长的原因是违背了递归的第四条主要规则<strong>合成效益法则</strong>。因为在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fib(n) = fib(n-1) + fib(n-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span>已经计算一次<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fib(n-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span>了，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fib(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>又要计算一次。违背了格言&quot;计算任何事情不要超过一次&quot;。</p>
</li>
</ol>
<h3 id="3-4-最大子序列和问题的求解">3.4 最大子序列和问题的求解、</h3>
<blockquote>
<p>子序列之和：给定一个数组，例如[-1,-2,5-3,8,-1]，则最大子序列之和为10 ：5+(-3)+8<br>
子序列：原数组中连续的数组成新的数组</p>
</blockquote>
<p>  叙述四个算法求解提出的最大子序列和问题。</p>
<h4 id="3-4-1-算法一">3.4.1 算法一</h4>
<p>  如下算法穷举所有的可能。本算法并不计算实际的子序列，实际的计算还要添加一些额外的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxSubSum1</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;    <span class="comment">// 确定算的起始位置	</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=i; j&lt;a.length; j++) &#123;    <span class="comment">// 确定计算求和的范围</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">thisSum</span> <span class="operator">=</span> <span class="number">0</span>;                <span class="comment">// 记录临时值，确定是否比最大值大</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt;= j; k++) &#123;  <span class="comment">// 确定该范围内的子序列的和的值。(实际上结果只有一个子序列)</span></span><br><span class="line">                    thisSum += a[k];            </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (thisSum &gt; maxSum) &#123;</span><br><span class="line">                    maxSum = thisSum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>  该算法的三个嵌套for循环都是O(N),所以最终的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。忽略常数与低阶项。<br>
精确分析由 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mi>i</mi></mrow><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mi>i</mi></mrow><mi>j</mi></msubsup><mn>1</mn></mrow><annotation encoding="application/x-tex">\sum_{i=0}^{N-1} \sum_{j=i}^{N-1} \sum_{k=i}^j 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.417049em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span></span></span></span> 得到。该&quot;和&quot;指出程序被执行多少次被执行。从内向外求值。特别地，将用到前N个整数求和与前N个平方数的和公式。</p>
<p>首先有</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mi>i</mi></mrow><mi>j</mi></munderover><mn>1</mn><mo>=</mo><mi>j</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mspace width="1em"><mo stretchy="false">(</mo><mi>j</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mtext>个</mtext><mn>1</mn><mtext>相加</mtext><mo stretchy="false">)</mo></mspace></mrow><annotation encoding="application/x-tex">\sum _{k=i}^j 1 = j-i+1 \quad (j-i+1个1相加)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.16089em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8587770000000001em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.347113em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord cjk_fallback">个</span><span class="mord">1</span><span class="mord cjk_fallback">相</span><span class="mord cjk_fallback">加</span><span class="mclose">)</span></span></span></span></span></p>
<p>得到</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mi>i</mi></mrow><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></munderover><mo stretchy="false">(</mo><mi>j</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mspace width="1em"><mo stretchy="false">(</mo><mtext>带入可得从</mtext><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>3...</mn><mo>+</mo><mi>N</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo></mspace></mrow><annotation encoding="application/x-tex">\sum _{j=i} ^{N-1} (j-i+1) = \frac{(N-i+1)(N-i)}{2} \quad (带入可得从1+2+3...+N-i)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.2421130000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord cjk_fallback">带</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">从</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span></span></p>
<p>还有<br>
第一行理解：令i=i-1，求和下标 i-1=0-&gt;i=1，上标 i-1=N-1-&gt;i=N。</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></munderover><mfrac><mrow><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mfrac><mrow><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msup><mi>i</mi><mn>2</mn></msup><mo>−</mo><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mfrac><mn>3</mn><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>N</mi><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mfrac><mrow><mi>N</mi><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>2</mn><mi>N</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>6</mn></mfrac><mo>−</mo><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mfrac><mn>3</mn><mn>2</mn></mfrac><mo stretchy="false">)</mo><mfrac><mrow><mi>N</mi><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>+</mo><mfrac><mrow><msup><mi>N</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>N</mi><mo>+</mo><mn>2</mn></mrow><mn>2</mn></mfrac><mi>N</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><msup><mi>N</mi><mn>3</mn></msup><mo>+</mo><mn>3</mn><msup><mi>N</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>N</mi></mrow><mn>6</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} 
\sum _{i=0} ^{N-1} {\frac{(N-i+1)(N-i)}{2}} &amp;= \sum_{i=1}^N \frac{(N-i+1)(N-i+2)}{2} \\
&amp;= \frac{1}{2} \sum_{i=1}^N i^2-(N+\frac{3}{2}) + \frac{1}{2}(N^2+3N+2)\sum_{i=1}^N 1 \\
&amp;= \frac{1}{2}\frac{N(N+1)(2N+1)}{6}-(N+\frac{3}{2})\frac{N(N+1)}{2}+\frac{N^2+3N+2}{2}N\\
&amp;= \frac{N^3+3N^2+2N}{6}
\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:11.766226000000003em;vertical-align:-5.633113000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.133113000000002em;"><span style="top:-8.133113000000002em;"><span class="pstrut" style="height:3.828336em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000004em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span style="top:-4.727108000000001em;"><span class="pstrut" style="height:3.828336em;"></span><span class="mord"></span></span><span style="top:-1.658331em;"><span class="pstrut" style="height:3.828336em;"></span><span class="mord"></span></span><span style="top:0.8187770000000013em;"><span class="pstrut" style="height:3.828336em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.633113000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.133113000000002em;"><span style="top:-8.133113000000002em;"><span class="pstrut" style="height:3.828336em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-4.727108000000001em;"><span class="pstrut" style="height:3.828336em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span></span></span><span style="top:-1.658331em;"><span class="pstrut" style="height:3.828336em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:0.8187770000000013em;"><span class="pstrut" style="height:3.828336em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.633113000000002em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<h4 id="3-4-2-算法二">3.4.2 算法二</h4>
<p>  如下算法具有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的复杂度。<br>
该算法的区别在于，发现不需要使用确定起始位置，只需要求和子序列的起始位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] a = &#123;<span class="number">1</span>, -<span class="number">4</span>, <span class="number">5</span>, -<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, -<span class="number">4</span>, -<span class="number">7</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> maxSumSub2(a);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxSumSub2</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 确定子序列求和范围的起始位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;a.length ; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">thisSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 确定子序列的终止位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; a.length; j++) &#123;</span><br><span class="line">            thisSum += a[j];</span><br><span class="line">            <span class="keyword">if</span> (thisSum &gt; maxSum) &#123;</span><br><span class="line">                maxSum = thisSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-4-3-算法三">3.4.3 算法三</h4>
<p>  如下递归算法具有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(NlogN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>的复杂度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] a = &#123;<span class="number">1</span>, -<span class="number">4</span>, <span class="number">5</span>, -<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, -<span class="number">4</span>, -<span class="number">7</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> maxSumRec(a, <span class="number">0</span>, a.length-<span class="number">1</span>);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxSumRec</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="comment">// 递归的出口</span></span><br><span class="line">    <span class="comment">// 如果left==right，说明只有一个元素，返回该元素或0即可</span></span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[left] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[left];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// int center = (left + right)/2;</span></span><br><span class="line">    <span class="comment">// 推荐，避免和超出int最大范围的可能</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">center</span> <span class="operator">=</span> left - (left -right)/<span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 提前递归调用，因为递归到底的时候不需要做额外的处理，例如交换</span></span><br><span class="line">    <span class="comment">// 递归获得左半的最大子序列和</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLeftSum</span> <span class="operator">=</span> maxSumRec(a, left, center);</span><br><span class="line">    <span class="comment">// 递归获得右半的最大子序列和</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxRightSum</span> <span class="operator">=</span> maxSumRec(a, center+<span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化递归二分时，左边连着center的最大值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLeftBoarderSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">leftBoarderSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> center; i &gt;= left ; i--) &#123;</span><br><span class="line">        leftBoarderSum += a[i];</span><br><span class="line">        <span class="keyword">if</span> (leftBoarderSum &gt; maxLeftBoarderSum)&#123;</span><br><span class="line">            maxLeftBoarderSum = leftBoarderSum;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同上，初始化右边连着center+1的最大值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxRightBoarderSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">rightBoardSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> center+<span class="number">1</span>; j &lt;=right ; j++) &#123;</span><br><span class="line">        rightBoardSum += a[j];</span><br><span class="line">        <span class="keyword">if</span> (rightBoardSum &gt; maxRightBoarderSum) &#123;</span><br><span class="line">            maxRightBoarderSum = rightBoardSum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从而获取每一个递归的部分的最大值</span></span><br><span class="line">    <span class="comment">// 以一个最小的但长度不为1部分举例，这个递归部分会得到三个最大值，</span></span><br><span class="line">    <span class="comment">// 一分为二的左边的最大值maxLeftSum，右边的最大值maxRightSum，中间部分的最大值：maxLeftBoarderSum + maxRightBoarderSum</span></span><br><span class="line">    <span class="comment">// 返回其中的最大值，这个最大值又会作为上一级递归的左边或者右边的最大值，</span></span><br><span class="line">    <span class="comment">// 递归返回到最上级的时候，结束，获取到此最大值</span></span><br><span class="line">    <span class="keyword">return</span> max3(maxLeftSum, maxRightSum, maxLeftBoarderSum + maxRightBoarderSum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max3</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Math.max(a, b);</span><br><span class="line">    max = Math.max(max, c);</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>1.递归的正确性分析：</strong></p>
<ol>
<li>该算法采用递归的分治思想，将数组一分为二去计算，因为最大子序列只可能在三处地方出现：二分后的左半部分，二分后的右半部分，二分后的左半与右半的连接部分。</li>
<li>对于第三种情况，可以将前半部分的最大和(从center–)加上后半部分的最大和()从center++得到。</li>
<li>最后比较这三个最大值，即可得到真正的最大值。</li>
</ol>
<h4 id="3-4-4-算法四">3.4.4 算法四</h4>
<p>   如下递归算法具有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>的复杂度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] a = &#123;<span class="number">1</span>, -<span class="number">4</span>, <span class="number">5</span>, -<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, -<span class="number">4</span>, -<span class="number">7</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> getMaxSubSum4(a);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMaxSubSum4</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化最大值，当前子序列的值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxSum</span> <span class="operator">=</span> <span class="number">0</span>, thisSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 当前子序列的值加上下个的值</span></span><br><span class="line">        thisSum += a[j];</span><br><span class="line">        <span class="keyword">if</span> (thisSum &gt; maxSum) &#123;</span><br><span class="line">            maxSum = thisSum;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (thisSum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果加后，thisSum小于0，则thisSum必定小于maxSum</span></span><br><span class="line">            <span class="comment">// 如果thisSum += a[j]后，thisSum小于0，则说明最大的子序列不在这里结束与开始(因为有负数)，所以也不改变之前记录的maxSum</span></span><br><span class="line">            <span class="comment">// 如果小于0，将thisSum置为0，从新开始计算之后的最大子序列，如果有比maxSum还大的，则赋值</span></span><br><span class="line">            thisSum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>1.算法的正确性分析：</strong></p>
<ol>
<li>j代表当前序列的终点，如果a[i]到a[j]的和是负的，那么可以将i推进到j+1，</li>
<li>令下标：0&lt;i&lt;j，如果thisSum的0到i的和&gt;0，那么，thisSum = a[0] + …+a[i]，如果thisSum为0，则说明，从a[i]开始的子序列不是最优解了。因为如果存在一个最大值从a[i]开始，或包含a[i]，由于thisSum为负，a若[i+k]为正，则继续从a[i+k]一定更优。将thisSum置为0，则之后的最大值从a[i+1]开始，算的值再与maxSum比较，从而得到真正的最大值。</li>
</ol>
<p><strong>2.联机算法：</strong></p>
<p>  在任意时刻，只需要对操作的数据读入一次，一旦a[i]被读入并处理，它不在需要被记忆。在任意时刻，算法都能对已经读入的数据给出对应的子序列的正确问题答案。而且仅需要常量空间并以线性时间运行。</p>
<h3 id="3-5-运行时间的对数">3.5  运行时间的对数</h3>
<blockquote>
<p>一般法则：如果一个算法用O(1)的时间把问题削减为其一部分(通常为1/2)，那么该算法就是O(logN)。<br>
如果一个算法使用常数的时间，将问题复杂度减少一个常数量，那么为O(N)</p>
</blockquote>
<h4 id="3-5-1折半查找">3.5.1折半查找</h4>
<blockquote>
<p>折半查找(binary search)：给定一个整数X和一组已经在内存中且已经排好序的整数数组<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>A</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>A</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">A_0,A_1,...,A_{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo separator="true">,</mo><mtext>求有下标</mtext><mi>i</mi><mtext>使</mtext></mrow><annotation encoding="application/x-tex">,求有下标i使</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">标</span><span class="mord mathdefault">i</span><span class="mord cjk_fallback">使</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub><mo>=</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">A_i=X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span>,如果不存在则返回 i = null。</p>
</blockquote>
<p>由于该数组已经排序好，因此采用折半查找：<br>
  先查找数组居中的元素，如果等于X，则找到。如果比X小，说明结果在居中数组的右边。比X大则说明在居中数组的左边。循环时间最多为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">log(N-1) + 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// String实现了Comparable接口，所以可以使用，但是int是基本类型没有实现，Integer有实现</span></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;12&quot;</span>, <span class="string">&quot;18&quot;</span>, <span class="string">&quot;20&quot;</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">stringSearch</span> <span class="operator">=</span> getBinarySearch(arr, <span class="string">&quot;6&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Integer[] brr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">18</span>&#125;;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integerSearch</span> <span class="operator">=</span> getBinarySearch(brr, b);</span><br><span class="line">        System.out.println(stringSearch);</span><br><span class="line">        System.out.println(integerSearch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回T类型，同时限定T的类型</span></span><br><span class="line">    <span class="comment">// &lt;T extends Comparable&lt;? super T&gt;&gt;限定了T或T的父类具有可比较(Comparable类)的能力</span></span><br><span class="line">    <span class="comment">// T必须继承Comparable接口，或&lt;? super T&gt;规定了T或T的父类继承了Comparable</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> T&gt;&gt; T <span class="title function_">getBinarySearch</span><span class="params">(T[] a, T x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> a.length -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 基线条件low&lt;high</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high-low)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[mid].compareTo(x) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果a[mid] &lt; x</span></span><br><span class="line">                low = mid+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[mid].compareTo(x) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果a[mid] &gt; x</span></span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果a[mid] = x，这里返回x，因为类型为T</span></span><br><span class="line">                <span class="keyword">return</span> x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不存在，不确定T的类型，返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-5-2欧几里得算法-辗转相除法">3.5.2欧几里得算法(辗转相除法)</h4>
<blockquote>
<p>计算两个数的最大公因数，如gcd(50, 15) = 5</p>
</blockquote>
<p><strong>欧几里得算法(辗转相除法)</strong>：gcd(a, b) = gcd(b, a%b)    a&gt;=b;    gcd(a,b)表示a、b的最大公因数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getGcd</span><span class="params">(<span class="type">long</span> m, <span class="type">long</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">//由于java取余的特性，如果m &lt; n,第一次循环会交换m，n</span></span><br><span class="line">    <span class="comment">// 例：5，10；5%10=0...5, 之后，m=5，n=10</span></span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">rem</span> <span class="operator">=</span> m % n;</span><br><span class="line">        m = n;</span><br><span class="line">        n = rem;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这是一个快速的算法，如下将证明经过两次迭代后，余数最多是之的一半，从而证明迭代次数至多为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2O(logN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p>
<p><strong>定理1</strong>：如果M&gt;N，则M mod N &lt; M/2 (注意java中取余取mod的区别)<br>
<strong>证明</strong>：<br>
  情形1：如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>≤</mo><mi>M</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">N\le M/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord">/</span><span class="mord">2</span></span></span></span>，则由于余数一定小于除数N，故<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>余数</mtext><mo>≤</mo><mi>N</mi><mo>≤</mo><mi>M</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">余数\le N \le M/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord cjk_fallback">余</span><span class="mord cjk_fallback">数</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord">/</span><span class="mord">2</span></span></span></span>。<br>
  情形2：如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>&gt;</mo><mi>M</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">N &gt; M/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord">/</span><span class="mord">2</span></span></span></span>，且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>&lt;</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">N&lt;M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>，所以M一定只包含一个N，从而<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>余数</mtext><mo>=</mo><mi>M</mi><mo>−</mo><mn>1</mn><mo>×</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">余数=M- 1 \times N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">余</span><span class="mord cjk_fallback">数</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>，而<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>&gt;</mo><mi>M</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">N &gt; M/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord">/</span><span class="mord">2</span></span></span></span>，所以余数&lt; M/2。</p>
<p>  由此可知，M经过两次欧几里得算法后，M变成M%N的余数，故需最坏的情况要2logN的复杂度。实际上该算法的平均复杂度需要大量的复杂计算，其平均迭代次数约为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>12</mn><mi>l</mi><mi>n</mi><mn>2</mn><mi>l</mi><mi>n</mi><mi>N</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msup><mi>π</mi><mn>2</mn></msup><mo>+</mo><mn>1.47</mn></mrow><annotation encoding="application/x-tex">(12 ln2 lnN)/\pi^2 + 1.47</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">n</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">4</span><span class="mord">7</span></span></span></span></p>
<p><strong>幂运算</strong></p>
<p>  计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>X</mi><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">X^N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span>的明显的算法是使用N-1次乘法自乘，有一种递归算法更好：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>≤</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N\le 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>是递归的基准情形。否则，若N为偶数，我们有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>X</mi><mi>N</mi></msup><mo>=</mo><msup><mi>X</mi><mrow><mi>N</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup><mo>⋅</mo><msup><mi>X</mi><mrow><mi>N</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">X^N = X^{N/2} \cdot X^{N/2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>，如果N是奇数，则有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>X</mi><mi>N</mi></msup><mo>=</mo><msup><mi>X</mi><mrow><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup><mo>⋅</mo><msup><mi>X</mi><mrow><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup><mo>⋅</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">X^N = X^{(N-1)/2} \cdot X^{(N-1)/2} \cdot X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span>，一直递归下去。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">pow</span> <span class="operator">=</span> pow(<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;3&quot;</span>), <span class="number">100</span>);</span><br><span class="line">        System.out.println(pow);</span><br><span class="line">        <span class="comment">// Math工具类已经实现了，不过限定为double类型(参数业务double)</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">pow1</span> <span class="operator">=</span> Math.pow(<span class="number">3.0</span>, <span class="number">2.0</span>);</span><br><span class="line">        System.out.println(pow1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigInteger <span class="title function_">pow</span><span class="params">(BigInteger x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isEven(n)) &#123;</span><br><span class="line">            <span class="keyword">return</span> pow(x.multiply(x), n / <span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> pow(x.multiply(x), n/<span class="number">2</span>).multiply(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否为偶数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEven</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数学知识复习与递归简论</title>
    <url>/2021/04/02/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%E4%B8%8E%E9%80%92%E5%BD%92%E7%AE%80%E8%AE%BA/</url>
    <content><![CDATA[<p>《数据结构与算法分析Java语言描述》第一章1.2与1.3节<strong>读书笔记</strong></p>
<span id="more"></span>
<h2 id="1-数学知识复习">1. 数学知识复习</h2>
<h3 id="1-1-指数">1.1 指数</h3>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>X</mi><mi>A</mi></msup><msup><mi>X</mi><mi>B</mi></msup><mo>=</mo><msup><mi>X</mi><mrow><mi>A</mi><mo>+</mo><mi>B</mi></mrow></msup></mrow><annotation encoding="application/x-tex">X^AX^B=X^{A+B}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">A</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><msup><mi>X</mi><mi>A</mi></msup><msup><mi>X</mi><mi>B</mi></msup></mfrac><mo>=</mo><msup><mi>X</mi><mrow><mi>A</mi><mo>−</mo><mi>B</mi></mrow></msup></mrow><annotation encoding="application/x-tex">\frac{X^A}{X^B}=X^{A-B}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.204331em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5183309999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.767331em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">A</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<table><br></table>
<h3 id="1-2对数">1.2对数</h3>
<p>在计算机科学中，除非特别声明。否则所有对数都是以2为底。</p>
<p><strong>定理1.1</strong>：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>A</mi></msub><mi>B</mi><mo>=</mo><mfrac><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>C</mi></msub><mi>B</mi></mrow><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>C</mi></msub><mi>A</mi></mrow></mfrac><mo separator="true">;</mo><mspace width="1em"><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo separator="true">,</mo><mi>C</mi><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo><mi>A</mi><mo mathvariant="normal">≠</mo><mn>1</mn></mspace></mrow><annotation encoding="application/x-tex">log_AB=\frac{log_CB}{log_CA}; \quad A,B,C&gt;0,A\ne1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">A</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<p><strong>定理1.2</strong>:</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>A</mi><mi>B</mi><mo>=</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>A</mi><mo>+</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>B</mi><mo separator="true">;</mo><mspace width="1em"><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo>&gt;</mo><mn>0</mn></mspace></mrow><annotation encoding="application/x-tex">logAB=logA+logB; \quad A,B&gt;0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p>
<p><strong>推导</strong>：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>A</mi><mi mathvariant="normal">/</mi><mi>B</mi><mo>=</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>A</mi><mo>−</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">logA/B=logA-logB
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">A</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><msup><mi>A</mi><mi>B</mi></msup><mo stretchy="false">)</mo><mo>=</mo><mi>B</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">log(A^B)=BlogA
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">A</span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>X</mi><mo>&lt;</mo><mi>X</mi><mtext>对所有的</mtext><mi>X</mi><mo>&gt;</mo><mn>0</mn><mtext>成立</mtext></mrow><annotation encoding="application/x-tex">logX&lt;X对所有的X&gt;0成立
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord cjk_fallback">成</span><span class="mord cjk_fallback">立</span></span></span></span></span></p>
<table><br></table>
<h3 id="1-3-级数">1.3 级数</h3>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></munderover><msup><mn>2</mn><mi>i</mi></msup><mo>=</mo><msup><mn>2</mn><mrow><mi>N</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\sum_{i=0}^n2^i=2^{N+1}-1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.974661em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></munderover><msup><mi>A</mi><mi>i</mi></msup><mo>=</mo><mfrac><mrow><msup><mi>A</mi><mrow><mi>N</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>A</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sum_{i=0}^nA^i=\frac{A^{N+1}-1}{A-1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.287661em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5183309999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>如果0&lt;A&lt;1 则</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msup><mi>A</mi><mi>i</mi></msup><mo>≤</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>A</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sum_{i=1}^N A^i \le \frac{1}{1-A}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.106005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">A</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mi>i</mi><mo>=</mo><mfrac><mrow><mi>N</mi><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>≈</mo><mfrac><msup><mi>N</mi><mn>2</mn></msup><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\sum_{i=1}^N i = \frac{N(N+1)}{2} \approx \frac{N^2}{2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.106005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msup><mi>i</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mi>N</mi><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>2</mn><mi>N</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>6</mn></mfrac><mo>≈</mo><mfrac><msup><mi>N</mi><mn>3</mn></msup><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">\sum_{i=1}^N {i^2} = \frac{N(N+1)(2N+1)}{6} \approx \frac{N^3}{3}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.106005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msup><mi>i</mi><mi>k</mi></msup><mo>≈</mo><mfrac><msup><mi>N</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mrow><mi mathvariant="normal">∣</mi><mi>k</mi><mo>+</mo><mn>1</mn><mi mathvariant="normal">∣</mi></mrow></mfrac><mspace width="1em"><mi>k</mi><mo mathvariant="normal">≠</mo><mo>−</mo><mn>1</mn></mspace></mrow><annotation encoding="application/x-tex">\sum_{i=1}^N {i^k} \approx \frac{N^{k+1}}{|k+1|} \quad k \neq -1 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.106005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.4621079999999997em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261079999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span></span></p>
<p>当k=-1时，上面的公式不成立，需要下面的公式。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">H_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为调和 和，下面近似式的误差<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo>≈</mo><mn>0.57721566</mn></mrow><annotation encoding="application/x-tex">\gamma \approx 0.57721566</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6775599999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mord">7</span><span class="mord">7</span><span class="mord">2</span><span class="mord">1</span><span class="mord">5</span><span class="mord">6</span><span class="mord">6</span></span></span></span>，称为欧拉常数</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mi>N</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mfrac><mn>1</mn><mi>i</mi></mfrac><mo>≈</mo><mi>l</mi><mi>o</mi><msubsup><mi>g</mi><mi>e</mi><mi>N</mi></msubsup></mrow><annotation encoding="application/x-tex">H_N = \sum_{i=1}^N \frac{1}{i} \approx log_e^N
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.106005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">i</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.138331em;vertical-align:-0.247em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>以下一般代数运算：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>N</mi><mi>f</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum _{i=1}^N f(N) = Nf(N)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.106005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><mi>N</mi></munderover><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>−</mo><mn>1</mn></mrow></munderover><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum _{i=n_0}^N f(i) = \sum _{i=1}^Nf(i) - \sum _{i=1}^{n_0-1}f(i)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.206105em;vertical-align:-1.377769em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.377769em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.106005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.0898820000000002em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8122130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.311105em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span></span></p>
<table><br></table>
<h3 id="1-4-模运算">1.4 模运算</h3>
<p>如果A-B整<strong>除以</strong>N，那么A与B模N的余数是相同的。记作<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>≡</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A \equiv B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>(mod N)。</p>
<table><br></table>
<h3 id="1-5-证明方法">1.5 证明方法</h3>
<h4 id="1-归纳证明法">1. 归纳证明法</h4>
<ol>
<li>第一步证明<strong>基准情形</strong>，确定定理对最基准的值的正确性。</li>
<li>进行归纳假设，假设定理对直到有限数 k 的的所有情况都是成立的。</li>
<li>依据这个假设证明定理对下一个值(k+1)成立。</li>
</ol>
<h5 id="1-1证明演示">1.1证明演示</h5>
<p>  证明斐波那契数列，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">F_0=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">F_1=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>2</mn></msub><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">F_2=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>3</mn></msub><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">F_3=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>4</mn></msub><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">F_4=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>, …, ,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>i</mi></msub><mo>=</mo><msub><mi>F</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>F</mi><mrow><mi>i</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">F_i=F_{i-1}+F_{i-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>, 满足对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i\ge1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>i</mi></msub><mo>&lt;</mo><mo stretchy="false">(</mo><mn>5</mn><mi mathvariant="normal">/</mi><mn>3</mn><msup><mo stretchy="false">)</mo><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">F_i &lt; (5/3)^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">5</span><span class="mord">/</span><span class="mord">3</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span>。</p>
<p>证明：</p>
<ol>
<li>基准情形：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo>&lt;</mo><mfrac><mn>5</mn><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">F_1=1&lt; {\frac{5}{3}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>2</mn></msub><mo>=</mo><mn>2</mn><mo>&lt;</mo><mfrac><mn>25</mn><mn>9</mn></mfrac></mrow><annotation encoding="application/x-tex">F_2 = 2&lt; {\frac{25}{9}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">9</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></li>
<li>归纳假设：假设定理对于i=1，2，…，k成立，则有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>k</mi></msub><mo>&lt;</mo><mo stretchy="false">(</mo><mn>5</mn><mi mathvariant="normal">/</mi><mn>3</mn><msup><mo stretchy="false">)</mo><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">F_k &lt; (5/3)^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">5</span><span class="mord">/</span><span class="mord">3</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span></li>
<li>证明k+1成立：
<ol>
<li>由定义有：  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>F</mi><mi>k</mi></msub><mo>+</mo><msub><mi>F</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">F_{k+1} = F_k + F_{k-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></li>
<li>则有：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>&lt;</mo><mo stretchy="false">(</mo><mn>5</mn><mi mathvariant="normal">/</mi><mn>3</mn><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mo>+</mo><mo stretchy="false">(</mo><mn>5</mn><mi mathvariant="normal">/</mi><mn>3</mn><msup><mo stretchy="false">)</mo><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mo stretchy="false">(</mo><mn>3</mn><mi mathvariant="normal">/</mi><mn>5</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>5</mn><mi mathvariant="normal">/</mi><mn>3</mn><msup><mo stretchy="false">)</mo><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>+</mo><mrow><mo stretchy="false">(</mo><mn>3</mn><mi mathvariant="normal">/</mi><mn>5</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mo stretchy="false">(</mo><mn>5</mn><mi mathvariant="normal">/</mi><mn>3</mn><msup><mo stretchy="false">)</mo><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><mo>=</mo><mo stretchy="false">(</mo><mn>3</mn><mi mathvariant="normal">/</mi><mn>5</mn><mo>+</mo><mn>9</mn><mi mathvariant="normal">/</mi><mn>25</mn><mo stretchy="false">)</mo><mrow><mo stretchy="false">(</mo><mn>5</mn><mi mathvariant="normal">/</mi><mn>3</mn><msup><mo stretchy="false">)</mo><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><mo>&lt;</mo><mo stretchy="false">(</mo><mn>5</mn><mi mathvariant="normal">/</mi><mn>3</mn><msup><mo stretchy="false">)</mo><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">F_{k+1} &lt; (5/3)^k + (5/3)^{k-1} =(3/5)(5/3)^{k+1} + {(3/5)^2}{(5/3)^{k+1}} = (3/5 + 9/25){(5/3)^{k+1}} &lt; (5/3)^{k+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">5</span><span class="mord">/</span><span class="mord">3</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">5</span><span class="mord">/</span><span class="mord">3</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mord">/</span><span class="mord">5</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">5</span><span class="mord">/</span><span class="mord">3</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">3</span><span class="mord">/</span><span class="mord">5</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen">(</span><span class="mord">5</span><span class="mord">/</span><span class="mord">3</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mord">/</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mord">9</span><span class="mord">/</span><span class="mord">2</span><span class="mord">5</span><span class="mclose">)</span><span class="mord"><span class="mopen">(</span><span class="mord">5</span><span class="mord">/</span><span class="mord">3</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">5</span><span class="mord">/</span><span class="mord">3</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></li>
</ol>
</li>
</ol>
<h4 id="2-反证法">2. 反证法</h4>
<ol>
<li>假设某个定理不成立。</li>
<li>证明该假设导致某个已知的性质不成立，证明原假设是错误的(定理成立)。</li>
</ol>
<h5 id="2-1-证明演示：">2.1 证明演示：</h5>
<p>  证明存在无穷多个素数。</p>
<p>证明：</p>
<p>1.假设定理不成立：假设不存在无穷多个素数。</p>
<p>2.推导某个已知性质不成立：</p>
<ol>
<li>由1的假设有最大素数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">P_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，令<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>P</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>P</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">P_1,P_2,...,P_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>依序排列。</li>
<li>考虑有 ：    <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><msub><mi>P</mi><mn>1</mn></msub><msub><mi>P</mi><mn>2</mn></msub><msub><mi>P</mi><mn>3</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>P</mi><mi>k</mi></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N=P_1 P_2 P_3...P_k +1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li>
<li>显然，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>&gt;</mo><msub><mi>P</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">N&gt;P_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，根据假设(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">P_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为最大素数，则N比不为素数)。但是N不能整<strong>除以</strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>P</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>P</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">P_1,P_2,...,P_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。产生矛盾，因为每一个整数要么是素数，要么是素数的乘积。</li>
<li>因此<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">P_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是最大的素数假设不成立，意味定理成立。</li>
</ol>
<table><br></table>
<h2 id="2-递归简论">2. 递归简论</h2>
<h3 id="2-1-递归四条基本法则：">2.1 递归四条基本法则：</h3>
<ol>
<li>基准情形：必须包含某些基准情形，无需递归就能解出。(程序出栈条件)</li>
<li>不断推进：每一次递归，必须朝着基准情形推进</li>
<li>设计法则：假设所有递归调用都能运行</li>
<li>合成效益法则：在求解一个问题的同一实例时，切勿在不同的递归调用中做重复性的工作。(在计算F(n-1)时同时调用了F(n-2)，而同时原式也需要调用一次F(n-2)，重复)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecurdiveTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 静态方法里面不能调普通方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span>  f(<span class="number">4</span>); <span class="comment">//计算f(4s)</span></span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 递归出口</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * f(x-<span class="number">1</span>) + x * x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果58</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数论杂项</title>
    <url>/2023/01/14/%E6%95%B0%E8%AE%BA%E6%9D%82%E9%A1%B9/</url>
    <content><![CDATA[<p>数论杂项</p>
<span id="more"></span>
<h2 id="取余-区别python的取模">取余（区别python的取模）</h2>
<p>注意：对于取余，下面统一用%符号，对于取模，统一用mod关键字<br>
区别于python，java中的<strong>负(正)数 / 负(正)数 = 答案</strong>，这个答案会向0靠近，取模的结果就是剩下的数，例如：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow><mo>−</mo><mn>7</mn></mrow><mi mathvariant="normal">/</mi><mn>4</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mrow><mo>−</mo><mn>1</mn></mrow><mtext>余</mtext><mrow><mo>−</mo><mn>3</mn></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow><mo>−</mo><mn>7</mn></mrow><mi mathvariant="normal">/</mi><mrow><mo>−</mo><mn>4</mn></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mtext>余</mtext><mrow><mo>−</mo><mn>3</mn></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>7</mn><mi mathvariant="normal">/</mi><mrow><mo>−</mo><mn>4</mn></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mrow><mo>−</mo><mn>1</mn></mrow><mtext>余</mtext><mn>3</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
{-7} / 4 &amp;= {-1}余{-3} \\
{-7} / {-4} &amp;= {1} 余 {-3} \\
7 / {-4} &amp;= {-1} 余 3
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.500000000000002em;vertical-align:-2.000000000000001em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">−</span><span class="mord">7</span></span><span class="mord">/</span><span class="mord">4</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">−</span><span class="mord">7</span></span><span class="mord">/</span><span class="mord"><span class="mord">−</span><span class="mord">4</span></span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span><span class="mord">/</span><span class="mord"><span class="mord">−</span><span class="mord">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span><span class="mord cjk_fallback">余</span><span class="mord"><span class="mord">−</span><span class="mord">3</span></span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">1</span></span><span class="mord cjk_fallback">余</span><span class="mord"><span class="mord">−</span><span class="mord">3</span></span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span><span class="mord cjk_fallback">余</span><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<h3 id="取模分配律-除法例外">取模分配律（除法例外）</h3>
<p>除法的取模需要进行逆元运算才能求解。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>+</mo><mi>b</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>−</mo><mi>b</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>∗</mo><mi>b</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>∗</mo><mi>b</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msup><mi>a</mi><mi>b</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><msup><mo stretchy="false">)</mo><mi>b</mi></msup><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
(a + b)\ mod \ p &amp;= (a\ mod \ p + b\ mod \ p)\ mod \ p \\
(a - b)\ mod \ p &amp;= (a\ mod \ p - b\ mod \ p)\ mod \ p \\
(a * b)\ mod \ p &amp;= (a\ mod \ p * b\ mod \ p)\ mod \ p \\
a ^ b\ mod \ p &amp;= ((a\ mod \ p) ^ b)\ mod \ p
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.059108em;vertical-align:-2.7795540000000005em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.279554em;"><span style="top:-5.439554em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span></span></span><span style="top:-3.9395540000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span></span></span><span style="top:-2.4395539999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span></span></span><span style="top:-0.8804459999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7795540000000005em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.279554em;"><span style="top:-5.439554em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span></span></span><span style="top:-3.9395540000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span></span></span><span style="top:-2.4395539999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span></span></span><span style="top:-0.8804459999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7795540000000005em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<h3 id="取模同余定理">取模同余定理</h3>
<p>对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>k</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">(a - b) \  mod \ k = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，则有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>k</mi><mo>=</mo><mi>b</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>k</mi></mrow><annotation encoding="application/x-tex">a \ mod \ k = b \ mod \ k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>。对于python，本身就是取模，直接取模运算即可。<br>
对于java的取余需要特殊处理一下，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mtext> </mtext><mi mathvariant="normal">%</mi><mtext> </mtext><mi>k</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo><mtext> </mtext><mi mathvariant="normal">%</mi><mtext> </mtext><mi>k</mi><mo>=</mo><mo stretchy="false">(</mo><mi>b</mi><mtext> </mtext><mi mathvariant="normal">%</mi><mtext> </mtext><mi>k</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo><mtext> </mtext><mi mathvariant="normal">%</mi><mtext> </mtext><mi>k</mi></mrow><annotation encoding="application/x-tex">(a \ \% \ k + k)\ \% \ k = (b \ \% \ k + k)\ \% \ k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace"> </span><span class="mord">%</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord">%</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace"> </span><span class="mord">%</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord">%</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span></p>
<p>用途：<br>
<a href="https://leetcode.cn/problems/subarray-sums-divisible-by-k/">974. 和可被 K 整除的子数组 - 力扣（LeetCode）</a>，前缀和处理后，(sum[j] - sum[i]) % k = 0的换处理。</p>
<p>字符串Hash文章中 <a href="/2022/11/27/%E5%AD%97%E7%AC%A6%E4%B8%B2Hash/" title="字符串Hash">字符串Hash</a>，代码里面取余(大于k，取余变小)后，再去减(小于k，不变)可能出现负数情况的处理（见代码注释）。转换为整数。</p>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路</title>
    <url>/2023/06/11/%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
    <content><![CDATA[<p>图论的最短路问题，介绍可参考百科：<a href="https://baike.baidu.com/item/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/2367871">最短路问题_百度百科</a></p>
<span id="more"></span>
<p>最短路，部分算法可以解决负权边的问题。但是对于负环（环的和为负数）是无解的，假设在无穷远处有一个负环，他会不顾距离，走到负环处，然后一遍又一遍的走这个负环，直到累计到负无穷，并一直走下去，所以无解。后续如无特殊说明，所有图皆无负环。备注：特殊标明判断负环除外。</p>
<p>有向图，无向图、包括图定义等基础概念不是本篇讨论的问题，因此略去。</p>
<p>对于加权图，我们记为G=(V,E,W)，其中G表示图，V表示点集，E表示边集，W表示加权距离集。后续会用到邻接矩阵图（非本篇所讲基础内容，略），邻接表同理。</p>
<p>在邻接矩阵G表示的图中。对于两点u和v距离，如果u和v为同一点，我们记为G[u][u] = 0，即忽略自环，只取最小值0。若为不同点，则记为G[u][v] = x，为u到达v的最小加权距离。若两点之间无法到达，则记为G[u][v] = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">+\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">∞</span></span></span></span>。</p>
<h2 id="floyd算法">floyd算法</h2>
<div class="panel panel-info">
    <div class="panel-title">关键词</div>
    <div class="panel-body">
        <p>多源、可有负边，时间：O(N^3)，空间：O(N^2)</p>

    </div>
    </div>
<p>floyd算法用来求有向图、无向图且可以有负边的多源（以不同点为起点到不同点为终点）最短路。对于无向图，只需要把边拆成两条有向边即可。约定忽略图的自环，自环只会增加长度且无贡献。</p>
<p>题目：有n个编号从1到n点组成m条边的图，求图中的多源最短路。</p>
<p>考虑dp方法。dp[k][i][j] 表示考虑从0到k作为中转节点所有情况，对于dp[k][i][j] 所得到的最小值。即为分别考虑0到k为中转点，i到k到j获得的最小值。</p>
<ol>
<li>显然有dp[0][i][j] = G[i][j]成立。即不经过任何点（编号为0的点不存在），最短距离为i于j的初始化距离。</li>
<li>考虑经过0到k-1作为中转节点的i和j，此时最短路为dp[k-1][i][j]。（考虑了0，即不经过节点中转的情况）</li>
<li>对于经过0到k节点。由于dp[k-1][i][j]表示考虑0到k-1任一节点中转的最小距离。即目前i到j的最小距离已经知道为dp[k-1][i][j]，此时考虑增加k节点中转，于是最短距离变为，原本经过k-1的最短距离 或 i到k的最短距离 加上 k 到 j 的最短距离中的最小值。<br>
即在原有的0到k-1的i与j最小值路径上插入k节点，因为如3点开头所说我们只需要考虑经过0到k的节点。</li>
</ol>
<p>由此可以推断出考虑0到k中转的i和j的最短路为dp[k][i][j] = min(dp[k-1][i][j], dp[k-1][i][k] + dp[k-1][k][j])</p>
<p>即：若插入k节点，会使距离变小，则更新这个距离</p>
<p>因此递推公式为：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[k][i][j] = min(dp[k-1][i][j], dp[k-1][i][k] + dp[k-1][k][j])
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p>
<p>因此有伪代码：</p>
<p>其中k是转移阶段，当我们求k中转的时候，k-1与之前的所有数组值必须已经求出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k := <span class="number">1</span> to n:</span><br><span class="line">  <span class="keyword">for</span> u := <span class="number">1</span> to n:</span><br><span class="line">    <span class="keyword">for</span> v := <span class="number">1</span> to n:</span><br><span class="line">      f(k,u,v) := min&#123;f(k-<span class="number">1</span>,u,v), f(k-<span class="number">1</span>,u,k)+f(k-<span class="number">1</span>,k,v)&#125;</span><br></pre></td></tr></table></figure>
<p>我们注意到，取k中转的时候，只与k-1数组的值相关，因此，可以考虑滚动数组优化空间。<br>
更进一步的，我们可以直接复用u、v的数组，（证明暂缺😁，不会就是不会）。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k := <span class="number">1</span> to n:</span><br><span class="line">  <span class="keyword">for</span> u := <span class="number">1</span> to n:</span><br><span class="line">    <span class="keyword">for</span> v := <span class="number">1</span> to n:</span><br><span class="line">      f(u,v) := min&#123;f(u,v), f(u,k)+f(k,v)&#125;</span><br></pre></td></tr></table></figure>
<p>因此时间复杂度为O(N^3)，空间复杂度为O(N^2)。</p>
<p>完整代码：</p>
<p><strong>注意</strong>：此代码是基于节点编号从1到n，如果从0到n-1，初始化图的代码不使用n+1。打印也从0开始。基于无向图。代码中，在遇到无穷大时不中转也很重要，保证了无穷大的一致：<code>if (graphArr[i][k] != inf &amp;&amp; graphArr[k][j] != inf)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">inf</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="comment">// 初始化图</span></span><br><span class="line">    <span class="type">int</span>[][] graphArr = initGraph(inf, sc, n, m);</span><br><span class="line">    <span class="comment">// 跑floyd,</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="comment">// 如果某条中转路径无穷大，则不中转。如果不加此判断，其中一个无穷大加上一个负数边权会变小。</span></span><br><span class="line">                <span class="comment">// 虽然相加值很大，仍然可以表示无穷，但是多个无穷数会不一样。很重要。</span></span><br><span class="line">                <span class="keyword">if</span> (graphArr[i][k] != inf &amp;&amp; graphArr[k][j] != inf) &#123;</span><br><span class="line">                    graphArr[i][j] = Math.min(graphArr[i][j], graphArr[i][k] + graphArr[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出答案</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            System.out.print(graphArr[i][j]);</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] initGraph(<span class="type">int</span> inf, Scanner sc, <span class="type">int</span> n, <span class="type">int</span> m) &#123;</span><br><span class="line">    <span class="type">int</span>[][] graphArr = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 初始化图，根据题目节点编号从1开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">                graphArr[i][j] = inf;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置图的初始距离</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="comment">// 因为是无向图</span></span><br><span class="line">        graphArr[u][v] = w;</span><br><span class="line">        graphArr[v][u] = w;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> graphArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>记录路径核心代码：基于有向图，原因见图初始化注释。代码中保证了无穷大一致，后面才可以直接用inf判断无穷大。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">inf</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(); <span class="comment">// n 个节点</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt(); <span class="comment">// 接下来m行表示边的关系</span></span><br><span class="line">    <span class="comment">// 初始化图（同上、略）</span></span><br><span class="line">    <span class="type">int</span>[][] graphArr = initGraph(inf, sc, n, m);</span><br><span class="line">    <span class="comment">// path数组，path[i][j] 的值表示 更新从i到j的最短路径时，经过的一个中转点</span></span><br><span class="line">    <span class="type">int</span>[][] path = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="comment">// 初始化i到j的最优解时i直接到j</span></span><br><span class="line">            path[i][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 跑floyd,</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="comment">// 如果某条中转路径无穷大，则不中转。如果不加此判断，其中一个无穷大加上一个负数边权会变小。</span></span><br><span class="line">                <span class="comment">// 虽然相加值很大，仍然可以表示无穷，但是多个无穷数会不一样。很重要。</span></span><br><span class="line">                <span class="keyword">if</span> (graphArr[i][k] != inf &amp;&amp; graphArr[k][j] != inf) &#123;</span><br><span class="line">                    <span class="comment">// 这里要改一下，不能简写min，只有能够更小的时候才更新path</span></span><br><span class="line">                    <span class="keyword">if</span> (graphArr[i][k] + graphArr[k][j] &lt; graphArr[i][j]) &#123;</span><br><span class="line">                        graphArr[i][j] = graphArr[i][k] + graphArr[k][j];</span><br><span class="line">                        <span class="comment">// 此时的i---&gt;j的最优解不再是j了而是 i---&gt;k----</span></span><br><span class="line">                        path[i][j] = path[i][k];</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (graphArr[i][k] + graphArr[k][j] == graphArr[i][j]) &#123;</span><br><span class="line">                        <span class="comment">// 如果相同，取字典序小的，同时如果k=i或j，则不更新，避免陷入自己到自己移动方式。</span></span><br><span class="line">                        <span class="comment">// （例如本来是2到3，代码里经过2中转距离与2到3的距离相等，会陷入2到2的问题）</span></span><br><span class="line">                        <span class="keyword">if</span> (k != i &amp;&amp; k != j &amp;&amp; path[i][k] &lt; path[i][j]) &#123;</span><br><span class="line">                            path[i][j] = path[i][k];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出路径</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;--&gt;&quot;</span> + j + <span class="string">&quot;: &quot;</span>);</span><br><span class="line">            System.out.print(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (s != j) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;--&gt;&quot;</span> + path[s][j]);</span><br><span class="line">                s = path[s][j];</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">// 因为确保了无穷大一样为inf，所以这里可以直接判断inf</span></span><br><span class="line">            <span class="keyword">if</span> (graphArr[i][j] == inf) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;  路径不存在&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;  road cost: &quot;</span> + graphArr[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> iht[][] initGraph(<span class="type">int</span> inf, Scanner sc, <span class="type">int</span> n, <span class="type">int</span> m) &#123;</span><br><span class="line">    <span class="type">int</span>[][] graphArr = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 初始化图为正无穷，根据题目节点编号从1开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">                graphArr[i][j] = inf;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置图的初始距离</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="comment">// 无向图跑不了负数边（假设a到b点，边权为负数，则会a到b，再b到a，无限重复到负无穷）。</span></span><br><span class="line">        <span class="comment">// 所以为了体现floyd可以跑负数边的特性，这里用有向图演示</span></span><br><span class="line">        graphArr[u][v] = w;</span><br><span class="line">        <span class="comment">// graphArr[v][u] = w;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> graphArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一组测试用例，包含负数边，所以是有向图。<br>
第一行包含两个数n、m。n表示有编号从1到n的n个节点，m表示接下来m行。<br>
接下来m行，每行三个整数 u，v，w，代表 u到v（单向）存在一条边权为w的边。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">6 8</span><br><span class="line">6 2 -2</span><br><span class="line">4 6 1</span><br><span class="line">5 6 -3</span><br><span class="line">1 4 5</span><br><span class="line">1 5 9</span><br><span class="line">2 3 3</span><br><span class="line">2 4 4</span><br><span class="line">4 5 3</span><br></pre></td></tr></table></figure>
<p><img src="/2023/06/11/%E6%9C%80%E7%9F%AD%E8%B7%AF/floyd%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B.webp" alt="floyd测试用例"></p>
<h2 id="bellman-ford算法">Bellman-Ford算法</h2>
<div class="panel panel-info">
    <div class="panel-title">关键词</div>
    <div class="panel-body">
        <p>单源、可有负边，可判断负环，时间：O(mn)，空间：O(N)。</p>

    </div>
    </div>
<p>BF算法基于松弛操作。</p>
<blockquote>
<p>松弛操作：对于起点S的图，存在边(u,v)，dis(v) = min(dis(v), dis(u) + w(u, v))。即如果经过u能够使起点到v的距离变小，则更新为这个小的距离。其中dis(v)表示当前起点到v的最小距离。</p>
</blockquote>
<p>BF算法的思想主要是对所有边进行松弛操作，直到松弛操作无变化为止，此时说明已找起点s到其他点最短路。最多需要对每条边松弛n-1次操作即可，在一个n个顶点的图中，任意两点之间的最短路径最多有n-1个边（如果更多，则说明有冲边或者环），在经过一轮松弛后，得到是源点经过一条边到达其他点的距离，经过k轮松弛后，是源点经过k条边到其他顶点的距离。如果第n次松弛操作仍然值有改变，则说明有负环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">inf</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于存放起点s到其它顶点之间的最短距离，下标0处的点不使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span>[] dis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="comment">// 在确定边数的情况下可以用数组，如果是双向与单向混用则需要使用list存储</span></span><br><span class="line">    ArrayList&lt;Edge&gt; edges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(u, v, w));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bellmanford(n, edges, <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="comment">// 无负环</span></span><br><span class="line">        System.out.println(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">bellmanford</span><span class="params">(<span class="type">int</span> n, List&lt;Edge&gt; edges, <span class="type">int</span> s)</span> &#123;</span><br><span class="line">    dis = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">//初始化第1个顶点到其它n个顶点之间的距离为无穷大</span></span><br><span class="line">        dis[i] = inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 起点到起点的距离为0</span></span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; edges.size(); j++) &#123;</span><br><span class="line">            <span class="type">Edge</span> <span class="variable">edge</span> <span class="operator">=</span> edges.get(j);</span><br><span class="line">            <span class="comment">// 保证点是可以到达的，从dis[s] = 0开始出发</span></span><br><span class="line">            <span class="keyword">if</span> (dis[edge.u] == inf) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 起点到V到距离 = min(起点到v的距离，起到到u的距离+ u到v的边权w)</span></span><br><span class="line">            <span class="comment">// 释义：起点到v的距离，如果能够经过边u-v松弛变小，则松弛</span></span><br><span class="line">            dis[edge.v] = Math.min(dis[edge.v], dis[edge.u] + edge.w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第n次操作，判断是否松弛，若松弛，则说明有负环</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">judge</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; edges.size(); j++) &#123;</span><br><span class="line">        <span class="type">Edge</span> <span class="variable">edge</span> <span class="operator">=</span> edges.get(j);</span><br><span class="line">        <span class="keyword">if</span> (dis[edge.u] == inf || dis[edge.v] == inf) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dis[edge.v] &gt; dis[edge.u] + edge.w) &#123;</span><br><span class="line">            judge = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> judge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部类，表示图的一条加权边</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> u;   <span class="comment">//边的起点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> v;   <span class="comment">//边的终点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> w;  <span class="comment">//边的权值</span></span><br><span class="line"></span><br><span class="line">    Edge(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w) &#123;</span><br><span class="line">        <span class="built_in">this</span>.u = u;</span><br><span class="line">        <span class="built_in">this</span>.v = v;</span><br><span class="line">        <span class="built_in">this</span>.w = w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一点优化：在不需要判断是否有负环的情况下，<code>for (int i = 1; i &lt; n; i++) </code> 第一个for循环改为while循环，同时判断是否有松弛，若无松弛，则此刻已经找到最短路，停止后续遍历。</p>
<h2 id="spfa算法">SPFA算法</h2>
<p>关于SPFA，他死了😂。（玩笑）。SPFA，即队列优化版Bellman-Ford算法，拥有BF算法的一切特性。其平均时间复杂度为O(km)，k为每个节点平均入队次数。k大概为4左右。但是其最坏时间复杂度为O(mn)，目前对于堆优化版Dijkstra能过得题基本上都会卡SPFA。<br>
<strong>所以，对于单源最短路，若无负权边，用堆优化版Dijkstra。若有负权边，且没有特殊性质，若SPFA能过，则BF算法一定能过</strong>（主要是BF比SPFA好写。当然平均SPFA比BF还是快的）。<br>
对于多源最短路。若有负权变，如果数据范围允许，考虑floyd，若不允许，则应当考虑johnson算法。若无负权边，跑n遍单源最短路，或者直接多源最短路，选出一个能过时间复杂度的数据即可。</p>
<p>建图方式为了节省内存使用了链式前向星。链式前向星可以参考<a href="https://blog.csdn.net/acdreamers/article/details/16902023">深度理解链式前向星_dijskra_ACdreamers的博客-CSDN博客</a>。(ps：现在一般不会使用链式前向星了，大多都是邻接表，使用List&lt;List<Integer>&gt;建图。由于List的容量会存在浪费的可能，为了节省内存，也可以使用List[]，数组大写为n，表示n个List组成的数组)。<br>
(不知道是否时语言原因，java还是MLE了🤣🤣。C++的好处就是大多数评测样例都是按C++来算时间与内存的)。</Integer></p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>链式前向星写法</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spfa</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据题目意思不同，需要输出不同的无穷大，此处输出0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span>[] dis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        dis = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 边集，因为点从1开始，所以边也从1开始</span></span><br><span class="line">        Edge[] edges = <span class="keyword">new</span> <span class="title class_">Edge</span>[m + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            edges[i] = <span class="keyword">new</span> <span class="title class_">Edge</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 点集</span></span><br><span class="line">        <span class="type">int</span>[] head = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">numEdge</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="comment">// 起点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="comment">// 终点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">to</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="comment">// 边权</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">wei</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="comment">// 建图</span></span><br><span class="line">            <span class="comment">// 当前边的编号。从1开始，因为点从1开始</span></span><br><span class="line">            numEdge++;</span><br><span class="line">            <span class="comment">// 当前读入的这条边的上一条边</span></span><br><span class="line">            edges[numEdge].next = head[from];</span><br><span class="line">            <span class="comment">// 更新当前边的终点</span></span><br><span class="line">            edges[numEdge].to = to;</span><br><span class="line">            <span class="comment">// 更新当前边的长度</span></span><br><span class="line">            edges[numEdge].wei = wei;</span><br><span class="line">            <span class="comment">// 到当前读入的边为止（不包括这条边） 的上一条边的序号；</span></span><br><span class="line">            head[from] = numEdge;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        spfa(edges, head, n, s);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s == i) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;0&quot;</span> + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(dis[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">spfa</span><span class="params">(Edge[] edges, <span class="type">int</span>[] head, <span class="type">int</span> n, <span class="type">int</span> s)</span> &#123;</span><br><span class="line">        ArrayDeque&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 是否存入队列中</span></span><br><span class="line">        <span class="type">boolean</span>[] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dis[i] = INF;</span><br><span class="line">            vis[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将起点存入队列，并将距离记为0，标记已经入队</span></span><br><span class="line">        queue.add(s);</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        vis[s] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 弹出、并标记已经出队</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> queue.pollFirst();</span><br><span class="line">            vis[u] = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// （链式前向星遍历邻接表）扫描所有出边</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> head[u]; i &gt;= <span class="number">1</span>; i = edges[i].next) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> edges[i].to;</span><br><span class="line">                <span class="comment">// 如果有最短路就更改</span></span><br><span class="line">                <span class="keyword">if</span> (dis[v] &gt; dis[u] + edges[i].wei) &#123;</span><br><span class="line">                    dis[v] = dis[u] + edges[i].wei;</span><br><span class="line">                    <span class="comment">// 未入队则入队</span></span><br><span class="line">                    <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                        <span class="comment">// 标记入队</span></span><br><span class="line">                        vis[v] = <span class="literal">true</span>;</span><br><span class="line">                        queue.addLast(v);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="comment">// 当前边的上一个边</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> next;</span><br><span class="line">        <span class="comment">// 当前边的终点</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> to;</span><br><span class="line">        <span class="comment">// 当前边的长度</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> wei;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(<span class="type">int</span> next, <span class="type">int</span> to, <span class="type">int</span> wei)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">            <span class="built_in">this</span>.to = to;</span><br><span class="line">            <span class="built_in">this</span>.wei = wei;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h2 id="djkstra算法">Djkstra算法</h2>
<div class="panel panel-info">
    <div class="panel-title">关键词</div>
    <div class="panel-body">
        <p>单源、只可有正边，时间：O(n^2)，空间：O(N)。适合于稠密图。</p>
<p>堆优化版，O(mlogm)，空间：O(m+n)。适合于稀疏图。</p>
<p>注意，如果图为稠密图，堆优版不一定优于暴力版。</p>

    </div>
    </div>
<p>朴素dijkstra算法</p>
<p>dijkstra是基于贪心思想的最短路算法，该算法将点分为已经访问过的点和未访问过的点（代码用vis数组区分），已经访问的点都是起点到该点最短距离已经确定的点。每一次从未访问的点中选择距离起点最近的点，作为下一个访问的点，标记为已访问，同时使用该点更新其他点距离（主要是更新相邻点的距离，由于不确定哪些点，简单的做法就是尝试更新所有点）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dijkstra</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">inf</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span>[] dis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(); <span class="comment">// n 个节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt(); <span class="comment">// 接下来m行表示边的关系</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> sc.nextInt(); <span class="comment">// 起点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化图</span></span><br><span class="line">        <span class="type">int</span>[][] graphArr = initGraph(sc, n, m);</span><br><span class="line"></span><br><span class="line">        dijkstra(n, s, graphArr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s == i) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;0&quot;</span> + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(dis[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dijkstra</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> s, <span class="type">int</span>[][] graphArr)</span> &#123;</span><br><span class="line">        <span class="comment">// 是否访问数组</span></span><br><span class="line">        <span class="type">boolean</span>[] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 初始化起点到其他点的距离为无穷大</span></span><br><span class="line">        <span class="comment">// 存储起点到其他点的最短距离</span></span><br><span class="line">        dis = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dis, inf);</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为什么此刻不能将其标记为True？</span></span><br><span class="line">        <span class="comment">// 代码写法原因，如果此刻标记为true，那么!vis[s],就为false,第一次进入时由于u == -1，可能将u更新为点1或点2为最短（非起点序号最小的点），</span></span><br><span class="line">        <span class="comment">// 除了起点外，其他点距离都是无穷大，dis[j] &lt; dis[u]永远为false，显然这是错误的，离起点最短距离点是与编号无关的。</span></span><br><span class="line">        <span class="comment">// vis[s] = true;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">// u表示未访问的点中，距离起点最短的点</span></span><br><span class="line">            <span class="comment">// 初始化u = -1，用来先在未访问的点中挑一个点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!vis[j] &amp;&amp; (u == -<span class="number">1</span> || dis[j] &lt; dis[u])) &#123;</span><br><span class="line">                    <span class="comment">// 设置u为距离起点最短的点</span></span><br><span class="line">                    u = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 标记u已经访问</span></span><br><span class="line">            vis[u] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">1</span>; v &lt;= n; v++) &#123;</span><br><span class="line">                <span class="comment">// 通过点u更新其他点的距离（主要是更新u点的相邻距离，因为dis[u]既然为当前最小，那么其一定有值，不是无穷大）</span></span><br><span class="line">                <span class="comment">// dis[u] + graphArr[u][v] 则能更新起点到v的距离</span></span><br><span class="line">                dis[v] = Math.min(dis[v], dis[u] + graphArr[u][v]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] initGraph(Scanner sc, <span class="type">int</span> n, <span class="type">int</span> m) &#123;</span><br><span class="line">        <span class="type">int</span>[][] graphArr = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 初始化图，根据题目节点编号从1开始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            Arrays.fill(graphArr[i], inf);</span><br><span class="line">            graphArr[i][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置图的初始距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            graphArr[u][v] = Math.min(graphArr[u][v], w);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> graphArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>堆优化版dijkstra算法</p>
<p>在寻找未访问过的点i（vis[i]=false），且离起点最近的点时，我们可以采用堆优化，从而将时间复杂度降低到mlogn。备注：时间复杂度mlogm，建议用于稀疏图，稠密图可以理解为图中m=n^2。<br>
复杂度分析：大部分在注释中已经分析，每条边最多入优先队列一次，最多入队列m条边，因此时间复杂度为O(mlogm)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">inf</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dijkstraWithHeap</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> s, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">    <span class="comment">// dijkstra堆优版一般用于稀疏图，所以特殊用邻接表,因为要存权重值，所以里面的值用int[]数组存储，</span></span><br><span class="line">    <span class="comment">// int[]共两位，0位表示终点v，1位表示权重w</span></span><br><span class="line">    List&lt;<span class="type">int</span>[]&gt;[] graphArr = <span class="keyword">new</span> <span class="title class_">List</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; graphArr.length; i++) &#123;</span><br><span class="line">        graphArr[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 建图</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> edge[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> edge[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> edge[<span class="number">2</span>];</span><br><span class="line">        graphArr[u].add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;v, w&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] dis = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否访问数组</span></span><br><span class="line">    <span class="type">boolean</span>[] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 初始化起点到其他点的距离为无穷大</span></span><br><span class="line">    <span class="comment">// 存储起点到其他点的最短距离</span></span><br><span class="line">    dis = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    Arrays.fill(dis, inf);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优先队列，按距离起点的距离升序排序</span></span><br><span class="line"></span><br><span class="line">    PriorityQueue&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((o1, o2) -&gt; o1[<span class="number">1</span>] - o2[<span class="number">1</span>]);</span><br><span class="line">    queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;s, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span>[] node = queue.poll();</span><br><span class="line">        <span class="comment">// 当前未访问的点中距离起点最近的点u</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> node[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// u被访问过，不继续访问u</span></span><br><span class="line">        <span class="keyword">if</span> (vis[u]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 遍历u连通的点，每条边最多会遍历一次（如上u已经被访问，则不会继续遍历与u相连的边），总共最多遍历m次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] graph : graphArr[u]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> graph[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> graph[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 如果起点到v能够被u松弛，则松弛，同时v入堆，会有点重复入堆，但是入堆最多m次，因为for遍历最多m次</span></span><br><span class="line">            <span class="comment">// 对于重复入堆的点，第1次访问后，我们标记vis[i]为true，不再访问。</span></span><br><span class="line">            <span class="keyword">if</span> (dis[u] + w &lt; dis[v]) &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;v, dis[v]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>树与二叉树</title>
    <url>/2021/10/09/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<p>《数据结构与算法分析Java语言描述》第二章4.1与4.2节节<strong>读书笔记</strong></p>
<span id="more"></span>
<h2 id="4-1-树">4.1 树</h2>
<p>定义树的一种自然方式是递归。一棵树是N个节点和N-1条边的集合。</p>
<blockquote>
<p>一棵树是一些节点的集合。可以是空集。若不为空，则由根节点r和0个或多个非空的字树T1，T2，T3，…，Tk组成，子树中每一颗根都被来自r的一条有向边连结。</p>
</blockquote>
<p>树的术语定义：</p>
<img src="/2021/10/09/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/树.png" alt="树" style="zoom:80%;">
<ul>
<li>子节点：若节点E有子树，则子树的根节点(如J)为E的子节点。</li>
<li>父节点：若节点E有子节点，则E为子节点(如J)的父节点。</li>
<li>节点的度：节点有子树棵树(子节点个数)</li>
<li>叶子节点：没有儿子节点的节点(度为0的节点)，如图节点P等。</li>
<li>兄弟节点：具有相同父节点的节点互为兄弟节点。如P节点与Q节点。</li>
<li>节点层次(level)：本书称节点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">n_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的深度，从根节点到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">n_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的路径长，因此根节点层次(深度)为0.</li>
<li>树的深度(注意是树)：其他书特指：根节点到最远叶子节点的路径长。根节点深度为0。</li>
<li>树的高度：最深的叶子节点高度为0，一棵树高等于根高。如E：深度为1，高为2。(其他书特指最大高度。即高度=深度)。</li>
<li>祖先与真祖先、后裔与真后裔：如果存在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">n_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的一条路径，那么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">n_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的祖先，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">n_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的后裔，如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub><mo mathvariant="normal">≠</mo><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n_1 \ne n_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">n_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的真祖先，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">n_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的真后裔。</li>
</ul>
<h3 id="4-1-1-树的实现">4.1.1 树的实现</h3>
<p>  节点存储数据，另有一些链，该节点的每一个子节点都有链指向它。由于不确定有多少链，因此采用其他解决方法，将每个节点的子节点都放在一个链表中。<br>
  如下是针对上述的一种实现(对应图4.2)。向下的箭头指向firstChild(第一儿子)的链，水平箭头指向nextSibling(下一兄弟)的链。null链未画出。如节点E有链指向兄弟F，另一链指向儿子I。<br>
<img src="/2021/10/09/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0.png" alt></p>
<table><br></table>
<h3 id="4-1-2-树的应用与遍历">4.1.2 树的应用与遍历</h3>
<blockquote>
<p>所谓的序是指遍历时根的位置，如前序就是<strong>根左右</strong>，中序就是<strong>左根右</strong>(针对二叉树)，后序就是<strong>左右根</strong></p>
</blockquote>
<p><strong>树的应用</strong><br>
  多叉树的一种用法是UNIX与DOS系统的目录结构，如下图是UNIX文件的一个典型应用。<br>
<img src="/2021/10/09/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/UNIX目录.png" style="zoom:75%;"></p>
<p><strong>先序遍历</strong>展示所有目录：<br>
  先序遍历按照先根后左(子树)再右(子树)。例如上图某次的遍历实现。usr -&gt; mark -&gt; book - &gt; ch1.r -&gt; ch2.r -&gt; ch3.r -&gt; course(右子树) -&gt; cop3530 -&gt; fail -&gt; syl.r -&gt; spr -&gt; syl.r -&gt; sum -&gt; syl.r -&gt; junk(右子树) -&gt; alex…<br>
该算法遍历每一个节点，显然先序遍历的时间复杂度为O(N)。<br>
  <strong>记忆口诀</strong>：根左右</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪代码实现，具体实现会在二叉树实现</span></span><br><span class="line"><span class="comment">// depth 从深度为几的位置开始遍历，如要遍历所有数据，从depth = 0开始</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">listAll</span><span class="params">(<span class="type">int</span> depth)</span> &#123;</span><br><span class="line">    print(depth); <span class="comment">// 打印文件或文件夹名字</span></span><br><span class="line">    <span class="comment">// 遍历该目录下的所有子文件目录，再里面递归遍历</span></span><br><span class="line">    <span class="keyword">for</span> each file c in <span class="built_in">this</span> <span class="title function_">directory</span> <span class="params">(<span class="keyword">for</span> each child)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归遍历所有子目录的结果</span></span><br><span class="line">        c.listAll(depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>后序遍历</strong>计算某树目录下的所有文件大小：括号内代表所占区块个数</p>
<img src="/2021/10/09/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/后续遍历具有大小的Unix目录.png" alt="后续遍历unix目录" style="zoom:75%;">
<p>  要计算usr目录下的文件所占的存储大小，找出其所有子目录mark(30)、alex(9)、bill(32)的区块个数和为71，加上usr的区块个数和为1，最终为72。如果当前对象不是目录，size只返回当前对象的区块数，否则该目录占用的区块数被加到所有子节点(递归)发现的区块数中。usr:1(暂存) -&gt; chl.r:(3+1) -&gt; ch2.r(4+2) -&gt; ch3.r(6+4) -&gt; book(10+1) -&gt; syl.r(11+1)…<br>
<strong>注意</strong>：以上暂存代表并未实现真正的遍历，因此遍历是从ch1.r开始的，ch1.r -&gt; ch2.r -&gt; ch3.r -&gt; book -&gt; syl.r -&gt; fall -&gt; syl.r -&gt; spr -&gt; syl.r -&gt; sum -&gt; cop3530 -&gt; course -&gt; junk -&gt; mark -&gt; junk -&gt; alex -&gt;work -&gt; grades…<br>
  <strong>记忆口诀</strong>：左右根</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后续遍历伪代码实现 计算总区块数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 当前目录所占区块数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">totalSize</span> <span class="operator">=</span> sizeOfThisFile();</span><br><span class="line">    <span class="keyword">if</span> (isDirectory) &#123;</span><br><span class="line">        <span class="keyword">for</span> each file c in <span class="built_in">this</span> <span class="title function_">directory</span> <span class="params">(<span class="keyword">for</span> each child)</span> &#123;</span><br><span class="line">            <span class="comment">// 总区块数=当前子树根目录区块数+其下所有区块数总和</span></span><br><span class="line">            totalSize += c.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> totalSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table><br></table>
<h2 id="4-2-二叉树">4.2 二叉树</h2>
<blockquote>
<p>如果一棵树，其每个子节点最多不超过两个儿子。在最坏的情况下二叉树可能会退化为一个链表</p>
</blockquote>
<h3 id="4-2-1-二叉树的实现">4.2.1 二叉树的实现</h3>
<p>  一棵二叉树最多有两个节点，因此只需要一个元素的信息(element)和到其他两个节点的引用(left与right)组成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class BinaryNode &#123;</span><br><span class="line">    Object element;		<span class="comment">// 当前节点数据</span></span><br><span class="line">    BinaryNode left;	<span class="comment">// 左孩子</span></span><br><span class="line">    BinaryNode right;	<span class="comment">// 右孩子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-2-例子：表达式子树">4.2.2 例子：表达式子树</h3>
<p>  如下图为一个表达式子树，树叶为操作数，其他节点为操作符，其操作都是二元的，(如果不是，孩子可能出现大于2的情况)。</p>
<img src="/2021/10/09/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/表达式树.png" style="zoom:75%;">
<p><strong>中序遍历</strong>：如树的介绍左根右，递归产生带括号的左表达式，然后打印出再根的运算符，再递归产生一个带括号的有表达式，从而得到带括号的中缀表达式(一个括号代表一个子树)。得到：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>∗</mo><mi>c</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>d</mi><mo>∗</mo><mi>e</mi><mo>+</mo><mi>f</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>g</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(a + b * c) + ((d * e + f) * g)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mclose">)</span></span></span></span>。中缀表达式。<br>
<strong>后序遍历</strong>：如树介绍的左右根，先递归的打印出左子树，右子树，再打印运算符，将的到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mtext> </mtext><mi>b</mi><mtext> </mtext><mi>c</mi><mtext> </mtext><mo>∗</mo><mtext> </mtext><mi>f</mi><mtext> </mtext><mo>+</mo><mtext> </mtext><mi>g</mi><mtext> </mtext><mo>∗</mo><mtext> </mtext><mo>+</mo></mrow><annotation encoding="application/x-tex">a \  b \  c \  * \  f \  + \ g \ * \  +</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace"> </span><span class="mord mathdefault">b</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace"> </span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace"> </span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.6597200000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace"> </span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span></span></span></span> 。后缀表达式(逆波兰表达式)。<br>
<strong>先序遍历</strong>：如树介绍的根左右，先打印出运算符，再递归打印出左子树和右子树。得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo><mo>+</mo><mi>a</mi><mo>∗</mo><mi>b</mi><mi>c</mi><mo>∗</mo><mo>+</mo><mo>∗</mo><mi>d</mi><mi>e</mi><mi>f</mi><mi>g</mi></mrow><annotation encoding="application/x-tex">++a*bc*+*defg</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span> 。前缀表达式(波兰表达式)。</p>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>栈与队列</title>
    <url>/2021/09/21/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p>《数据结构与算法分析Java语言描述》第二章3.6与3.7节节<strong>读书笔记</strong></p>
<span id="more"></span>
<h2 id="3-6-栈adt">3.6 栈ADT</h2>
<h3 id="3-6-1-栈模型">3.6.1 栈模型</h3>
<blockquote>
<p>栈是插入和删除只能在末端的表，该位置叫栈顶(类似一个桶)。对栈的操作只有进栈(push)与出栈(pop)。</p>
</blockquote>
<p>  栈是一个后进先出(LIFO)表。我们对栈能进行的操作基本只有push和pop操作。位于栈顶的元素，是唯一直接可见(可访问)的元素。</p>
<h3 id="3-6-2-栈的实现">3.6.2 栈的实现</h3>
<p>  栈是一个表，任何能实现表的的方法都能实现栈，给出两种流行的实现方法：一种使用链式结构，一种使用数组，二者均简化了在ArrayList和LinkedList的实现。</p>
<p>  <strong>栈的链表实现</strong><br>
  使用单链表，在表的顶端插入实现push，删除表顶端的元素实现pop，top操作获取表顶端的元素并返回值，有时pop与top合二为一。</p>
<p>  <strong>栈的数组实现</strong><br>
  数组的实现避免了链而且可能是最流行的解决方案。push模仿ArrayList的add操作，实现简单。与栈相关的操作是theArray和topOfStack，对空栈，topOfStack为-1(初始化操作)，当由元素x入栈时，topOfStack + 1，theArray[topOfStack] = x。 同理弹栈的时候返回theArray[topOfStack] ，之后topOfStack - 1。<br>
  上述操作皆以常数时间运行，再某些机器上push与pop都可以写作一条机器指令，现代化计算机将栈操作作为指令系统的一部分。</p>
<h3 id="3-6-3-应用">3.6.3 应用</h3>
<p>  <strong>平衡符号</strong><br>
  编译器检查具有成对的符号(如大括号、括号)缺失引起的编译错误。例如[()]是合法的，但是[(])是错误的。对该算法的简单叙述如下：<br>
  将所有字符读入，如果字符是是一个开放符号(成对符号左边的)，就将符号入栈(注意是只入栈符号)。如果是封闭符号，当空栈时报错，否则将栈顶的元素弹出，如果弹出的不是对应的开放符号，则报错，如果读到文件尾，栈非空，则报错。该算法时线性的，且他是联机算法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 平衡符号简化版，leetCode 20 有效括号</span></span><br><span class="line"><span class="comment"> * 栈Stack是线程安全的，可以考虑使用非线程安全的Deque，或者使用数组、链表模拟栈</span></span><br><span class="line"><span class="comment"> * Deque&lt;Character&gt; stack = new LinkedList&lt;&gt;();</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str 需要检测的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isBalanceChar</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chars[i] == <span class="string">&#x27;(&#x27;</span> || chars[i] == <span class="string">&#x27;[&#x27;</span> || chars[i] == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            stack.push(chars[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 返回并弹出栈顶的元素，(如果不弹出使用peek)</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="comment">// 如果弹出的符号与所有的符号都不匹配，返回false</span></span><br><span class="line">            <span class="keyword">if</span> ((chars[i] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; c != <span class="string">&#x27;(&#x27;</span>) || (chars[i] == <span class="string">&#x27;]&#x27;</span> &amp;&amp; c != <span class="string">&#x27;[&#x27;</span>) || (chars[i] == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; c != <span class="string">&#x27;&#123;&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后当所有元素被弹出，则代表true</span></span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table><br></table>
<p>  <strong>后缀表达式</strong><br>
  在我们使用的四则运算中，我们都知道乘除优先，需要指定优先级时，可以使用括号，但这(中序表达式)对于计算机则非常不友好，于是有了<strong>后缀表达</strong>式或称<strong>逆波兰式</strong>。操作符号放在需要参与运算的数的后面，并且与他前面的数参与运算。他的一个显著的优点是不需要知道运算的优先规则。<br>
  例如表达式 <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn><mtext> </mtext><mn>5</mn><mtext> </mtext><mn>2</mn><mtext> </mtext><mn>3</mn><mtext> </mtext><mo>+</mo><mtext> </mtext><mn>8</mn><mtext> </mtext><mo>∗</mo><mtext> </mtext><mo>+</mo><mtext> </mtext><mn>3</mn><mtext> </mtext><mo>+</mo><mtext> </mtext><mo>∗</mo></mrow><annotation encoding="application/x-tex">6 \ 5 \ 2 \ 3\ + \ 8 \ * \ + \ 3 \ + \ *</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mspace"> </span><span class="mord">5</span><span class="mspace"> </span><span class="mord">2</span><span class="mspace"> </span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace"> </span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace"> </span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mspace"> </span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace"> </span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span></span></span></span></strong>  的含义：将6、5、2、3入栈，遇到+号，表示+号前面的3+前面的2弹栈，并将得到5入栈。再遇到8，8入栈，接着遇到*号，则*号前面的8与5的弹栈，并将8*5的结果40入栈。。。(即遇到数字就继续入栈，遇到四则符号就将前面的两个数弹栈，并将计算的结果入栈)。上式的计算结果如下。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mn>3</mn><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo><mo>∗</mo><mn>8</mn><mo stretchy="false">)</mo><mo>+</mo><mn>5</mn><mo stretchy="false">)</mo><mo>+</mo><mn>3</mn><mo stretchy="false">)</mo><mo>∗</mo><mn>6</mn><mo>=</mo><mn>288</mn></mrow><annotation encoding="application/x-tex">((((3+2) * 8) + 5)+3)*6 = 288
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">8</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">8</span><span class="mord">8</span></span></span></span></span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逆波兰表达式计算 LeetCode剑指Offer 第二版 036 后缀表达式 (除法只取整数)</span></span><br><span class="line"><span class="comment"> * 简化版，前提：该逆波兰表达式是正确的，且已经转为数组</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvalRPNTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] tokens = &#123;<span class="string">&quot;2&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;*&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> evalRPN(tokens);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (token) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;+&quot;</span> :</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;-&quot;</span> :</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;*&quot;</span> :</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;/&quot;</span> :</span><br><span class="line">                    <span class="comment">// 如果遇到了运算符，获取并弹出栈顶的两个元素</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    <span class="comment">// 计算两个元素并将结果入栈</span></span><br><span class="line">                    stack.push(calc(num1, num2, token));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    stack.push(Integer.parseInt(token));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer <span class="title function_">calc</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2, String token)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (token) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> num1 + num2;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> num1 - num2;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> num1 * num2;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> num1 / num2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table><br></table>
<p>  <strong>中缀转后缀表达式</strong><br>
  日常使用的中缀表达式可以转为后缀表达式，之后方便计算机进行计算。<br>
范例：a + b * c + (d * e + f) * g ====== a b c *+ d e * f + g *+<br>
逻辑：</p>
<ol>
<li>初始化一个栈，用于存放运算符；初始化一个List用于存放数字。List为最终结果</li>
<li>如果遇到数字，则直接存入List</li>
<li>如果遇到运算符，则与栈顶的运算符比较，如果优先级比栈顶的高，则入栈，否则(<strong>同优先级或者低</strong>)将<strong>栈顶的运算符</strong>弹栈再存入队列，之后再将运算符与栈顶的元素继续比较，直到入栈。(优先级 ‘*’ = ‘/’ &gt; ‘+‘ = ‘-’)。注意运算符不与括号比较，直接入栈。</li>
<li>如果遇到左括号，则直接入栈，如果遇到右括号，则将栈顶的运算符依次弹出存入队列，直到遇到左括号(不判断栈空的情况：表达式错误)，弹出左括号。(注意括号只弹出，不输出)</li>
<li>如果传入数组遍历完毕，则依次弹出栈顶元素存入List。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuffixExpression</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">expression</span> <span class="operator">=</span> <span class="string">&quot;1+((23+3)*4)-5&quot;</span>;</span><br><span class="line">        List&lt;String&gt; expressionList = expressionToList(expression);</span><br><span class="line">        System.out.println(<span class="string">&quot;中缀表达式字符串转List：&quot;</span> + expressionList);</span><br><span class="line">        <span class="comment">//将中缀表达式转换为后缀表达式</span></span><br><span class="line">        List&lt;String&gt; suffixList = parseToSuffixExpression(expressionList);</span><br><span class="line">        System.out.println(<span class="string">&quot;中缀表达式：&quot;</span> + suffixList);</span><br><span class="line">        <span class="comment">// 使用前面的计算中缀表达式的方法，</span></span><br><span class="line">        <span class="comment">// 将List转数组包括泛型：suffixList.toArray(new String[suffixList.size()])</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> EvalRPNTest.evalRPN(suffixList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[suffixList.size()]));</span><br><span class="line">        System.out.println(<span class="string">&quot;后缀表达式计算结果：&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中缀表达式转后缀表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expressList 需要转换的List，假设List的中缀表达式是正确的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">parseToSuffixExpression</span><span class="params">(List&lt;String&gt; expressList)</span> &#123;</span><br><span class="line">        <span class="comment">// 保存运算符的栈</span></span><br><span class="line">        Stack&lt;String&gt; opStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化保存数字的List，最终用来保存结果的List</span></span><br><span class="line">        ArrayList&lt;String&gt; suffixList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String item : expressList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 如果是数字，则直接存入List</span></span><br><span class="line">                suffixList.add(item);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;+&quot;</span>.equals(item) || <span class="string">&quot;-&quot;</span>.equals(item) || <span class="string">&quot;*&quot;</span>.equals(item) || <span class="string">&quot;/&quot;</span>.equals(item)) &#123;</span><br><span class="line">                <span class="comment">// 如果是运算符</span></span><br><span class="line">                <span class="keyword">if</span> (opStack.isEmpty() || <span class="string">&quot;(&quot;</span>.equals(opStack.peek()) || MyPriority.getPriority(item) &gt; MyPriority.getPriority(opStack.peek())) &#123;</span><br><span class="line">                    <span class="comment">// 如果是空栈(先判断避免NPE)，或者如果栈顶是左括号，或者如果优先级比栈顶的运算符高</span></span><br><span class="line">                    opStack.push(item);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 是运算符，且优先级小于或者等于</span></span><br><span class="line">                    <span class="comment">// 将运算符弹栈，直到遇到左括号或者优先级更低的或者空栈(见下面的while解释)</span></span><br><span class="line">                    <span class="keyword">while</span> (!opStack.isEmpty() &amp;&amp; !<span class="string">&quot;(&quot;</span>.equals(opStack.peek())) &#123;</span><br><span class="line">                        <span class="comment">// 如果item的优先级小于等于栈顶元素</span></span><br><span class="line">                        <span class="keyword">if</span> (MyPriority.getPriority(item) &lt;= MyPriority.getPriority(opStack.peek())) &#123;</span><br><span class="line">                            suffixList.add(opStack.pop());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 当前操作符入栈</span></span><br><span class="line">                    opStack.push(item);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;(&quot;</span>.equals(item)) &#123;</span><br><span class="line">                opStack.push(item);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;)&quot;</span>.equals(item)) &#123;</span><br><span class="line">                <span class="comment">// 如果是右括号，则弹出栈中元素，直到遇到左括号，</span></span><br><span class="line">                <span class="comment">// 假设中缀表达式正确，故不再判断栈是否为空(为空之前一定会遇到左括号)</span></span><br><span class="line">                <span class="keyword">while</span> (!<span class="string">&quot;(&quot;</span>.equals(opStack.peek())) &#123;</span><br><span class="line">                    suffixList.add(opStack.pop());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 弹出左括号</span></span><br><span class="line">                opStack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历完毕，将栈中的所有运算符弹出</span></span><br><span class="line">        <span class="keyword">while</span> (!opStack.isEmpty()) &#123;</span><br><span class="line">            suffixList.add(opStack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> suffixList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符串转List，不用toCharArray是因为有多位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expression</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">expressionToList</span><span class="params">(String expression)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> expression.charAt(index);</span><br><span class="line">            <span class="keyword">if</span>(ch &lt; <span class="number">47</span> || ch &gt; <span class="number">58</span>)&#123;</span><br><span class="line">                <span class="comment">//是操作符，直接添加至list中</span></span><br><span class="line">                index ++ ;</span><br><span class="line">                list.add(ch+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch &gt;= <span class="number">47</span> &amp;&amp; ch &lt;= <span class="number">58</span>)&#123;</span><br><span class="line">                <span class="comment">//是数字,判断多位数的情况</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">while</span> (index &lt; expression.length() &amp;&amp; expression.charAt(index) &gt;=<span class="number">47</span> &amp;&amp; expression.charAt(index) &lt;= <span class="number">58</span>)&#123;</span><br><span class="line">                    str += expression.charAt(index);</span><br><span class="line">                    index ++;</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span> (index &lt; expression.length());</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优先级，也可以写成方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyPriority</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">ADD</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SUB</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">MUL</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DIV</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不需要break，因为已经return</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">getPriority</span><span class="params">(String opr)</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (opr) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> ADD;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> SUB;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> MUL;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> DIV;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table><br></table>
<h2 id="3-7-队列adt">3.7 队列ADT</h2>
<h3 id="3-7-1-队列模型">3.7.1  队列模型</h3>
<blockquote>
<p>队列的入队发生在队列尾，出队出现在队首。类似排队，只能在队尾增加，队首删除。</p>
</blockquote>
<h3 id="3-7-2-队列的数组实现">3.7.2 队列的数组实现</h3>
<p>  队列的数组与链表都可以实现，都是O(1)的时间运行。如下是数组的实现。<br>
<strong>顺序队列</strong>：初始时，head与tail指针同时指向0，每当新增元素，tail++，删除元素，head–。直到数组尾部。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顺序队列简单实现，无扩容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeqArrayQueue</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 队列容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="comment">// 队列存储元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> currentSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> head;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> tail;</span><br><span class="line">    <span class="keyword">private</span> T[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SeqArrayQueue</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">        capacity = cap;</span><br><span class="line">        currentSize = <span class="number">0</span>;</span><br><span class="line">        head = <span class="number">0</span>;</span><br><span class="line">        tail = <span class="number">0</span>;</span><br><span class="line">        arr = (T[]) <span class="keyword">new</span> <span class="title class_">Object</span>[cap];</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 入队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(T element)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(<span class="string">&quot;队列越界&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[tail++] = element;</span><br><span class="line">            currentSize++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 出队</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">dequeue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空，无法删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        currentSize--;</span><br><span class="line">        <span class="keyword">return</span> arr[head++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getHeadElement</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> arr[head];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getTailElement</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> arr[tail];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里判断是否满，之判断是否数组的末尾是否被使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tail == capacity-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head == tail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>循环队列</strong>：初始时，head与tail指针同时指向0，每当新增元素，tail++，删除元素，head–。如数组越界，则插入倒队首对应的位置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoopArrayQueue</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 队列容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="comment">// 队列存储元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> currentSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> head;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> tail;</span><br><span class="line">    <span class="keyword">private</span> T[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoopArrayQueue</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">        capacity = cap;</span><br><span class="line">        currentSize = <span class="number">0</span>;</span><br><span class="line">        head = <span class="number">0</span>;</span><br><span class="line">        tail = <span class="number">0</span>;</span><br><span class="line">        arr = (T[]) <span class="keyword">new</span> <span class="title class_">Object</span>[cap];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环队列改变点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(T element)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(<span class="string">&quot;队列越界&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[tail] = element;</span><br><span class="line">            <span class="comment">// 尾指针还是+1，对容量取余：如果越界，就移动到队首对应的位置</span></span><br><span class="line">            tail = (tail+<span class="number">1</span>) % capacity;</span><br><span class="line">            currentSize++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环队列改变点</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">dequeue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空，无法删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        currentSize--;</span><br><span class="line">        <span class="type">T</span> <span class="variable">deQueueElement</span> <span class="operator">=</span> arr[head];</span><br><span class="line">        <span class="comment">// 头指针还是+1，对容量取余：如果越界，就移动到队首对应的位置</span></span><br><span class="line">        head = (head + <span class="number">1</span>) % capacity;</span><br><span class="line">        <span class="keyword">return</span> deQueueElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getHeadElement</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> arr[head];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getTailElement</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> arr[tail];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环队列改变点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 头指针+1等于尾指针，取余是为了处理越界，放道队首对应的位置</span></span><br><span class="line">        <span class="keyword">return</span> tail == (head + <span class="number">1</span>) % capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head == tail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>范型与函数对象</title>
    <url>/2021/04/03/%E8%8C%83%E5%9E%8B%E4%B8%8E%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>《数据结构与算法分析Java语言描述》第一章1.4与1.5节<strong>读书笔记</strong></p>
<span id="more"></span>
<h2 id="1-范型">1. 范型</h2>
<p>范型机制：如果对象除去基本类型外，其余的实现方法相同，可以用范型实现来描述。</p>
<h3 id="1-1-使用object表示范型">1.1 使用Object表示范型</h3>
<p>  Object类是所有类的超类，可以通过Object类实现范型类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemoryCell</span> &#123;</span><br><span class="line">    <span class="comment">// 通过Object实现范型对象</span></span><br><span class="line">    <span class="keyword">private</span> Object storedValue;</span><br><span class="line">    <span class="comment">// 写：给存储的值赋值，通过Object写入范型对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(Object x)</span> &#123;</span><br><span class="line">        storedValue = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 读：返回存储的值</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> storedValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意，如果需要一个特定的类型使用，则需要强制转为正确的类型。</li>
<li>不能使用基本类型(8大类型)，只有引用类型(类、接口类型、数组类型、枚举类型)与Object相容。(这里测试实际是可以的(Java8)：<strong>自动拆装箱</strong>)</li>
</ul>
<table><br></table>
<h3 id="1-2-包装类型">1.2 包装类型</h3>
<p>  Java提供了8种基本类型，这8种类型不能与Objecct相容，所以Java提供了对应的包装类。</p>
<table><br></table>
<h3 id="1-3-使用接口表示范型">1.3 使用接口表示范型</h3>
<p>  只有在使用Object类中已有的方法能够表示所执行的操作时，才能使用Object作为范型类工作。(与代码对象类型无关)。<br>
  例如找出Object数组中的最大项，与类型无关，只能实现Comparable接口，重写compareTo方法。</p>
<table><br></table>
<h3 id="1-5-利用java范型特性">1.5 利用Java范型特性</h3>
<blockquote>
<p>Java支持范型类与范型方法</p>
</blockquote>
<h4 id="1-5-1-简单范型类和接口">1.5.1 简单范型类和接口</h4>
<p>  在类上使用&lt;范型&gt;，表示一个范型类。如下是前面的MemoryCell类范型版代码。也可以实现范型接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericMemoryCell</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// 指定范型为T，new类的对象时候再指定类型，注意不能是int类的基本类型</span></span><br><span class="line">    <span class="keyword">private</span> T storedValue;</span><br><span class="line">    <span class="comment">// 读：返回存储的值</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> storedValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 写：给存储的值赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(T x)</span> &#123;</span><br><span class="line">        storedValue = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-5-2-自动拆箱-装箱">1.5.2 自动拆箱/装箱</h4>
<p>自动装箱：如果一个基本类型，例如int被传递到一个需要Integer对象的地方，编译器幕后插入对Integer构造方法调用。<br>
自动拆箱：一个包装类型，例如Integer被放到需要int类型的地方，则编译器幕后调用一个intValue方法。<br>
注意：需要指定范型的地方，仍是不可改变的。</p>
<h4 id="1-5-4-带有限制的通配符">1.5.4 带有限制的通配符</h4>
<p>  为了解决范型的一些问题，Java使用 通配符：<code>?</code>来解决这些问题，如下方法表示范型必须是Shape类或者其子类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该方法的集合参数的范型必须是Shape类或者Shape类的子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">totalArea</span><span class="params">(Collection&lt;? extends Shape&gt; arr)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-5-6-类型界限">1.5.6 类型界限</h4>
<p>  例如，想实现如下代码，编译器不能证明在第行对compareTo的调用是合法的。只有在<code>T</code>是Comparable的情况下才能保证compareTo存在。可以使用<code>类型界限</code>解决。在&lt;&gt;内，指定参数必须具有的性质。<br>
<strong>错误的代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FindMaxTest</span> &#123;</span><br><span class="line">    <span class="comment">// 返回T类型的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">findMax</span><span class="params">(T[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 此处报错，T类型的对象没有实现Comparable接口，不可直接比较</span></span><br><span class="line">            <span class="keyword">if</span> (arr[i].compareTo(arr[maxIndex]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[maxIndex];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正确代码</strong>：<code>&lt;T extends Comparable&lt;? super T&gt;&gt;</code>：<br>
区别：<code>&lt;T extends Comparable&lt;? super T&gt;&gt;</code>：T必须继承Comparable接口或者父类继承了Comparable接口<br>
  <code>&lt;T extends Comparable&lt;T&gt;&gt;</code>：T必须继承Comparable接口<br>
  T extends决定了传入对象的上限是T(只能是T或子类)，&lt;? super T&gt;决定了下限是T(最少T实现了Comparable)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FindMaxTest</span> &#123;</span><br><span class="line">    <span class="comment">// 返回T类型的对象,这里使用如下范型，规定了T必须继承Comparable接口或者父类继承了Comparable接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> T&gt;&gt; T <span class="title function_">findMax</span><span class="params">(T[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i].compareTo(arr[maxIndex]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[maxIndex];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-5-7-类型擦除">1.5.7 类型擦除</h4>
<p>  Java中的范型是伪范型，只在源码中存在，只在源码中有效，有编译检查。一旦编译通过，Java的范型就会被擦除，成为原生类型，称为类型擦除。</p>
<h4 id="1-5-8-范型的限制">1.5.8 范型的限制</h4>
<p>由于类型擦除的原因，下面的每一个限制都必须遵守。</p>
<p><strong>基本类型</strong></p>
<p> 基本类型不能用作类型参数，如<code>GenericMemoryCell&lt;int&gt;</code>非法，必须使用包装类。</p>
<p><strong>instanceof检测</strong></p>
<p> insatanceof检测和类型转换只对原始类型(此处的GenericMemoryCell)进行。编译通过后，类型会被擦除，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        GenericMemoryCell&lt;Integer&gt; cell1 = <span class="keyword">new</span> <span class="title class_">GenericMemoryCell</span>&lt;&gt;();</span><br><span class="line">        cell1.write(<span class="number">4</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">cell</span> <span class="operator">=</span> cell1;</span><br><span class="line">        GenericMemoryCell&lt;String&gt; cell2 = (GenericMemoryCell&lt;String&gt;) cell;</span><br><span class="line">        <span class="comment">// 此处报错，Integer不能转String，上面的不报错，因为上面的类型都是GenericMemoryCell类型</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> cell2.read();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>范型类型不能实例化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">T</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>()   <span class="comment">// 右边是非法的</span></span><br></pre></td></tr></table></figure>
<p><strong>不能创建范型数组</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T[] arr = <span class="keyword">new</span> <span class="title class_">T</span>[<span class="number">10</span>];    <span class="comment">// 右边是非法的</span></span><br></pre></td></tr></table></figure>
<p><strong>不能实例化参数化类型数组</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ClassCastExceptionTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 此处后面部分指定范型报错,只能不指定范型类型</span></span><br><span class="line">        GenericMemoryCell&lt;String&gt;[] arr1 = <span class="keyword">new</span> <span class="title class_">GenericMemoryCell</span>[<span class="number">10</span>];</span><br><span class="line">        GenericMemoryCell&lt;Double&gt; cell = <span class="keyword">new</span> <span class="title class_">GenericMemoryCell</span>&lt;&gt;();</span><br><span class="line">        cell.write(<span class="number">4.5</span>);</span><br><span class="line">        Object[] arr2 = arr1;</span><br><span class="line">        <span class="comment">// 此处本应该报错，为ArrayStoreException,因为上面的范型规定为String，结果存入了Double，</span></span><br><span class="line">        <span class="comment">// 可是由于类型擦除后，数组类型皆为GenericMemoryCell[]，加入数组中的类型也是GenericMemoryCell，不会报错。</span></span><br><span class="line">        arr2[<span class="number">0</span>] = cell;</span><br><span class="line">        <span class="comment">// 此处报错，Double不能转String，上面的不报错，因为上面的类型擦除后都是GenericMemoryCell类型。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> arr1[<span class="number">0</span>].read();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<table><br></table>
<h2 id="2-函数对象">2 函数对象</h2>
<blockquote>
<p>定义一个只有方法而没有数据的类，然后把这个类的对象传递给别的方法，该对象通常叫做函数对象</p>
</blockquote>
<h3 id="2-1-简单实现">2.1 简单实现</h3>
<p>  如下是一个传递Comparator类型的函数对象的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetTheMaxNum</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;ZEBRA&quot;</span>, <span class="string">&quot;alligator&quot;</span>, <span class="string">&quot;crocodile&quot;</span>&#125;;</span><br><span class="line">        System.out.println(findMax(arr, <span class="keyword">new</span> <span class="title class_">CaseInsensitiveCompare</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 比较方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt;T <span class="title function_">findMax</span><span class="params">(T[] arr, Comparator&lt;? <span class="built_in">super</span> T&gt; cmp)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 因为比较器是升序，所以这里大于0的意思是arr[i]大于arr[index]</span></span><br><span class="line">            <span class="keyword">if</span> (cmp.compare(arr[i], arr[maxIndex]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[maxIndex];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定比较器，范型指定传入的类型是String</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CaseInsensitiveCompare</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;String&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String  o1, String  o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o1.compareToIgnoreCase(o2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>统一异常处理</title>
    <url>/2022/07/05/%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>Spring统一异常处理与jsr303分组验证</p>
<span id="more"></span>
<h2 id="统一异常处理与jsr303">统一异常处理与JSR303</h2>
<h3 id="1-自定义全局统一异常">1. 自定义全局统一异常</h3>
<p>  在需要使用统一异常处理的微服务下创建exception包，并创建统一异常处理类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义全局统一异常</span></span><br><span class="line"><span class="comment"> * RestControllerAdvice注解：表示要捕获异常，同时返回给前端json</span></span><br><span class="line"><span class="comment"> * 		basePackages表示要拦截异常的包，这里指定拦截com.example.example.example.controller包里的异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hcxx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/07/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &quot;com.example.example.example.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleExceptionControllerAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缩小范围异常，才能拿到其中的异常(才有具体的方法), 如果能够精确匹配这个异常，就匹配，否则就去下面的最大的异常</span></span><br><span class="line">    <span class="comment">// 这里的MethodArgumentNotValidException是入参jsr303校验异常。就是后面说的jsr303验证不同过时</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">handleValidException</span><span class="params">(MethodArgumentNotValidException e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;数据校验出现异常: &#123;&#125; , 异常类型：&#123;&#125;&quot;</span>, e.getMessage(), e.getClass());</span><br><span class="line">        <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> e.getBindingResult();</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, String&gt; errorMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 将所有异常信息存储到map中，返回给前端</span></span><br><span class="line">        bindingResult.getFieldErrors().forEach(fieldError -&gt; &#123;</span><br><span class="line">            errorMap.put(fieldError.getField(), fieldError.getDefaultMessage());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> R.error(BIzCodeEnum.VALID_EXCEPTION.getCode(), BIzCodeEnum.VALID_EXCEPTION.getMsg()).put(<span class="string">&quot;data&quot;</span>, errorMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大的异常</span></span><br><span class="line"><span class="comment">     * 注解<span class="doctag">@ExceptionHandler</span>表示要捕获的异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> throwable 可抛出的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Throwable.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">handleException</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;系统异常信息：&#123;&#125;&quot;</span>, throwable.getMessage());</span><br><span class="line">        <span class="keyword">return</span> R.error(BIzCodeEnum.UNKNOWN_EXCEPTION.getCode(), BIzCodeEnum.UNKNOWN_EXCEPTION.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-自定义异常状态">2.  自定义异常状态</h3>
<p>这里的异常状态是可以通用的，所以可以写入common服务中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 错误代码定义为5位数字</span></span><br><span class="line"><span class="comment"> * 2. 前两位表示业务场景</span></span><br><span class="line"><span class="comment"> * 3. 错误描述，定义为枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">BIzCodeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常状态枚举</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UNKNOWN_EXCEPTION(<span class="number">10000</span>, <span class="string">&quot;系统未知异常&quot;</span>),</span><br><span class="line">    VALID_EXCEPTION(<span class="number">10001</span>, <span class="string">&quot;参数格式校验失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BIzCodeEnum(Integer code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="jsr303校验">jsr303校验</h2>
<h3 id="1-高版本spring校验依赖添加">1. 高版本spring校验依赖添加</h3>
<p>  考虑到大多数服务多需要校验，可以直接添加在common服务里。这里的版本最好和srping-boot版本一致。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Bean 校验注解 ，高版本要用starter的依赖--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-简单校验参数">2. 简单校验参数</h3>
<p>  如果要对controller的入参进行校验，则需要使用注解显示的开启校验。使用@Validated，由spring提供，(另有@Valid由javax提供)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 保存</span></span><br><span class="line"><span class="comment">    * Validated(AddGroup.class) 注解，标识为只校验添加组的规则</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Validated</span> 注解表明要进行校验；后面的(AddGroup.class) 表示要进行第3步的分组校验，这里是更新标记类， </span></span><br><span class="line"><span class="comment">    *            注意，这个类是我们自己创建的一个空类，仅用来标记，我们业务上约定，有这个类的属于更新。</span></span><br><span class="line"><span class="comment">    * AddGroup.class 可以不写，则为不开启分组校验，则实体类上也不要写groups=?。则为校验所有类型，不分组</span></span><br><span class="line"><span class="comment">    * BindingResult result 是在没有开启统一异常前，所有校验异常都会在这里，用于获取异常，统一异常处理后不再需要</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@Validated(AddGroup.class)</span> <span class="meta">@RequestBody</span> BrandEntity brand  <span class="comment">/*, BindingResult result*/</span> )</span> &#123;</span><br><span class="line">       brandService.save(brand);</span><br><span class="line">       <span class="keyword">return</span> R.ok();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-分组异常校验">3.分组异常校验</h3>
<p>  有时候，某个字段，例如Id，再新增的时候必须为null，在更新的时候必须是不为null，实体类上的校验注解无法直接区分，这时候就需要进行分组校验了。分组校验就是在实体类上的校验注解加上<code>groups</code>数组的属性，数组中的类是空标记类，用来标记分组。同时controller方法上指明是哪一个标记。表示这个方法只校验所属groups的注解。<br>
  message是出现异常的时候返回的异常信息，groups表示这个实体类被标记为哪些操作下需要校验。例如<code>brandId</code>字段我们同时指定Null与NotNull，在更新时必须不能为空，新增时必须为空。<br>
  业务上我们规定：AddGroup类为新增标记类，UpdateGroup为更新标记类。</p>
<p>  注意：一旦接口开启了分组校验，则实体类所有字段必须指明分组，否则不再生效，要么不指明分组（即不分组），要么全部指明。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;pms_brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BrandEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 品牌id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;修改必须指定品牌id&quot;, groups = &#123;UpdateGroup.class&#125;)</span></span><br><span class="line">    <span class="meta">@Null(message = &quot;新增不能指定id&quot;, groups = &#123;AddGroup.class&#125;)</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long brandId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 品牌名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;品牌名不能为空&quot;, groups = &#123;AddGroup.class, UpdateGroup.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 品牌logo地址, 可以有多个注解, 如果不指定组，则不会生效，所以即使所有都用，也必须指定组。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;logo不能为空&quot;, groups = &#123;AddGroup.class&#125;)</span></span><br><span class="line">    <span class="meta">@URL(message = &quot;logo必须是一个合法的url地址&quot;, groups = &#123;AddGroup.class, UpdateGroup.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String logo;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 介绍</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String descript;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示状态[0-不显示；1-显示]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;AddGroup.class, UpdateStatusGroup.class&#125;)</span></span><br><span class="line">    <span class="meta">@ListValue(vals = &#123;0, 1&#125;, groups = &#123;AddGroup.class, UpdateStatusGroup.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer showStatus;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检索首字母， A-Z,a-z，使用正则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotEmpty(message = &quot;检索首字母不能为空&quot;, groups = &#123;AddGroup.class&#125;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^[a-zA-Z]$&quot;, message = &quot;检索首字母必须是一个字母&quot;, groups = &#123;AddGroup.class, UpdateGroup.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String firstLetter;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序, 最小为0, Integer不能使用empty约束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;排序不能为空&quot;, groups = &#123;AddGroup.class&#125;)</span></span><br><span class="line">    <span class="meta">@Min(value = 0, message = &quot;排序必须大于等于0&quot;, groups = &#123;AddGroup.class, UpdateGroup.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-自定义校验注解">4. 自定义校验注解</h3>
<ol>
<li>正则表达式：可以使用正则表达式来实现自定义的目的。@Pattern</li>
<li>编写一个自定义的校验注解：@ListValue(value=(0,1))。该自定义注解规定只能使用values值0和1</li>
<li>编写时可以参考已经存在的官方注解，例如<code>@NotNull</code>等。该注解有三个属性<code>message</code>、<code>groups</code>、<code>payload</code>
<ol>
<li>message：在使用者不指定<code>message</code>的情况下，默认返回的报错信息。</li>
<li>groups：支持分组校验，默认不分组</li>
<li>payload：使用者可以通过此属性来给约束条件指定严重级别. 这个属性并不被API自身所使用。</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span> <span class="comment">// 注解可以标注的位置</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 校验注解的时机：运行时</span></span><br><span class="line"><span class="meta">@Repeatable(NotNull.List.class)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;&#125;)</span> <span class="comment">// 指明使用哪个校验器(类) 去校验使用了此标注的元素。不指定则必须在初始化的时候指定，可以指定多个校验器注解，使用时自动适配</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotNull &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&#123;javax.validation.constraints.NotNull.message&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> List &#123;</span><br><span class="line">        NotNull[] value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>自定校验注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;ListValueConstraintValidator.class&#125;)</span> <span class="comment">// 指定校验器为ListValueConstraintValidator类，第6点</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ListValue &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&#123;com.example.common.valid.ListValue.message&#125;&quot;</span>; <span class="comment">// 在resources下的配置文件ValidationMessages.properties中取出该值。第5点</span></span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义的属性</span></span><br><span class="line"><span class="comment">     * vals默认为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span>[] vals() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>resources下创建配置文件<code>ValidationMessages.properties</code></li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">com.example.common.valid.ListValue.message</span>=<span class="string">必须提交指定的值</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>编写自定义校验器类
<ol>
<li>要实现ConstraintValidator类，两个范形，第一个是ListValue，表示要校验的注解。第二个是Integer，是该注解只能作用于Integer字段。然后重写两个方法</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListValueConstraintValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;ListValue, Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法，可以用来获取所有校验规则传入的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/7/10</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> constraintAnnotation:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ListValue constraintAnnotation)</span> &#123;</span><br><span class="line">        <span class="comment">// 给的的值必须是vals, 注解上的val。（获取注解上的vals自定义的属性的值）</span></span><br><span class="line">        <span class="type">int</span>[] vals = constraintAnnotation.vals();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> val : vals) &#123;</span><br><span class="line">            set.add(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上一个方法获取所有的值后，可以用来判断是否校验成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/7/10</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value: 前端提交过来的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> constraintValidatorContext: 校验的上下文环境信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(Integer value, ConstraintValidatorContext constraintValidatorContext)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> set.contains(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>使用自定义注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示状态[0-不显示；1-显示]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NotNull(groups = &#123;AddGroup.class, UpdateStatusGroup.class&#125;)</span></span><br><span class="line"><span class="meta">@ListValue(vals = &#123;0, 1&#125;, groups = &#123;AddGroup.class, UpdateStatusGroup.class&#125;)</span></span><br><span class="line"><span class="keyword">private</span> Integer showStatus;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>经典算法</title>
    <url>/2022/09/05/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>一些最经典（基础）的算法</p>
<span id="more"></span>
<h2 id="1-排序">1. 排序</h2>
<h3 id="1-快速排序">1.快速排序</h3>
<p>只掌握快速排序的递归写法即可</p>
<p>普通快速排序，在数组<font color="red">逆序且有序</font>的情况，会达到最坏的情况，从而被用例卡掉。</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>普通快速排序</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    quickSort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> right;</span><br><span class="line">    <span class="type">int</span> <span class="variable">base</span> <span class="operator">=</span> nums[left];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[j] &gt;= base) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[i] &lt;= base) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            nums[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nums[left] = nums[i];</span><br><span class="line">    nums[i] = base;</span><br><span class="line"></span><br><span class="line">    quickSort(nums, left, i - <span class="number">1</span>);</span><br><span class="line">    quickSort(nums, i + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<p>三数取中快速排序：将arr[left]、arr[mid]、arr[right]排序，取arr[eft]、arr[mid]、arr[right]的中位数，用中位数作为基准，这样就能避免最坏的情况。</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>三数取中快速排序</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序 三数取中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">midValueQuickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 三数取中</span></span><br><span class="line">    dealPivot(arr, left, right);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> right;</span><br><span class="line">    <span class="type">int</span> <span class="variable">base</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= base) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= base) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            swap(arr, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换基准，arr[left + 1] = base</span></span><br><span class="line">    swap(arr, i, left + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    midValueQuickSort(arr, left, i -<span class="number">1</span>);</span><br><span class="line">    midValueQuickSort(arr, i + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 只需要保证中间的数是三个数的中值，这样简单一点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dealPivot</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] &gt; nums[mid]) &#123;</span><br><span class="line">            swap(nums, left, mid);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; nums[right]) &#123;</span><br><span class="line">            swap(nums, mid, right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        swap(nums, left, mid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> mid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[left];</span><br><span class="line">    arr[left] = arr[mid];</span><br><span class="line">    arr[mid] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="2-归并排序">2.归并排序</h3>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>归并排序</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] tempArr = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    merge(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, tempArr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span>[] tempArr)</span> &#123;</span><br><span class="line">    <span class="comment">// 递归出口</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 归并</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    merge(nums, left, mid, tempArr);</span><br><span class="line">    merge(nums, mid + <span class="number">1</span>, right, tempArr);</span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    sort(nums, left, mid, right, tempArr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right, <span class="type">int</span>[] tempArr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lPos</span> <span class="operator">=</span> left;</span><br><span class="line">    <span class="type">int</span> <span class="variable">rPos</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在归并之后，每一个子数组都是有序的，</span></span><br><span class="line">    <span class="comment">// 原因：归并的出口时，每个子数组只有一个元素，一个就是有序，后面的多个，都是由此最基础的排序而来</span></span><br><span class="line">    <span class="comment">// 因此可以认为，左半子数组，右半子数组一定有序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里是将，两个有序子数组中最小的依次放入tempArr中</span></span><br><span class="line">    <span class="keyword">while</span> (lPos &lt;= mid &amp;&amp; rPos &lt;= right) &#123;</span><br><span class="line">        <span class="comment">// 这里使用小于等于，在左半区等于右半区的时候，能保证左半区的在前面，</span></span><br><span class="line">        <span class="comment">// 从而保证该排序的稳定性，规定排序是稳定排序</span></span><br><span class="line">        <span class="keyword">if</span> (nums[lPos] &lt;= nums[rPos]) &#123;</span><br><span class="line">            tempArr[pos] = nums[lPos];</span><br><span class="line">            <span class="comment">// lPos+1 更容易懂得写法，后面全部采用简化的写法</span></span><br><span class="line">            lPos++;</span><br><span class="line">            pos++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tempArr[pos++] = nums[rPos++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果左子数组还有</span></span><br><span class="line">    <span class="keyword">while</span> (lPos &lt;= mid) &#123;</span><br><span class="line">        tempArr[pos++] = nums[lPos++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果右子数组还有</span></span><br><span class="line">    <span class="keyword">while</span> (rPos &lt;= right) &#123;</span><br><span class="line">        tempArr[pos++] = nums[rPos++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将tempArr拷贝到nums数组中</span></span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        nums[left++] = tempArr[pos++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="3-堆排序">3.堆排序</h3>
<ol>
<li>递归版本</li>
</ol>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>堆排序</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">// 注意，这里的n是数组的长度，代表有n个节点</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="comment">// 下标为i的节点 父节点：（i-1）/2 【整除法】 核心点</span></span><br><span class="line">    <span class="comment">// 下标为i的节点 左子节点：i * 2 + 1</span></span><br><span class="line">    <span class="comment">// 下标为i的节点 右子节点：i * 2 + 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里从 i = n / 2 - 1 开始的原因：</span></span><br><span class="line">    <span class="comment">// 对于第i个节点，其下标是 i - 1，所以节点i的父节点是 (（i - 1）- 1) / 2 = i / 2 - 1</span></span><br><span class="line">    <span class="comment">// 如果n表示的是下标，这里就不减去1</span></span><br><span class="line">    <span class="comment">// 所以i = n / 2 - 1 表示距离根节点最远的父节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">        buildMaxHeap(nums, n, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建好大顶堆后，根节点，即下标为0处是最大值，</span></span><br><span class="line">    <span class="comment">// 将最大值与数组当前可选部分的最后的下标交换位置，从而将大值放入最后</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 交换</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        nums[<span class="number">0</span>] = nums[i];</span><br><span class="line">        nums[i] = temp;</span><br><span class="line">        <span class="comment">// 交换后维护大顶堆，维护大顶堆</span></span><br><span class="line">        <span class="comment">// i : 需要维护的元素有i个，维护的元素是根元素</span></span><br><span class="line">        buildMaxHeap(nums, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 键堆与维护堆</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 堆数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 堆数组维护的元素个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idx 要维护元素的下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">buildMaxHeap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> n, <span class="type">int</span> idx)</span> &#123;</span><br><span class="line">    <span class="comment">// 假定最大的元素的下标是idx</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">largest</span> <span class="operator">=</span> idx;</span><br><span class="line">    <span class="comment">// 左子节点</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lson</span> <span class="operator">=</span> idx * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 右子节点</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">rson</span> <span class="operator">=</span> idx * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前节点与其左右子节点中的最大节点，并将坐标赋值</span></span><br><span class="line">    <span class="keyword">if</span> (lson &lt; n &amp;&amp; nums[largest] &lt; nums[lson]) &#123;</span><br><span class="line">        largest = lson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rson &lt; n &amp;&amp; nums[largest] &lt; nums[rson]) &#123;</span><br><span class="line">        largest = rson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果，当前节点idx不是最大节点，则需要交换两个节点的元素，并继续递归的维护大顶堆</span></span><br><span class="line">    <span class="comment">// 如果是，则说明大顶堆已构建完成，不需要再继续维护</span></span><br><span class="line">    <span class="keyword">if</span> (largest != idx) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[idx];</span><br><span class="line">        nums[idx] = nums[largest];</span><br><span class="line">        nums[largest] = temp;</span><br><span class="line">        <span class="comment">// 继续维护堆</span></span><br><span class="line">        buildMaxHeap(nums, n, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h2 id="2-二叉树">2.二叉树</h2>
<h3 id="0-二叉树简易定义">0.二叉树简易定义</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树简易定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> TreeNode left;</span><br><span class="line">    <span class="keyword">public</span> TreeNode right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> val, TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-dfs">1.DFS</h3>
<ol>
<li>DFS的递归实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;TreeNode&gt; nodeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        nodeList.add(node); <span class="comment">// 前序</span></span><br><span class="line">        preOrder(node.left);</span><br><span class="line">        preOrder(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inOrder</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        inOrder(node.left);</span><br><span class="line">        nodeList.add(node); <span class="comment">// 中序</span></span><br><span class="line">        inOrder(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        postOrder(node.left);</span><br><span class="line">        nodeList.add(node); <span class="comment">// 后序</span></span><br><span class="line">        postOrder(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>DFS的迭代实现</li>
</ol>
<p>迭代使用栈保存节点实现</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>DFS迭代</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; nodeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历</span></span><br><span class="line"><span class="comment">// 遇到直接打印，先存储右节点，再存储左节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    stack.addFirst(node.val);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 根节点</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode</span> <span class="operator">=</span> stack.pollFirst();</span><br><span class="line">        nodeList.add(treeNode);</span><br><span class="line">        <span class="comment">// 前序是根左右，先压入右节点，再压入左节点，保证每一次先弹出左节点</span></span><br><span class="line">        <span class="comment">// 且每次只弹出一个节点，保证一开始只弹出左节点</span></span><br><span class="line">        <span class="keyword">if</span> (treeNode.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.addFirst(treeNode.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (treeNode.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.addFirst(treeNode.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="comment">// 遇到先一直寻找左子节点，然后弹栈，打印。在将root置为右子节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 中序是左根右，需要一直一直遍历左子节点，直到无左子节点，压入栈中</span></span><br><span class="line">        <span class="keyword">while</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.addFirst(root);</span><br><span class="line">            root = root.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// while循环的终止条件是栈为空</span></span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 弹出栈顶的元素，（要打印的根元素）</span></span><br><span class="line">        root = stack.pollFirst();</span><br><span class="line">        nodeList.add(root.val);</span><br><span class="line">        <span class="comment">// 遍历root的右元素</span></span><br><span class="line">        root = root.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root; <span class="comment">// 当前访问的节点</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 上一个访问的节点</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 中序是左右根，需要一直一直遍历左子节点，直到无左子节点，压入栈中</span></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.addFirst(cur);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取栈顶的元素，这个元素即将被访问</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">top</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">        <span class="comment">// 如果右元素为空，或者右元素是上一个被访问的元素，则这个根元素需要被打印，</span></span><br><span class="line">        <span class="comment">// 同时这个根元素，成为上一个访问的元素</span></span><br><span class="line">        <span class="keyword">if</span> (top.right == <span class="literal">null</span> || top.right == pre) &#123;</span><br><span class="line">            stack.pollFirst();</span><br><span class="line">            pre = top; <span class="comment">// top成为上一个访问的元素</span></span><br><span class="line">            nodeList.add(top.val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不为空，也没有访问过，那么该节点的右节点成为cur节点</span></span><br><span class="line">            cur = top.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="2-bfs">2. BFS</h3>
<ol>
<li>BFS的迭代实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; nodeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;TreeNode&gt; nodeQueue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    nodeQueue.addLast(root);</span><br><span class="line">    <span class="keyword">while</span> (!nodeQueue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> nodeQueue.pollFirst();</span><br><span class="line">        nodeList.add(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            nodeQueue.addLast(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            nodeQueue.addLast(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>BFS的递归实现（了解）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-单调队列">3.单调队列</h2>
<p>单调队列，注意与单调栈做出区分。单调队列用于<strong>得到当前的某个范围内的最小值或最大值</strong><br>
单调栈：没有长度，当不单调时，只能从栈首弹出。都是在尾部添加。<br>
<a href="https://leetcode.cn/problems/remove-nodes-from-linked-list/">6247. 从链表中移除节点 - 力扣（LeetCode）</a>：单调栈参考题目<br>
单调队列：一般有长度，除了从尾部弹出，当长度超过限制后，会从首部移除元素。都是在尾部添加。<br>
<a href="https://leetcode.cn/problems/sliding-window-maximum/">239. 滑动窗口最大值 - 力扣（LeetCode）</a>：单调队列模板题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    Deque&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 单调队列维护的是将来可能成为最大值的数，队列首部为当前的最大值</span></span><br><span class="line">    <span class="comment">// 对于 1,3,-1,-3,5,3,6,7 数组，1 先进入，当3进入时，3比1大，且3比1年轻，则1无论如何都不可能成为最大值，所以1移除。</span></span><br><span class="line">    <span class="comment">// -1进入时候，-1比3小，所以3不移除，同时-1更年轻（-1可能是后面k的最大值），所以-1入队</span></span><br><span class="line">    <span class="comment">// 此处先处理长为k的，故没有我们手动移除的元素，都是被最大可能性移除的。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="comment">// 此if可以精简，因为无论如何都要queue.add(nums[i]);</span></span><br><span class="line">        <span class="keyword">if</span> (queue.isEmpty()) &#123;</span><br><span class="line">            queue.addLast(nums[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果队列尾部的元素，不可能成为最大值，则将其移除</span></span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty() &amp;&amp; queue.peekLast() &lt; nums[i]) &#123;</span><br><span class="line">                queue.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            queue.addLast(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] ansArr = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length - k + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    ansArr[idx] = queue.peekFirst();</span><br><span class="line">    idx++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 第 i - k个元素要移除，保持滑动窗口长度为k，如果nums[i-k]等于队列首部的值，则说明队列首部是要移除的</span></span><br><span class="line">        <span class="keyword">if</span> (nums[i- k] == queue.peekFirst()) &#123;</span><br><span class="line">            queue.pollFirst();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果队列尾部的元素，不可能成为最大值，则将其移除</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty() &amp;&amp; queue.peekLast() &lt; nums[i]) &#123;</span><br><span class="line">            queue.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// nums[i] 更年轻（后面有可能成为长度k的最大值），所以nums[i]是一定要入队的</span></span><br><span class="line">        queue.addLast(nums[i]);</span><br><span class="line">        ansArr[idx] = queue.peekFirst();</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ansArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-并查集">4.并查集</h2>
<p>并查集分为<strong>并</strong>与<strong>查两部分</strong>，主要用于查找一个对象是否属于一个集合，有两点优化：<br>
路径压缩（找到节点i的祖先节点后，将i直接指向祖先节点，一般必须）。<br>
按秩合并（节rank低的合并到rank高的上去，就是节树高度小的合并到高度大的上去，从而不增加树的高度。有点问题，暂未实现）。<br>
模板题：<a href="https://leetcode.cn/problems/bLyHh0/">剑指 Offer II 116. 省份数量 - 力扣（LeetCode）</a></p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>并查集</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findCircleNum</span><span class="params">(<span class="type">int</span>[][] isConnected)</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化并查集</span></span><br><span class="line">    <span class="type">int</span>[] parentArr = init(isConnected.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并的部分，将每一个点并起来</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; isConnected.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; isConnected[i].length; j++) &#123;</span><br><span class="line">            <span class="comment">// 第i个省份与j数组中的相连，并起来</span></span><br><span class="line">            <span class="keyword">if</span> (isConnected[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                merge(i, j, parentArr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="type">Set</span> <span class="variable">ansSaveSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; isConnected.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 查的部分</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">parent</span> <span class="operator">=</span> findParent(i, parentArr);</span><br><span class="line">        <span class="keyword">if</span> (!ansSaveSet.contains(parent)) &#123;</span><br><span class="line">            ansSaveSet.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ansSaveSet.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化并查集</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] init(<span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="comment">// 创建祖先数组，如果两个对象的祖先数组的值相同，则他们属于同一个集合</span></span><br><span class="line">    <span class="type">int</span>[] parentArr = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="comment">// 初始化的祖先数组都指向自己</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        parentArr[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parentArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找一个省份的祖先</span></span><br><span class="line"><span class="comment">// 查的部分：city: 省份, parentArr: 祖先数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findParent</span><span class="params">(<span class="type">int</span> city, <span class="type">int</span>[] parentArr)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果时祖先节点，则一定自己时自己的祖先节点，即：parentArr[city] == city</span></span><br><span class="line">    <span class="keyword">if</span> (parentArr[city] == city) &#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归查找祖先节点</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">rootCity</span> <span class="operator">=</span> findParent(parentArr[city], parentArr);</span><br><span class="line">    <span class="comment">// 优化点1：路径合并</span></span><br><span class="line">    <span class="comment">// 找到后，将city的祖先节点设置为rootCity，能够减少节点退化为链表的可能性</span></span><br><span class="line">    parentArr[city] = rootCity;</span><br><span class="line">    <span class="keyword">return</span> rootCity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并两个省份到一个集合</span></span><br><span class="line"><span class="comment">// 并的部分，a: 省份，b: 省份，parentArr: 祖先数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span>[] parentArr)</span> &#123;</span><br><span class="line">    <span class="comment">// 找到a的祖先</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">parentA</span> <span class="operator">=</span> findParent(a, parentArr);</span><br><span class="line">    <span class="comment">// 找到b的祖先</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">parentB</span> <span class="operator">=</span> findParent(b, parentArr);</span><br><span class="line">    <span class="comment">// b成为a的祖先（合并两个祖先）</span></span><br><span class="line">    parentArr[parentA] = parentB;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<p>另外，并查集可以实现判断n个点是否有(无向)环，有向环可以用快慢指针，若需要判断是否有负环，则可以使用最短路的bell-ford算法。</p>
<p>并查集判断是否有无向环，靠的是统计联通分量setCount，初始化为点个数n，若题目给出的两个直接相连的节点，他们的父节点是一不样的，则说明他们不成环，联通分量减去1，最终有setCount-1个环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    <span class="comment">// 联通分量,用来判断环的数量，有setCount个环</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> setCount;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] fa;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DSU</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fa = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="built_in">this</span>.setCount = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fa.length; i++) &#123;</span><br><span class="line">            fa[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUnion</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findFa(x) == findFa(y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findFa</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fa[x] == x) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootFa</span> <span class="operator">=</span> findFa(<span class="built_in">this</span>.fa[x]);</span><br><span class="line">        fa[x] = rootFa;</span><br><span class="line">        <span class="keyword">return</span> rootFa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">xFa</span> <span class="operator">=</span> findFa(x);</span><br><span class="line">        <span class="type">int</span> <span class="variable">yFa</span> <span class="operator">=</span> findFa(y);</span><br><span class="line">        <span class="comment">// 连接两个不相连的点，联通分量减1</span></span><br><span class="line">        <span class="keyword">if</span> (xFa != yFa) &#123;</span><br><span class="line">            setCount--;</span><br><span class="line">        &#125;</span><br><span class="line">        fa[xFa] = yFa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-拓扑排序">5.拓扑排序</h2>
<p><a href="https://leetcode.cn/problems/course-schedule/">207. 课程表 - 力扣（LeetCode）</a>：拓扑排序模板题目</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canFinish</span><span class="params">(<span class="type">int</span> numCourses, <span class="type">int</span>[][] prerequisites)</span> &#123;</span><br><span class="line">    <span class="comment">// 用来统计入度，入度为0的点则是排在前面的点（可以被选择的点）</span></span><br><span class="line">    <span class="type">int</span>[] indegressArr = <span class="keyword">new</span> <span class="title class_">int</span>[numCourses];</span><br><span class="line">    <span class="comment">// 下标i表示第i门课程，courseList[i]表示第i门颗是该集合的先修课，这里可以用集合，是因为都是连着的，也可以用map&lt;List&gt;</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; courseList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为下标i表示第i门课，所以有几门课就先创建几个list（如果用邻接表数组或者map就不需要）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">        courseList.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prerequisites.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 第prerequisites[i][0] 门课的入度+1</span></span><br><span class="line">        indegressArr[prerequisites[i][<span class="number">0</span>]]++;</span><br><span class="line">        <span class="comment">// 第prerequisites[i][1] 门课是prerequisites[i][0]门课的先修课</span></span><br><span class="line">        courseList.get(prerequisites[i][<span class="number">1</span>]).add(prerequisites[i][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Deque&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 添加入读为0的课到队列，进行选择</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; indegressArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (indegressArr[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            queue.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 先修课</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">preCourse</span> <span class="operator">=</span> queue.pollFirst();</span><br><span class="line">        <span class="comment">// 先修课的后面的课</span></span><br><span class="line">        List&lt;Integer&gt; nextCourseList = courseList.get(preCourse);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nextCourseList.size(); i++) &#123;</span><br><span class="line">            <span class="comment">// 这些后修课程，入度-1</span></span><br><span class="line">            indegressArr[nextCourseList.get(i)]--;</span><br><span class="line">            <span class="comment">// 为0的课程加入队列，参加后续删除</span></span><br><span class="line">            <span class="keyword">if</span> (indegressArr[nextCourseList.get(i)] == <span class="number">0</span>) &#123;</span><br><span class="line">                queue.addLast(nextCourseList.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; indegressArr.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 如果有入度不为0的课，那么则不能修完所有课程</span></span><br><span class="line">        <span class="keyword">if</span> (indegressArr[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-线段树">6.线段树</h2>
<p>单点修改线段树模板：暂记，需要整理</p>
<p>模板题：<a href="https://leetcode.cn/problems/range-sum-query-mutable/">307. 区域和检索 - 数组可修改</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node[] tree;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] nums;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nums = nums;</span><br><span class="line">        <span class="built_in">this</span>.tree = <span class="keyword">new</span> <span class="title class_">Node</span>[nums.length  * <span class="number">4</span>];</span><br><span class="line">        <span class="comment">// 建树</span></span><br><span class="line">        buildTree(<span class="number">0</span>, nums.length - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        change(index, val, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> query(left, right, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> p)</span> &#123;</span><br><span class="line">        tree[p] = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        tree[p].left = left;</span><br><span class="line">        tree[p].right = right;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            tree[p].sum = nums[left];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        buildTree(left, mid, p * <span class="number">2</span>);</span><br><span class="line">        buildTree(mid + <span class="number">1</span>, right, p * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        tree[p].sum = tree[p * <span class="number">2</span>].sum + tree[p * <span class="number">2</span> + <span class="number">1</span>].sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val, <span class="type">int</span> p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[p].left == tree[p].right) &#123;</span><br><span class="line">            tree[p].sum = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (tree[p].left + tree[p].right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= mid) &#123;</span><br><span class="line">            change(index, val, p * <span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            change(index, val, p * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        tree[p].sum = tree[p * <span class="number">2</span>].sum + tree[p * <span class="number">2</span> + <span class="number">1</span>].sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[p].left &gt;= left &amp;&amp; tree[p].right &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span> tree[p].sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (tree[p].left + tree[p].right) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= mid) &#123;</span><br><span class="line">            sum += query(left, right, p * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &gt; mid) &#123;</span><br><span class="line">            sum += query(left, right, p * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> left;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> right;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> sum;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>质数</title>
    <url>/2023/01/02/%E8%B4%A8%E6%95%B0/</url>
    <content><![CDATA[<p>质数相关</p>
<span id="more"></span>
<p>写这个的原因，主要是<a href="https://leetcode.cn/contest/weekly-contest-326/">第 326 场周赛 - 力扣（LeetCode）</a>，多道题目考到了质数，也是本人第一场AK的周赛。LC给大家2023年的第一场福利周赛。</p>
<h2 id="1-gcd-最大公因数">1. gcd（最大公因数）</h2>
<p>求解两个数的最大公因数，例如24、30的最大公因数是6.</p>
<h3 id="1-辗转相除法">1 辗转相除法</h3>
<p>辗转相除法的公式为：gcd(a,b) = gcd(b, a mod b)。具体示例如下：假如需要求 1997 和 615 两个正整数的最大公约数,用欧几里得算法，是这样进行的：</p>
<div class="panel panel-info">
    <div class="panel-title">辗转相除法步骤</div>
    <div class="panel-body">
        <ul>
<li>1997 ÷ 615 = 3 (余 152)</li>
<li>615 ÷ 152 = 4(余7)</li>
<li>152 ÷ 7 = 21(余5)</li>
<li>7 ÷ 5 = 1 (余2)</li>
<li>5 ÷ 2 = 2 (余1)</li>
<li>2 ÷ 1 = 2 (余0)</li>
<li>1 ÷ 0 = ？</li>
<li>直到b = 0，至此，最大公约数为a = 1</li>
</ul>

    </div>
    </div>
<p><strong>时间复杂度</strong>：对于gcd(a, b)，假设b &lt;= a，则gcd的时间复杂度为O(logb)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 循环版</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getGcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="comment">// 当b不等于0，即余数不等于0</span></span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 获得余数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rem</span> <span class="operator">=</span> a % b;</span><br><span class="line">        <span class="comment">// 接下来计算gcd(b, a mod b)</span></span><br><span class="line">        a = b;</span><br><span class="line">        b = rem;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// b等于0了，</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归版</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getGcd2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getGcd2(b, a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-使用java的api">2 使用java的API</h3>
<p>java的bigInteger有求解gcd的的API，但是必须把数字转为bigInteger。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getGcd3</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">BigInteger</span> <span class="variable">bigA</span> <span class="operator">=</span> BigInteger.valueOf(a);</span><br><span class="line">    <span class="type">BigInteger</span> <span class="variable">bigB</span> <span class="operator">=</span> BigInteger.valueOf(b);</span><br><span class="line">    <span class="type">BigInteger</span> <span class="variable">ans</span> <span class="operator">=</span> bigA.gcd(bigB);</span><br><span class="line">    <span class="keyword">return</span> ans.intValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-判断一个数质数">2. 判断一个数质数</h2>
<p>使用试除法，如果能够整除以一个数，则说明不是质数。优化点，是我们只用试除到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.11333499999999996em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span></span>即可，因为如果是合数（非质数），则N = a * b，（假设b &lt;= a），则有b &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.11333499999999996em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span></span>成立。说明我们试除到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.11333499999999996em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span></span>，就相当于尝试了所有可能的可以整除的数。</p>
<p><strong>时间复杂度</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msqrt><mi>N</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\sqrt{N})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.176665em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i * i &lt;= a; i++) &#123;</span><br><span class="line">        <span class="comment">// 能够整除i，说明是合数，不是质数</span></span><br><span class="line">        <span class="keyword">if</span> (a % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-分解质因数">3.分解质因数</h2>
<p>分解一个数的所有质因数。采用试除法，从最小的2开始。获取所有最小能够整除以的数。然后一直除下去。</p>
<p><strong>时间复杂度</strong>：<s>O(N)，在N是质数的情况下，达到最坏的情况。</s></p>
<p>更新：O(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.11333499999999996em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span></span>)，同判断一个质数，即使在最坏的情况下，我们也只需要试分解到O(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.11333499999999996em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span></span>)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">getAllPrime</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; ansList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (b * b &lt;= a) &#123;</span><br><span class="line">        <span class="comment">// a能够整除以b</span></span><br><span class="line">        <span class="keyword">if</span> (a % b == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 则分解a</span></span><br><span class="line">            ansList.add(b);</span><br><span class="line">            <span class="comment">// 分解后，a = a / b;</span></span><br><span class="line">            a = a / b;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不能够整除以，则b+1</span></span><br><span class="line">            b++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 说明再经过操作之后 a 留下了一个素数</span></span><br><span class="line">    <span class="keyword">if</span> (a != <span class="number">1</span>) &#123;</span><br><span class="line">        ansList.add(a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ansList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-获取1到n的所有质数">4.获取1到n的所有质数</h2>
<h3 id="4-1-暴力">4.1 暴力</h3>
<p>采用判断一个数是否是质数的方法，从2判断到n，暴力的筛选出所有质数。<br>
<strong>时间复杂读</strong>：不清楚^_^，大概范围是O(N) &lt; t &lt; O(N^2)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getPrimes1</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; ansList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 使用判断是否是质数的方法</span></span><br><span class="line">        <span class="keyword">if</span> (isPrime(i)) &#123;</span><br><span class="line">            ansList.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ansList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-埃式筛">4.2 埃式筛</h3>
<p>埃式筛的代码比较简单，且复杂度也只多了loglogN，在不特别严苛的情况下使用埃式筛即可。</p>
<p>埃拉托斯特尼筛法，简称<a href="https://baike.baidu.com/item/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95">埃拉托斯特尼筛法_百度百科</a>，要得到自然数n以内的全部素数，必须把不大于根号n的所有素数的倍数剔除，剩下的就是素数。</p>
<p>给出要筛数值的范围n，找出以内的素数。先用2去筛，即把2留下，把2的倍数剔除掉；再用下一个质数，也就是3筛，把3留下，把3的倍数剔除掉；接下去用下一个质数5筛，把5留下，把5的倍数剔除掉；不断重复下去…。</p>
<p><strong>时间复杂度</strong>：O(nloglogN)</p>
<div class="panel panel-info">
    <div class="panel-title">埃式筛步骤</div>
    <div class="panel-body">
        <ul>
<li>列出2以后的所有序列：<br>
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</li>
<li>标出序列中的第一个素数，也就是2，序列变成：<br>
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</li>
<li>将剩下序列中，划掉2的倍数，序列变成：<br>
2 3 5 7 9 11 13 15 17 19 21 23 25</li>
<li>剩下的序列中第一个素数是3，将主序列中3的倍数划掉，主序列变成：<br>
2 3 5 7 11 13 17 19 23 25</li>
<li>我们得到的素数有：2，3</li>
<li>直到标出所有素数<br>
2 3 5 7 11 13 17 19 23</li>
</ul>
<p><strong>特别注意：筛法的方法建议写成静态的，然后静态调用。否则多次初始化会被LC卡掉。<br>
另外大多数时候我们需要的最终结果集是一个SET。此筛法的ansList，不参与取值过程，可以直接改成set。</strong></p>

    </div>
    </div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置成静态，避免多次调用TLE</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;Integer&gt; primeSet = eulerFlagPrime((<span class="type">int</span>) <span class="number">4e6</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">eratosFlagPrime</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; ansList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 筛选2到100的所有质数</span></span><br><span class="line">    <span class="comment">// 标记是否式质数，下标i代表数i，最大下标为100</span></span><br><span class="line">    Boolean[] primeArr = <span class="keyword">new</span> <span class="title class_">Boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 如果为null则代表为质数，省去遍历一遍改为true的时间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 如果为null则为素数</span></span><br><span class="line">        <span class="keyword">if</span> (primeArr[i] == <span class="literal">null</span>) &#123;</span><br><span class="line">            ansList.add(i);</span><br><span class="line">            <span class="comment">// j 初始化为 2*i,每次遍历加一个i，相当于从2*i 到 k*i，从而划掉所有i的倍数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span> * i; j &lt;= n; j += i) &#123;</span><br><span class="line">                primeArr[j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ansList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-欧拉筛-线性筛">4.3 欧拉筛（线性筛）</h3>
<p>欧拉筛是对埃氏筛的改进，避免重筛，提高效率。但代码会更加复杂，只做介绍。</p>
<p>欧拉筛的核心思想就是确保每个合数只被最小质因数筛掉。或者说是被合数的最大因子筛掉。</p>
<div class="panel panel-info">
    <div class="panel-title">欧拉筛步骤</div>
    <div class="panel-body">
        <p>比如说 1 ，2，3，4，5，6，7，8，9，10，11， 12<br>
当 i=4时： primes = {2, 3}<br>
此时i%2=0, 如果不结束内层循环的话,12会被3∗4筛掉， 当i=6时，12又会被2∗6筛掉。</p>
<p><strong>特别注意：建议静态。同时ansList不能改成SET，在遍历ansList需要其有序，set会破坏这个有序。最后new HashSet&lt;&gt;(ansList)即可。</strong></p>

    </div>
    </div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">eulerFlagPrime</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; ansList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Boolean[] primeArr = <span class="keyword">new</span> <span class="title class_">Boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 当前数式素数</span></span><br><span class="line">        <span class="keyword">if</span> (primeArr[i] == <span class="literal">null</span>) &#123;</span><br><span class="line">            ansList.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer prime : ansList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * prime &gt; n) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 标记不为质数</span></span><br><span class="line">            primeArr[i * prime] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//避免重筛,使得程序更有效率</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ansList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-lcm-最小公倍数">5.LCM（最小公倍数）</h2>
<h3 id="公式：最小公倍数-a-b-gcd-a-b">公式：最小公倍数= (a * b) / gcd(a, b )</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lcm</span><span class="params">(a, b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a * b) / getGcd(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>表与java中表的实现</title>
    <url>/2021/07/11/%E8%A1%A8%E4%B8%8Ejava%E4%B8%AD%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>《数据结构与算法分析Java语言描述》第二章3.1到3.5节<strong>读书笔记</strong></p>
<span id="more"></span>
<h2 id="3-1-抽象数据类型">3.1 抽象数据类型</h2>
<blockquote>
<p>抽象数据类型(ADT)：是带有一组操作的一些对象的集合</p>
</blockquote>
<p>  对于集合ADT，可以有像添加(add)、删除(remove)、与包含(contain)这样的一些操作。也可以只要两种操作，并(union)和查找(find)。<br>
ADT的实现一般取决与程序设计者，当ADT被程序设计者正确的实现后，使用该语言可以不必要知道他们如何实现。</p>
<table><br></table>
<h2 id="3-2表adt">3.2表ADT</h2>
<blockquote>
<p>形如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>A</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>A</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>A</mi><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">A_0,A_1,A_2,\ldots, A_{N-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>，这个表的大小为N，如果该表的大小为0，则该表称为<strong>空表</strong>，除空表外的任何表，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>后继<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">A_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>(或继<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">A_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>之后，i&lt;N)，并称<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">A_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>前驱<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A_i(i&gt;0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>。</p>
</blockquote>
<p>  常用操作(不同的语言有不同的实现)：</p>
<ol>
<li><strong>printList</strong>：java没有直接实现，如果是List，可以直接打印，因为其父类AbstractCollection重写了toString方法。<br>
如果是数组，可以通过Arrays.toString(数组)，方法实现打印。</li>
<li><strong>makeEmpty</strong>：如果是List，有clear()方法，将所有元素置为null。</li>
<li><strong>find</strong>：找到某元素第一次出现的位置，jdk好像没实现</li>
<li><strong>insert</strong>：jdk实现的是add方法，有重载，不指定index，则默认最后，可以指定index。</li>
<li><strong>findKth</strong>：查找某个index下的元素，如果是List，有get(index)方法，数组则int[index]。</li>
<li><strong>remove</strong>：移除某个index的元素</li>
</ol>
<h3 id="3-2-1表的简单数组实现">3.2.1表的简单数组实现</h3>
<p>  数组的实现，使printList可以用线性的时间O(N)执行，findKth则花费常数时间。插入和删除开销昂贵，在最坏的情况下，在索引为0的位置插入，需要将所有元素向后移动一位。而删除一个位置则需要将所有元素向前移动一位。两种操作的时间都为O(N)。但是如果所有元素都操作在表的高端(末端，数组有容量的情况下，否则需要昂贵的扩容)。添加和删除只需要O(1)的时间。</p>
<h3 id="3-2-2简单链表">3.2.2简单链表</h3>
<p>  链表由一系列节点组成，这些节点在内存中可以不相连，每个节点均含有表元素和包含该元素后继节点的链 link(指针)，称之为next链。最后一个节点的next链为null。<br>
  执行printList与find(x)，可以从表的头的第一个节点开始使用后继的next遍历该表即可，这种操作和数组一样，是线性的时间。<br>
  remove方法通过修改一个next指针实现，insert方法使用new操作符从系统中新增一个节点，此后执行两次引用调整。如图所示，链表的插入与删除都只需要花费常数的时间。<br>
<img src="/2021/07/11/%E8%A1%A8%E4%B8%8Ejava%E4%B8%AD%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E4%B8%8E%E5%88%A0%E9%99%A4.png" alt></p>
<p>  双向链表：让每一个节点持有一个指向它在表中的前驱节点的链</p>
<table><br></table>
<h2 id="3-3-java-collections-api中的表">3.3 Java Collections API中的表</h2>
<blockquote>
<p>表ADT是在Collections API中的实现数据结构之一。</p>
</blockquote>
<h3 id="3-3-1-collections接口">3.3.1 Collections接口</h3>
<p>  Collection接口扩展Iterable接口(可迭代)，实现该接口的类可以拥有简单的for循环，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此静态方法void前面的&lt;AnyType&gt;是引用类上的&lt;AnyType&gt;泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;AnyType&gt; <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Collection&lt;AnyType&gt; coll)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (AnyType item : coll) &#123;</span><br><span class="line">        System.out.println(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-2-iterator接口">3.3.2 Iterator接口</h3>
<p>  实现Iterator接口的集合必须实现iterator接口方法，返回一个iterator，该iterator将当前位置的概念在对象内部存储。该iterator是java.util包中定义。<br>
  每次对next调用，都给出该集合的下一项，hasNext()用来返回是否存在下一项。对于实现Iterable接口的增强for循环，编译器会重写，将其转换为由迭代器iterator进行迭代。所以前面的print被编译器改写为。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;AnyType&gt; <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Collection&lt;AnyType&gt; coll)</span> &#123;</span><br><span class="line">    Iterator&lt;AnyType&gt; iterator = coll.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        <span class="type">AnyType</span> <span class="variable">item</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">        System.out.println(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  iterator接口还有一个remove方法，该方法删除next返回的项，虽然Collection接口也有remove方法，但是Iterator方法有更多优点。Collecction的remove方法，必须要指定删除那一项，而Iterator可以在遍历的过程中删除。如果直接使用for循环remove集合中的某个元素，则会抛出异常，这时就应该使用迭代器的remove方法。</p>
<h3 id="3-3-3-list接口与继承的类">3.3.3 List接口与继承的类</h3>
<p>  List接口继承了Collection接口，如下包括其自己定义的一些重要的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyList</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Collection</span>&lt;T&gt; &#123;</span><br><span class="line">    T <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line">    T <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, T newVal)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, T x)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line">    <span class="comment">// 此方法将产生更加复杂的迭代器</span></span><br><span class="line">    ListIterator&lt;T&gt; <span class="title function_">listIterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  List ADT有两种流行的实现方式，ArrayList是可变数组的具体实现，具有数组的特点，get与set花费常数的时间，add与remove的花费线性O(N)的时间(不在末端的情况)。LinkedList则实现了一种双向链表。具有一系列操作首尾位置的方法，其具有链表的特点，get的时间近似线性。<br>
<strong>构造一个新的List</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makeList1</span><span class="params">(List&lt;Integer&gt; lst, <span class="type">int</span> N)</span> &#123;</span><br><span class="line">    lst.clearn();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        lst.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  该构造，无论传入的是ArrayList还是LinkedList都是O(N)，每次都是在末尾添加。不考虑ArrayList的扩容。</p>
<p><strong>在表的前端插入元素</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makeList</span><span class="params">(List&lt;Integer&gt; lst, <span class="type">int</span> N)</span> &#123;</span><br><span class="line">    lst.clearn();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        lst.add(<span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  该构造，对于ArrayList是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，因为其每次插入花费时间O(N)，对于LinkedList则花费时间O(N)</p>
<p><strong>求表中所有元素的和</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(List&lt;Integer&gt; lst &#123;</span></span><br><span class="line"><span class="params">    <span class="type">int</span> total = <span class="number">0</span>;</span></span><br><span class="line"><span class="params">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span> &#123;</span><br><span class="line">        total += lst.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  对于ArrayList其时间为O(N)，LinkedList时间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，因为其每次获取元素需要O(N)的时间。如果使用增强for循环，则两个都是O(N)，将使用迭代器一直迭代下去。对搜索而言，两者都是低效的，contains与remove方法均花费线性时间。</p>
<h3 id="3-3-4-likedlist中的remove方法">3.3.4 LikedList中的remove方法</h3>
<blockquote>
<p>考虑如下一个例子，删除表中的所有偶数。表[6,5,1,4,2]，删除后表中仅有5，1两个元素。</p>
</blockquote>
<p>  对于ArrayList，其删除的操作是O(N)，不是，一个好策略，对于LinkedList，如果不使用迭代器则是O(N)(首先需要找到该元素才能删除)，如果使用迭代器，则一次删除为O(1)。   如果使用普通的while循环，那么对于ArrayList是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的时间，对于LinkedList也是O(N^2)的时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法不高效,并且在循环中使用collection的remove方法是一个非法的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeEvensVer1</span><span class="params">(List&lt;Integer&gt; lst)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; lst.size()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lst.get(i) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            lst.remove(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果没有remove，则i++,(remove非法)</span></span><br><span class="line">            i ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  如下，该方法使用了增强for循环(即使用了迭代器)，但是使用了collection的remove方法，该方法必须再次搜索该项，因此remove执行时间仍然为O(N)，总体时间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，并且同上，对增强for循环使用的基础迭代器中，collection的remove元素也是非法的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法不高效,并且在循环中使用collection的remove方法是一个非法的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeEvensVer1</span><span class="params">(List&lt;Integer&gt; lst)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Integer x : lst) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// collection的remove需要找到该元素，为O(N),且非法</span></span><br><span class="line">            lst.remove(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  如下使用迭代器，对于LinkedList是O(N)的复杂度，对于ArrayList则依旧是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的复杂度(remove后，数组必须整体向前移动)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">removeEvensVer3</span><span class="params">(List&lt;Integer&gt; lst)</span> &#123;</span><br><span class="line">    Iterator&lt;Integer&gt; itr = lst.iterator();</span><br><span class="line">        <span class="keyword">while</span> (itr.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (itr.next() % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            itr.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-5-listiterator接口">3.3.5 ListIterator接口</h3>
<p>  该接口只能被List使用，其扩展了Iterator</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ListIterator</span>&lt;AnyType&gt; <span class="keyword">extends</span> <span class="title class_">Iteerator</span>&lt;AnyType&gt; &#123;</span><br><span class="line">    <span class="comment">// 前向遍历， 是否有前一项</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasPrevious</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 获取前一项</span></span><br><span class="line">    AnyType <span class="title function_">previous</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 正向遍历，是否有后一项</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 获取后一项</span></span><br><span class="line">    AnyType <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在当前位置插入，即next项后移一位</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(AnyType x)</span>;</span><br><span class="line">    <span class="comment">// 设置当前项的值</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(AnyType newVal)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table><br></table>
<h2 id="3-4-arraylist类的实现">3.4 ArrayList类的实现</h2>
<p>  此处手动实现一个MyArrayList，该类独立实现。将具有以下特点：</p>
<ol>
<li>将保持基础数组，数组的容量，存储当前项数</li>
<li>将提供方法改变数组的容量，(将改变容量后的数组拷贝到新数组)</li>
<li>提供get与set实现</li>
<li>提供基本的例程，size()与isEmpty()实现，clear()实现，提供remove()，add()</li>
<li>实现Iterator接口，提供next，hasNext，remove。</li>
</ol>
<h3 id="3-4-1-基本类">3.4.1 基本类</h3>
<p>  该类不检测非法的迭代器remove方法。会在之后的3.5节实现。</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>基本类主代码实现(点击展开)</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArrayList</span>&lt;AnyType&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;AnyType&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认容量为10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> theSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AnyType[] theItems;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 空参构造方法，清空数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">        doClear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        doClear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doClear</span><span class="params">()</span> &#123;</span><br><span class="line">        theSize = <span class="number">0</span>;</span><br><span class="line">        ensureCapacity(DEFAULT_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数组元素的个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> theSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断数组的元素是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数组的容量截取到元素个数的量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trimToSize</span><span class="params">()</span> &#123;</span><br><span class="line">        ensureCapacity(size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定索引的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> AnyType <span class="title function_">get</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (idx &lt; <span class="number">0</span> || idx &gt;= size()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> theItems[idx];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置指定位置的值,并返回旧的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> AnyType <span class="title function_">set</span><span class="params">(<span class="type">int</span> idx, AnyType newVal)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (idx &lt; <span class="number">0</span> || idx &gt;= size()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">AnyType</span> <span class="variable">old</span> <span class="operator">=</span> theItems[idx];</span><br><span class="line">        theItems[idx] = newVal;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数组的容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ensureCapacity</span><span class="params">(<span class="type">int</span> newCapacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity &lt; theSize) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        AnyType[] old = theItems;</span><br><span class="line">        <span class="comment">// 创建指定大小的空数组，用于存放截取后的数组</span></span><br><span class="line">        theItems = (AnyType[]) <span class="keyword">new</span> <span class="title class_">Object</span>[newCapacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size(); i++) &#123;</span><br><span class="line">            theItems[i] = old[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向数组中添加指定的元素, 默认为已有的元素的个数最后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(AnyType x)</span> &#123;</span><br><span class="line">        add(size(), x);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向数组的指定的位置添加元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> idx, AnyType x)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果数组的长度等于元素个数量，则数组需要扩容</span></span><br><span class="line">        <span class="keyword">if</span> (theItems.length == size()) &#123;</span><br><span class="line">            ensureCapacity(size() * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将指定位置与指定位置之后的所有元素后移一位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> theSize; i &gt; idx; i--) &#123;</span><br><span class="line">            <span class="comment">// 最后，idx + 1 = idx，即将idx位置的元素向后移动一位</span></span><br><span class="line">            theItems[i] = theItems[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置指定位置的值</span></span><br><span class="line">        theItems[idx] = x;</span><br><span class="line">        theSize++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AnyType <span class="title function_">remove</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="type">AnyType</span> <span class="variable">removeItem</span> <span class="operator">=</span> theItems[idx];</span><br><span class="line">        <span class="comment">// 将idx处的所有元素前移一位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &lt; size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            theItems[i] = theItems[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        theSize--;</span><br><span class="line">        <span class="keyword">return</span> removeItem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;AnyType&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayListIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部类，用于创建迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ArrayListIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;AnyType&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> current &lt; size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> AnyType <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> theItems[current++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">            MyArrayList.<span class="built_in">this</span>.remove(current-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="3-4-2-嵌套类与内部类">3.4.2 嵌套类与内部类</h3>
<p><strong>迭代器-内部类</strong>：可以使用，推荐这种(就是上面的实现)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArrayList2</span>&lt;AnyType&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;AnyType&gt; &#123;</span><br><span class="line">    <span class="comment">// 定义数组大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> theSize;</span><br><span class="line">    <span class="comment">// 定义数组</span></span><br><span class="line">    <span class="keyword">private</span> AnyType[] theItems;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;AnyType&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// this指代这个类</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayListIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新定义的private内部类，不能使用泛型，可以直接使用外部类参数(不冲突的情况)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ArrayListIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line">        <span class="comment">// 当前索引下标位置</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> current &lt; size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> AnyType <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 此处实际上无法使用theItems数组参数，因为此内部类是一个顶级内部类，而theItems是外部类的一个私有参数</span></span><br><span class="line">            <span class="comment">// 现在为做出修改后的，可以使用，不是顶级内部类，在外部参数与内部类冲突的情况下可以直接使用外部类参数theItems</span></span><br><span class="line">            <span class="keyword">return</span> theItems[current++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 使用外部类的remove方法，与此内部类的remove(就是此方法)方法冲突，需要指明</span></span><br><span class="line">            MyArrayList2.<span class="built_in">this</span>.remove(--current);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>迭代器-嵌套类</strong>：就是把内部类申明为静态的，同时指定泛型，构造函数传入外部参数，可以使用，但不推荐，使用上面的。故不再列出。</p>
<table><br></table>
<h2 id="3-5-linkedlist实现">3.5 LinkedList实现</h2>
<p>  同上，此处将手动实现一个LinkedList</p>
<ol>
<li>MyLinkedList类本身，包含到两端的链、表的大小和一些方法</li>
<li>Node类，私有嵌套(静态内部)类，一个Node节点包含一个数据以及到前一个节点链和到下一个节点的链，还有构造方法</li>
<li>LinkedListIterator类，抽象了位置的概念，私有类，实现Iterator，提供next方法、hasNext和remove实现</li>
</ol>
<h3 id="3-5-1-基本类">3.5.1 基本类</h3>
<p>  该链表主要由Node节点组成，迭代器去遍历实现，迭代器存储当前节点的引用。该实现真实的链表前端额外创建一个节点，称为头节点，末端也额外创建一个节点，称为<strong>尾节点</strong>。使用这些节点的好处在于简化编码，删除头节点与尾节点都不再是特殊情况(删除算法也需要访问被删除的前一个节点)。<br>
<img src="/2021/07/11/%E8%A1%A8%E4%B8%8Ejava%E4%B8%AD%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/%E9%A2%9D%E5%A4%96%E5%A4%B4%E5%B0%BE%E8%8A%82%E7%82%B9.png" alt></p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>基本类主代码(点击展开)</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLinkedList</span>&lt;AnyType&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;AnyType&gt; &#123;</span><br><span class="line">    <span class="comment">// 使用了嵌套类Node，类时私有的，其属性是否私有无关紧要(只有MyLinkedList类能见到该类，其他外部类无法访问)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;AnyType&gt; &#123;</span><br><span class="line">        <span class="keyword">public</span> AnyType data;            <span class="comment">// 节点内的数据</span></span><br><span class="line">        <span class="keyword">public</span> Node&lt;AnyType&gt; prev;      <span class="comment">// 节点的上一个节点</span></span><br><span class="line">        <span class="keyword">public</span> Node&lt;AnyType&gt; next;      <span class="comment">// 节点的下一个节点</span></span><br><span class="line">        <span class="comment">// 构造方法，创建一个新的节点；节点的数据，节点的上一个节点p,节点的下一个节点n</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(AnyType d, Node&lt;AnyType&gt; p, Node&lt;AnyType&gt; n)</span> &#123;</span><br><span class="line">            data = d;</span><br><span class="line">            prev = p;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链表长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> theSize;</span><br><span class="line">    <span class="comment">// 自从构造以来，对链表所做改变次数，当调用迭代器LinkedListIterator的方法时，</span></span><br><span class="line">    <span class="comment">// 和迭代器存储的modCount方法比较，如果不一致，则报并发异常ConcurrentModificationException</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">modCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 链表头节点</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;AnyType&gt; beginMaker;</span><br><span class="line">    <span class="comment">// 链表尾节点</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;AnyType&gt; endMarker;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法，创建时清除现有链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        doClear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 供外部调用的clear方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        doClear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 真正的doClear方法，</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doClear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个头节点，由于此时还没有尾节点故n节点为null</span></span><br><span class="line">        beginMaker = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 创建尾节点，上一个节点指向头节点</span></span><br><span class="line">        endMarker = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="literal">null</span>, beginMaker, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 现在可以指定下一个节点为尾节点</span></span><br><span class="line">        beginMaker.next = endMarker;</span><br><span class="line">        <span class="comment">// 初始化长度为0</span></span><br><span class="line">        theSize = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 对节点的修改次数加1</span></span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> theSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向链表中添加元素，不指定位置，默认为尾节点前(即最后)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(AnyType x)</span> &#123;</span><br><span class="line">        <span class="comment">// 插入节点为原size()，因为索引下标为0开始，所以实际最大为size()-1</span></span><br><span class="line">        add(size(), x);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向链表中添加元素，指定插入下标</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> idx, AnyType x)</span> &#123;</span><br><span class="line">        <span class="comment">// 插入下标为x,则是插入原下标为x的前面</span></span><br><span class="line">        addBefore(getNode(idx, <span class="number">0</span>, size()), x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取指定索引处的值data</span></span><br><span class="line">    <span class="keyword">public</span> AnyType <span class="title function_">get</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getNode(idx).data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置指定索引处的值</span></span><br><span class="line">    <span class="keyword">public</span> AnyType <span class="title function_">set</span><span class="params">(<span class="type">int</span> idx, AnyType newVal)</span> &#123;</span><br><span class="line">        Node&lt;AnyType&gt; p = getNode(idx);</span><br><span class="line">        <span class="type">AnyType</span> <span class="variable">oldVal</span> <span class="operator">=</span> p.data;</span><br><span class="line">        p.data = newVal;</span><br><span class="line">        <span class="keyword">return</span> oldVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对外公开的remove方法，只需要从指定删除处的索引</span></span><br><span class="line">    <span class="keyword">public</span> AnyType <span class="title function_">remove</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> remove(getNode(idx));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在指定元素前添加节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addBefore</span><span class="params">(Node&lt;AnyType&gt; p, AnyType x)</span> &#123;</span><br><span class="line">        Node&lt;AnyType&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(x, p.prev, p);</span><br><span class="line">        newNode.prev.next = newNode;</span><br><span class="line">        p.prev = newNode;</span><br><span class="line">        theSize++;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  真正的删除方法，将p从链表断开</span></span><br><span class="line">    <span class="keyword">private</span> AnyType <span class="title function_">remove</span><span class="params">(Node&lt;AnyType&gt; p)</span> &#123;</span><br><span class="line">        p.next.prev = p.prev;</span><br><span class="line">        p.prev.next = p.next;</span><br><span class="line">        theSize--;</span><br><span class="line">        <span class="keyword">return</span> p.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node&lt;AnyType&gt; <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getNode(idx, <span class="number">0</span>, size() -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取指定索引处的节点</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;AnyType&gt; <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> lower, <span class="type">int</span> upper)</span> &#123;</span><br><span class="line">        Node&lt;AnyType&gt; p;</span><br><span class="line">        <span class="keyword">if</span> (idx &lt; lower || idx &gt; upper) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果节点在前半部分，从前面遍历</span></span><br><span class="line">        <span class="keyword">if</span> (idx &lt; size() / <span class="number">2</span>) &#123;</span><br><span class="line">            p = beginMaker.next;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; idx; i++) &#123;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果节点在后半部分，从前面遍历</span></span><br><span class="line">            p = endMarker;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size(); i &gt; idx; i--) &#123;</span><br><span class="line">                p = p.prev;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;AnyType&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LinkedListIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">LinkedListIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;AnyType&gt; &#123;</span><br><span class="line">        <span class="comment">// 将current节点初始化为头节点的下一个节点</span></span><br><span class="line">        <span class="keyword">private</span> MyLinkedList.Node&lt;AnyType&gt; current = beginMaker.next;</span><br><span class="line">        <span class="comment">// 使期望的修改次数=外部类的修改次数</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">        <span class="comment">// 是否可以remove</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">okToRemove</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> current != endMarker;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> AnyType <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">AnyType</span> <span class="variable">nextItem</span> <span class="operator">=</span> current.data;</span><br><span class="line">            current = current.next;</span><br><span class="line">            okToRemove = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> nextItem;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!okToRemove) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 真正的remove,不改变currentt(ArrayList需要更改)</span></span><br><span class="line">            MyLinkedList.<span class="built_in">this</span>.remove(current.prev);</span><br><span class="line">            expectedModCount++;</span><br><span class="line">            okToRemove = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>那些年玩过的游戏</title>
    <url>/2023/05/18/%E9%82%A3%E4%BA%9B%E5%B9%B4%E7%8E%A9%E8%BF%87%E7%9A%84%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<p>众所周知，songbirds是一个喜欢玩游戏的人。</p>
<span id="more"></span>
<p><a href="https://store.steampowered.com/app/646570/Slay_the_Spire/">Steam 上的 Slay the Spire</a></p>
<p><img src="/2023/05/18/%E9%82%A3%E4%BA%9B%E5%B9%B4%E7%8E%A9%E8%BF%87%E7%9A%84%E6%B8%B8%E6%88%8F/slay-the-Spire.webp" alt="Slay the Spire"></p>
<p><a href="https://store.steampowered.com/app/550/Left_4_Dead_2/">Steam 上的 Left 4 Dead 2</a></p>
<p><img src="/2023/05/18/%E9%82%A3%E4%BA%9B%E5%B9%B4%E7%8E%A9%E8%BF%87%E7%9A%84%E6%B8%B8%E6%88%8F/left4-dead-2.webp" alt="Left 4 Dead 2"></p>
<p><a href="https://store.steampowered.com/app/730/CounterStrike_Global_Offensive/">Steam 上的 Counter-Strike: Global Offensive</a></p>
<p><img src="/2023/05/18/%E9%82%A3%E4%BA%9B%E5%B9%B4%E7%8E%A9%E8%BF%87%E7%9A%84%E6%B8%B8%E6%88%8F/CSGO.webp" alt="CSGO"></p>
<p><a href="https://store.steampowered.com/app/322330/_/">Steam 上的 饥荒联机版 </a></p>
<p><img src="/2023/05/18/%E9%82%A3%E4%BA%9B%E5%B9%B4%E7%8E%A9%E8%BF%87%E7%9A%84%E6%B8%B8%E6%88%8F/Don't-Starve-Together.webp" alt="Don't Starve Together"></p>
<p><a href="https://store.steampowered.com/app/994280/Gujian3/">Steam 上的 古剑奇谭三(Gujian3)</a></p>
<p><img src="/2023/05/18/%E9%82%A3%E4%BA%9B%E5%B9%B4%E7%8E%A9%E8%BF%87%E7%9A%84%E6%B8%B8%E6%88%8F/Gujian3.webp" alt="古剑奇谭三"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2022/06/02/%E9%BB%91%E6%B3%A51/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9b36372608564fa4ddb5ca245b884907425ad8b810431212d90af8eba780995a">86daf2dd9f98eea2571c3fce34d1e7adf8c6f0caba96db9f885791bfddfd9e13cc6352411bbae3995b93ccb7bfc42fd5a7184de460fdd8522a114f937646ff6c56555eb97418a0ba59fe4068db6e9d98d3e3e2904d59492f1fa291f3ee26e1a4b352e6172628f576dde9b3c87ee33a83317388418a5a89a3177f11e5d9e8e26f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>对拍程序-java</title>
    <url>/2023/09/06/%E5%AF%B9%E6%8B%8D%E7%A8%8B%E5%BA%8F-java/</url>
    <content><![CDATA[<p>大部分OJ除了给出测试用例，其他用例一般都不会给出，拿不到自己WA的用例，就比较难分析出自己的程序问题是出在那里。对拍程序能较大程度的解决这个问题。</p>
<span id="more"></span>
<p>对拍，就是两份程序同时读入相同的数据，读入的数据都是我们用随机数生成器生成符合要求的数据，然后分别输出，看两份程序的输出是否一致。</p>
<p>对拍具体分为两种，一种是比赛中的对拍，此时的对拍，一份程序是逻辑正确的暴力程序，另一份是时间、内存合理的程序，但不确定逻辑是否正确。这时可以将暴力程序和符合要求的程序对拍，若对拍的程序多次输出一致，则大概率没有问题。<br>
另一种对拍是比较常用的平常练习时的对拍，某道题提交后，OJ会告知提交WA了，但是不给出WA的用例，于是我们就比较难定位程序中的问题，这时对拍就派上用场了，一般的OJ都可以看到他人AC的代码，我们将AC的代码与自己的代码对拍，当两份程序对同一份输入产生的输出不同时，那么我们就找到了一个导致自己程序WA的用例。</p>
<p>以下是java实现的一份对拍程序，用来生成数据并比较两个算法程序的输出是否一致。</p>
<p>CompareCode类是一个对拍程序，用来对拍A类与B类的同样的输入，是否输出一致。随机数生成用的是generateTestCases方法，不同的题目需要改变此方法，使生成的数据格式符合题目要求即可。其他A类或B类放入AC的程序，另一份放入自己的程序。若A类是AC的程序，则对于生成的用例<code>testcase1.txt</code>，文件<code>outputA1.txt</code>是AC程序的输出文件。<code>outputB1.txt</code>是自己程序的输出文件。<br>
此对拍程序通过反射实现，改变输入流（生成的测试用例）、输出流到文件（程序的产生的输出），若输出不一致，则会在控制台用警告的方式提示，哪些随机生成的用例的输出不一致。</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>基于jdk11的readString方法</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> util.RandomArrList; <span class="comment">// 自定义的随机数生成器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对拍程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompareCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TEST_CASES_FOLDER</span> <span class="operator">=</span> <span class="string">&quot;./&quot;</span>; <span class="comment">// 当前目录</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 要对拍多少次。即测试用例文件生成的个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">numCase</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成测试用例数据并写入文件</span></span><br><span class="line">        generateTestCases(numCase);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用算法 A 和算法 B 进行对拍</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= numCase; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">inputFilePath</span> <span class="operator">=</span> TEST_CASES_FOLDER + <span class="string">&quot;testcase&quot;</span> + i + <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">outputAFilePath</span> <span class="operator">=</span> TEST_CASES_FOLDER + <span class="string">&quot;outputA&quot;</span> + i + <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">outputBFilePath</span> <span class="operator">=</span> TEST_CASES_FOLDER + <span class="string">&quot;outputB&quot;</span> + i + <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">            runAlgorithm(A.class, inputFilePath, outputAFilePath);</span><br><span class="line">            runAlgorithm(B.class, inputFilePath, outputBFilePath);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!compareOutputs(outputAFilePath, outputBFilePath)) &#123;</span><br><span class="line">                System.setOut(System.err);</span><br><span class="line">                System.out.println(<span class="string">&quot;Output mismatch for testcase&quot;</span> + i);</span><br><span class="line">                System.out.println(<span class="string">&quot;A: &quot;</span> + outputAFilePath);</span><br><span class="line">                System.out.println(<span class="string">&quot;B: &quot;</span> + outputBFilePath);</span><br><span class="line">                System.setOut(System.out);</span><br><span class="line">                System.out.println(<span class="string">&quot;============================================&quot;</span>);</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用程序处理输入文件并将输出结果写入文件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runAlgorithm</span><span class="params">(Class&lt;?&gt; clazz, String inputFilePath, String outputFilePath)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;main&quot;</span>, String[].class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取输入文件内容</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">inputFileContent</span> <span class="operator">=</span> Files.readString(Paths.get(inputFilePath));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置 System.in 为读取输入文件内容的流</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(inputFileContent.getBytes());</span><br><span class="line">            System.setIn(byteArrayInputStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置 System.out 为输出到文件</span></span><br><span class="line">            <span class="type">PrintStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(outputFilePath));</span><br><span class="line">            System.setOut(fileOut);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用算法的 main 方法，并将空的参数数组传递给算法</span></span><br><span class="line">            method.invoke(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;&#125;&#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 恢复 System.in 和 System.out</span></span><br><span class="line">            System.setIn(System.in);</span><br><span class="line">            System.setOut(System.out);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较两个输出文件的内容是否一致</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compareOutputs</span><span class="params">(String outputFilePath1, String outputFilePath2)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content1</span> <span class="operator">=</span> Files.readString(Paths.get(outputFilePath1));</span><br><span class="line">        <span class="type">String</span> <span class="variable">content2</span> <span class="operator">=</span> Files.readString(Paths.get(outputFilePath2));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> content1.equals(content2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成测试用例数据并写入文件</span></span><br><span class="line">    <span class="comment">// 测试用例格式1：一行一个整数n，n从3到10，下一行n个数，大小在1到n范围，用空格隔开</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">generateTestCases1</span><span class="params">(<span class="type">int</span> numTestCases)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= numTestCases; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> TEST_CASES_FOLDER + <span class="string">&quot;testcase&quot;</span> + i + <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(filePath))) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> RandomArrList.getRandNum(<span class="number">3</span>, <span class="number">10</span>);</span><br><span class="line">                writer.write(n + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="type">int</span>[] randomArr = RandomArrList.getRandomArr(n, <span class="number">1</span>, n);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; randomArr.length; j++) &#123;</span><br><span class="line">                    writer.write(randomArr[j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                writer.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成测试用例数据并写入文件</span></span><br><span class="line">    <span class="comment">// 测试用例格式：一行一个整数t，表示有t组数据，接下来t组，每组第一行一个整数n、m，属于1到15.。。。。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">generateTestCases</span><span class="params">(<span class="type">int</span> numTestCases)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= numTestCases; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> TEST_CASES_FOLDER + <span class="string">&quot;testcase&quot;</span> + i + <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(filePath))) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> RandomArrList.getRandNum(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">                writer.write(t + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; t; j++) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> RandomArrList.getRandNum(<span class="number">1</span>, <span class="number">15</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> RandomArrList.getRandNum(<span class="number">1</span>, <span class="number">15</span>);</span><br><span class="line">                    writer.write(n + <span class="string">&quot; &quot;</span> + m);</span><br><span class="line">                    writer.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    ArrayList&lt;Integer&gt; randomList = RandomArrList.getRandomList(n, <span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">                    <span class="keyword">for</span> (Integer num : randomList) &#123;</span><br><span class="line">                        writer.write(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    writer.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<p>jdk8版本代码，替换掉Files.readString()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> util.RandomArrList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompareCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TEST_CASES_FOLDER</span> <span class="operator">=</span> <span class="string">&quot;./&quot;</span>; <span class="comment">// 当前目录</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numCase</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成测试用例数据并写入文件</span></span><br><span class="line">        generateTestCases(numCase);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用算法 A 和算法 B 进行对拍</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= numCase; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">inputFilePath</span> <span class="operator">=</span> TEST_CASES_FOLDER + <span class="string">&quot;testcase&quot;</span> + i + <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">outputAFilePath</span> <span class="operator">=</span> TEST_CASES_FOLDER + <span class="string">&quot;outputA&quot;</span> + i + <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">outputBFilePath</span> <span class="operator">=</span> TEST_CASES_FOLDER + <span class="string">&quot;outputB&quot;</span> + i + <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">            runAlgorithm(A.class, inputFilePath, outputAFilePath);</span><br><span class="line">            runAlgorithm(B.class, inputFilePath, outputBFilePath);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!compareOutputs(outputAFilePath, outputBFilePath)) &#123;</span><br><span class="line">                System.setOut(System.err);</span><br><span class="line">                System.out.println(<span class="string">&quot;Output mismatch for testcase&quot;</span> + i);</span><br><span class="line">                System.out.println(<span class="string">&quot;A: &quot;</span> + outputAFilePath);</span><br><span class="line">                System.out.println(<span class="string">&quot;B: &quot;</span> + outputBFilePath);</span><br><span class="line">                System.setOut(System.out);</span><br><span class="line">                System.out.println(<span class="string">&quot;============================================&quot;</span>);</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用程序处理输入文件并将输出结果写入文件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runAlgorithm</span><span class="params">(Class&lt;?&gt; clazz, String inputFilePath, String outputFilePath)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;main&quot;</span>, String[].class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取输入文件内容</span></span><br><span class="line">            List&lt;String&gt; inputFileContent = Files.readAllLines(Paths.get(inputFilePath));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置 System.in 为读取输入文件内容的流</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(String.join(System.lineSeparator(), inputFileContent).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.setIn(byteArrayInputStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置 System.out 为输出到文件</span></span><br><span class="line">            <span class="type">PrintStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(outputFilePath));</span><br><span class="line">            System.setOut(fileOut);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用算法的 main 方法，并将空的参数数组传递给算法</span></span><br><span class="line">            method.invoke(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;&#125;&#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 恢复 System.in 和 System.out</span></span><br><span class="line">            System.setIn(System.in);</span><br><span class="line">            System.setOut(System.out);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较两个输出文件的内容是否一致</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compareOutputs</span><span class="params">(String outputFilePath1, String outputFilePath2)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes1 = Files.readAllBytes(Paths.get(outputFilePath1));</span><br><span class="line">        <span class="type">byte</span>[] bytes2 = Files.readAllBytes(Paths.get(outputFilePath2));</span><br><span class="line">        <span class="type">String</span> <span class="variable">content1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes1, StandardCharsets.UTF_8);</span><br><span class="line">        <span class="type">String</span> <span class="variable">content2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes2, StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> content1.equals(content2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成测试用例数据并写入文件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">generateTestCases1</span><span class="params">(<span class="type">int</span> numTestCases)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= numTestCases; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> TEST_CASES_FOLDER + <span class="string">&quot;testcase&quot;</span> + i + <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(filePath))) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> RandomArrList.getRandNum(<span class="number">3</span>, <span class="number">10</span>);</span><br><span class="line">                writer.write(n + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="type">int</span>[] randomArr = RandomArrList.getRandomArr(n, <span class="number">1</span>, n);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; randomArr.length; j++) &#123;</span><br><span class="line">                    writer.write(randomArr[j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                writer.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成测试用例数据并写入文件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">generateTestCases</span><span class="params">(<span class="type">int</span> numTestCases)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= numTestCases; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> TEST_CASES_FOLDER + <span class="string">&quot;testcase&quot;</span> + i + <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(filePath))) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> RandomArrList.getRandNum(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">                writer.write(t + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; t; j++) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> RandomArrList.getRandNum(<span class="number">1</span>, <span class="number">15</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> RandomArrList.getRandNum(<span class="number">1</span>, <span class="number">15</span>);</span><br><span class="line">                    writer.write(n + <span class="string">&quot; &quot;</span> + m);</span><br><span class="line">                    writer.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    ArrayList&lt;Integer&gt; randomList = RandomArrList.getRandomList(n, <span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">                    <span class="keyword">for</span> (Integer num : randomList) &#123;</span><br><span class="line">                        writer.write(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    writer.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>RandomArrList是我自己写的随机数生成器，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成随机数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomArrList</span> &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 生成随机数数组，长度为length，最小数为start，最大数为end</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] getRandomArr(<span class="type">int</span> length, <span class="type">int</span> start, <span class="type">int</span> end) &#123;</span><br><span class="line">        <span class="comment">// T[] ts = (T[])Array.newInstance(componentType, length);</span></span><br><span class="line">        <span class="type">int</span>[] resArr = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> random.nextInt(end - start + <span class="number">1</span>) + start;</span><br><span class="line">            resArr[i] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成随机数集合，长度为length，最小数为start，最大数为end</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title function_">getRandomList</span><span class="params">(<span class="type">int</span> length, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(length);</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> random.nextInt(end - start + <span class="number">1</span>) + start;</span><br><span class="line">            resList.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 生成单个随机数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getRandNum</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">return</span> random.nextInt(end - start + <span class="number">1</span>) + start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>前缀和与差分</title>
    <url>/2023/10/25/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/</url>
    <content><![CDATA[<p>差分与前缀和</p>
<span id="more"></span>
<p>一维前缀和</p>
<blockquote>
<p>对于一个长度为n的数组nums，其下标i处的前缀和 = 从下标0到下标i的值累加得到的新值。这些新值重新组成一个新的数组，称为前缀和数组。我们一般说的前缀和特指前缀和数组，这里为了说明清晰还是区分前缀和与前缀和数组。另外为了方便计算与还原数组，我习惯添加一个前置0，形成长度为n+1的前缀和数组。</p>
</blockquote>
<p>一维差分</p>
<blockquote>
<p>对于一个长度为n的数组nums，其下标i处的差分=下标i处的值-下标i-1处的值。这些新值组成的新的数组称为差分数组，对于下标0处的值，没有对象可以减去，因此维持不变。同理本笔记也区分差分和差分数组。另外为了方便计算与还原数组，我习惯给差分数组最后加一个0-nums[n-1]的值，相当于给原数组nums添加了一个0的值形成长度为n+1的nums数组</p>
</blockquote>
<h2 id="一维前缀和">一维前缀和</h2>
<p>一维前缀和公式可以总结如下，对于下标i处的元素sum[i]有：(注意长为n的数组nums下标从0开始，到n-1结束)</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">sum[n]=\sum_{i=0}^{n-1}nums[i]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0787820000000004em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000004em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span></span></p>
<p>所以一维前缀和数组可以表示为：sumArr = [0,sum[0],sum[1],sum[2]…sum[n-1]]。（加了前置0）</p>
<p>前缀和的应用：前缀和主要应用于多次快速求解数组nums区间[L,R]的和。当我们预处理得到前缀和数组sumArr后，</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mi>R</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo>−</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mi>L</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">sum[R+1]-sum[L]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault">L</span><span class="mclose">]</span></span></span></span></span></p>
<p>就是nums区间[L,R]的所有值的和。因为sum[R+1]是nums下标0到下标R的数的和，sum[L]是下标0到下标L-1的和。（注意：因为我的习惯添加了前置0到sumArr数组，所以原nums数组对应到sumArr数组需要加1）。两者相减就是答案。</p>
<h3 id="模板题：">模板题：</h3>
<p>给你一个长度为n的数组nums，再给你一个m行2列的二维数组querys表示m次询问，每个子数组包含两个数字L、R，表示查询nums中L到R所有数之和。<br>
数据范围：1 &lt;= n &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>，1 &lt;= m &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>，0 &lt;= L &lt;= R &lt;= n - 1。</p>
<p>分析：朴素的做法是对于每次querys[i]，遍历L到R的数组，然后累加得到结果即可，分析可知时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><msup><mn>0</mn><mn>10</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(10^{10})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。显然是不符合题目要求的。但是使用前缀和可以达到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(10^{5})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的时间复杂度，即query次数的时间。符合题目要求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] prefixSum(<span class="type">int</span>[] nums, <span class="type">int</span>[][] querys) &#123;</span><br><span class="line">    <span class="type">int</span>[] sumArr = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 前缀和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        sumArr[i + <span class="number">1</span>] = sumArr[i] + nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] ansArr = <span class="keyword">new</span> <span class="title class_">int</span>[querys.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; querys.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> querys[i][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> querys[i][<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 求left到right的元素的和</span></span><br><span class="line">        ansArr[i] = sumArr[right + <span class="number">1</span>] - sumArr[left];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ansArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">一组测试用例</span><br><span class="line">int<span class="punctuation">[</span><span class="punctuation">]</span> nums = <span class="punctuation">&#123;</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">&#125;</span>;</span><br><span class="line">int<span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="punctuation">]</span> querys = <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="一维差分">一维差分</h2>
<p>一维差分的公式可以总结如下，对于下标i处的元素diff[i]有：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>−</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">diff[i] = nums[i] - nums[i - 1]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></span></p>
<p>所以一维差分数组可以表示为：sumArr = [diff[0], diff[1], diff[2]…diff[n-1], 0]。（加了后置0）</p>
<p>一维差分的应用：差分主要和前缀和一起搭配使用，先使用差分，处理区间加上一个数，或减去一个数的逻辑，然后使用前缀和，还原整个数组。</p>
<p>例如，对于一个长度为5数组<code>nums=&#123;a1, a2, a3, a4, a5&#125;</code>；先求出其差分数组，补上后置0（个人习惯），得到<code>diffArr = &#123;a1, a2 - a1, a3 - a2, a4 - a3, a5 - a4, 0&#125;</code>。</p>
<p>假设对nums的区间1到3加上一个数x，相当于对于nums的1下标加上x，在3+1下标上减去x。得到<code>diffArr = &#123;a1, a2 - a1 + x, a3 - a2, a4 - a3, a5 -a4 - x, 0&#125;</code>。<strong>(我们使用前缀和可以将diffArr其还原到<code>newNums = &#123;a1, a2 + x, a3 + x, a4 + x, a5, 0&#125;</code>。)</strong>。</p>
<p>再次对nums区间0到4减去一个数y，相当于对于nums的0的下标减去y，在4+1下标上加上y，得到<code>diffArr = &#123;a1 - y, a2 - a1 + x, a3 - a2, a4 - a3, a5 - a4 - x, y&#125;</code>，使用前缀和，还原可得到<code>newNums = &#123;a1 - y, a2 + x - y, a3 + x - y, a4 + x - y, a5 - y, a5&#125;</code>。在diffArr中下标0到4的5个元素就是最终的答案。</p>
<h3 id="模板题：">模板题：</h3>
<p>给你一个长度为n的数组nums，再给你一个m行4列的二维数组opers表示m次操作，每个子数组包含两个数字oper、L、R、num。oper=0或1，0表示对于L、R的连续区间加上num，1表示对于L、R的连续区间减去num。所有操作后，求最终的数组。<br>
数据范围：1 &lt;= n &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>，1 &lt;= m &lt;= <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>，oper=1或2，0 &lt;= L &lt;= R &lt;= n - 1。</p>
<p>分析：朴素的做法是对于每次opers[i]，遍历L到R的数组，然后操作得到结果即可，分析可知时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><msup><mn>0</mn><mn>10</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(10^{10})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。显然是不符合题目要求的。但是使用差分可以达到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(10^{5})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的时间复杂度，即opers次数的时间。符合题目要求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] diffAlgo(<span class="type">int</span>[] nums, <span class="type">int</span>[][] opers) &#123;</span><br><span class="line">    <span class="type">int</span>[] diffArr = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 初始化差分数组（如果原数组为空，就不需要初始化，即都为0）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            diffArr[i] = nums[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            diffArr[i] = nums[i] - nums[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; opers.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> opers[i][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> opers[i][<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> opers[i][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">if</span> (opers[i][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 加上一个数</span></span><br><span class="line">            diffArr[left] += p;</span><br><span class="line">            diffArr[right + <span class="number">1</span>] -= p;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 减去一个数</span></span><br><span class="line">            diffArr[left] -= p;</span><br><span class="line">            diffArr[right + <span class="number">1</span>] += p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前缀和还原, java不支持数组切片，只能拷贝到新数组</span></span><br><span class="line">    <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    ans[<span class="number">0</span>] = diffArr[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 不要多余的最后一个数，或者写成i &lt; nums.length也可以</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; diffArr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        ans[i] = ans[i - <span class="number">1</span>] + diffArr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>题目补充：<a href="https://leetcode.cn/problems/corporate-flight-bookings/">1109. 航班预订统计 - 力扣（LeetCode）</a></p>
<h2 id="二维前缀和">二维前缀和</h2>
<p>二维前缀和，只是在一维前缀和的基础上，将数组扩展到二维数组，来求答案。对于一个n行m列的二维数组，展示形式如下：代码的数组是从0开始的，这里按代码习惯展示了。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><msub><mrow></mrow><mn>0</mn></msub><msub><mrow></mrow><mn>0</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><msub><mrow></mrow><mn>0</mn></msub><msub><mrow></mrow><mn>1</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><msub><mrow></mrow><mn>0</mn></msub><msub><mrow></mrow><mrow><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><msub><mrow></mrow><mn>1</mn></msub><msub><mrow></mrow><mn>0</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><msub><mrow></mrow><mn>1</mn></msub><msub><mrow></mrow><mn>1</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><msub><mrow></mrow><mn>1</mn></msub><msub><mrow></mrow><mrow><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><msub><mrow></mrow><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub><msub><mrow></mrow><mn>0</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><msub><mrow></mrow><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub><msub><mrow></mrow><mn>1</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><msub><mrow></mrow><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub><msub><mrow></mrow><mrow><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\begin{pmatrix}
a{_0}{_0} &amp; a{_0}{_1} &amp; \dots &amp; a{_0}{_{(m-1)}} \\
a{_1}{_0} &amp; a{_1}{_1} &amp; \dots &amp; a{_1}{_{(m-1)}} \\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\
a{_{(n-1)}}{_0} &amp; a{_{(n-1)}}{_1} &amp; \dots &amp; a{_{(n-1)}}{_{(m-1)}} \\
\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.459999999999999em;vertical-align:-2.4799999999999995em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.950035em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.4999950000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.0950050000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.6900150000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.7100150000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.950035000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.64em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-4.44em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-2.5799999999999996em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.3800000000000006em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.950035em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.4999950000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.0950050000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.6900150000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.7100150000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.950035000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>因此，二维前缀和的通项可以表示为：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo stretchy="false">]</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">preSum[n,m] = \sum_{i=0}^{n-1}\sum_{j=0}^{m-1}a_{ij}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2148900000000005em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000004em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>preSum[n,m]表示nums中，nums[0, 0]到nums[n - 1,m - 1]所在的矩阵的和。在前缀和数组上，个人习惯添<strong>加前置0</strong>，所以对应都需要加1，因此可以创建前缀和数组preSumArr = new long[n + 1][m + 1]（用long避免溢出）。</p>
<p><img src="/2023/10/25/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/image-20240113172429813.png" alt="二维前缀和图，红色区间是到(0,0)的，橘色区间同理。只是颜色被黄色覆盖，未画出"></p>
<p>对于原数组nums下标（x, y）处的前缀和：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>S</mi><mi>u</mi><mi>m</mi><mi>A</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>y</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>p</mi><mi>r</mi><mi>e</mi><mi>S</mi><mi>u</mi><mi>m</mi><mi>A</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo>+</mo><mi>p</mi><mi>r</mi><mi>e</mi><mi>S</mi><mi>u</mi><mi>m</mi><mi>A</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>y</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo>−</mo><mi>p</mi><mi>r</mi><mi>e</mi><mi>S</mi><mi>u</mi><mi>m</mi><mi>A</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo>+</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">preSumArr[x + 1][y + 1] = preSumArr[x + 1][y] + preSumArr[x][y+1] - preSumArr[x][y] + nums[x][y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span>。<br>
如图所示，由于我们程序计算的先后顺序，我们计算前缀和preSumArr[x2][y2]的时候，已经计算了其正左方(x2, y2-1)、正上方（x2-1, y2）前缀和，由上图可知，（x2, y2）到（0，0）的矩形所在的前缀和，可由(x2, y2 -1) +（x2-1, y2） - (x2 - 1, y2 - 1) 所在区间的和+nums[x2][y2]（即红色区间+橘色区间-黄色区间+nums[x2][y2]）。</p>
<p>对于nums下标（x1, y1）到（x2，y2）的区间和：<br>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mi>p</mi><mi>r</mi><mi>e</mi><mi>S</mi><mi>u</mi><mi>m</mi><mi>A</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mn>2</mn><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>y</mi><mn>2</mn><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo>−</mo><mi>p</mi><mi>r</mi><mi>e</mi><mi>S</mi><mi>u</mi><mi>m</mi><mi>A</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mn>2</mn><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>y</mi><mn>1</mn><mo stretchy="false">]</mo><mo>−</mo><mi>p</mi><mi>r</mi><mi>e</mi><mi>S</mi><mi>u</mi><mi>m</mi><mi>A</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>y</mi><mn>2</mn><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>p</mi><mi>r</mi><mi>e</mi><mi>S</mi><mi>u</mi><mi>m</mi><mi>A</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>y</mi><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ans = preSumArr[x2 + 1][y2 + 1] - preSumArr[x2 + 1][y1] - preSumArr[x1][y2 + 1] + preSumArr[x1][y1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">1</span><span class="mclose">]</span></span></span></span>。<br>
如图所示，白色区域的区间和=白色（到(0,0)的）前缀和 - 红色前缀和 - 橘色前缀和 + 黄色前缀和。由于（x1, y1)要被加入到区间和结果，因此白色区域的区间和 = （x2, y2）- (x2, y1 - 1) - (x1 - 1, y2) + (x1 - 1, y1 - 1)</p>
<h3 id="模板题：">模板题：</h3>
<p><a href="https://www.nowcoder.com/practice/99eb8040d116414ea3296467ce81cbbc">【模板】二维前缀和_牛客网 (nowcoder.com)</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(System.in));</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(System.out));</span><br><span class="line">        <span class="comment">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 前缀和数组，加入前置0</span></span><br><span class="line">        <span class="type">long</span>[][] preSumArr = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="comment">// 记录输入的数字 并 同时计算前缀和</span></span><br><span class="line">                preSumArr[i+<span class="number">1</span>][j+<span class="number">1</span>] = sc.nextInt() + preSumArr[i][j + <span class="number">1</span>] + preSumArr[i + <span class="number">1</span>][j] - preSumArr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">            <span class="comment">// 题目下标从1开始（强烈谴责题目），所以提前减去1还原</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> sc.nextInt() - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">y1</span> <span class="operator">=</span> sc.nextInt() - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x2</span> <span class="operator">=</span> sc.nextInt() - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">y2</span> <span class="operator">=</span> sc.nextInt() - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 因为加了前置0，所以下面有加1</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> preSumArr[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] - preSumArr[x2 + <span class="number">1</span>][y1] - preSumArr[x1][y2 + <span class="number">1</span>] + preSumArr[x1][y1];</span><br><span class="line">            pw.println(ans);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二维差分">二维差分</h2>
<p>二维差分，同一维差分，在对数组进行区间操作后，最后求区间的值，或打印操作后的数组。</p>
<h3 id="模板题">模板题</h3>
<p><a href="https://www.nowcoder.com/practice/50e1a93989df42efb0b1dec386fb4ccc?tpId=230&amp;tqId=38963&amp;ru=/exam/oj">【模板】二维差分 牛客网 (nowcoder.com)</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(System.in));</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(System.out));</span><br><span class="line">        <span class="comment">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span>[][] rawArr = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">2</span>][m + <span class="number">2</span>];</span><br><span class="line">        <span class="type">long</span>[][] diffArr = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">2</span>][m + <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                rawArr[i][j] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化差分数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="comment">// 差分公式 diff[i][j] = arr[i][j] - arr[i-1][j] - rawArr[i][j-1] + raw[i-1][j-1]</span></span><br><span class="line">                diffArr[i][j] = rawArr[i][j] - rawArr[i -<span class="number">1</span>][j] - rawArr[i][j-<span class="number">1</span>] + rawArr[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">            <span class="comment">// 题目下标从1开始</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> sc.nextInt() - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">y1</span> <span class="operator">=</span> sc.nextInt() - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x2</span> <span class="operator">=</span> sc.nextInt() - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">y2</span> <span class="operator">=</span> sc.nextInt() - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">            diffArr[x1 + <span class="number">1</span>][y1 + <span class="number">1</span>] += k;</span><br><span class="line">            diffArr[x2 + <span class="number">2</span>][y1 + <span class="number">1</span>] -=k;</span><br><span class="line">            diffArr[x1 + <span class="number">1</span>][y2 + <span class="number">2</span>] -= k;</span><br><span class="line">            diffArr[x2 + <span class="number">2</span>][y2 + <span class="number">2</span>] +=k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="comment">// 差分还原公式</span></span><br><span class="line">                diffArr[i][j] = diffArr[i][j] + diffArr[i - <span class="number">1</span>][j] + diffArr[i][j-<span class="number">1</span>] - diffArr[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                pw.print(diffArr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            pw.println();</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法模板</title>
    <url>/2024/01/24/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>承接自<a href="/2022/09/05/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/" title="经典算法">经典算法</a>的笔记。</p>
<span id="more"></span>
<h2 id="1-树状数组">1.树状数组</h2>
<p>又名fenwickTree，国内又名BinaryIndexTree（名称很形象，与二进制有关）。树状数组无法解决RMQ问题，因为区间不可重复贡献，能解决的问题有：单点修改-区间求和、区间修改-区间求和、逆序对问题。</p>
<p>树状数组中每一个位置都是保存的一段区间的和。对原数组某一个下标x加上一个值，会影响到树状数组中该下标x，以及该下标x+lowbit(x)的位置，一直到最后一位。如图，红色值为树状数组的下标，例如下标8处的值，等于其所有子类的相加的和：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mn>8</mn><mo stretchy="false">]</mo><mo>=</mo><mi>p</mi><mi>r</mi><mi>e</mi><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo>+</mo><mi>p</mi><mi>r</mi><mi>e</mi><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mn>6</mn><mo stretchy="false">]</mo><mo>+</mo><mi>p</mi><mi>r</mi><mi>e</mi><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mn>7</mn><mo stretchy="false">]</mo><mo>+</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mn>8</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">preSum[8] = preSum[4] + preSum[6] + preSum[7] + nums[8]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord">8</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord">6</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord">7</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">8</span><span class="mclose">]</span></span></span></span>（注意红色的连线）。下标5的值的变更会影响到下标5、下标6、下标8处的值（注意红色的连线），即子节点值变更会影响到父节点的变更。这些下标都是根据lowbit得来</p>
<p>如果对原数组下标为5加上1，则如下二叉树部分，对下标为5的加上1，再对5+lowbit(5) = 6下标加上1，再对6 + lowbit(6) = 8下标加上1，接下来会超过数组边界，所以停止操作。</p>
<p>如果求区间[x, y]的值，则可以转化为求区间[1, y] - [1, x - 1]的值。我们从树状数组上往下查，假设要查[1, 6]的值，先查树状数组中6的值，在查6-lowbit(6) = 4 的值，接着4-lowbit(4) = 0，超出操作范围，停止操作。将这两者值相加的到区间[1, 6]的值。</p>
<p><img src="/2024/01/24/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/fenwickTree2.png" alt="fenwickTree"></p>
<h3 id="1-单点修改-区间求和">1.单点修改-区间求和</h3>
<p>模板题：<a href="https://www.luogu.com.cn/problem/P3374">P3374 【模板】树状数组 1 - 洛谷</a></p>
<blockquote>
<p>如题，已知一个数列，你需要进行下面两种操作：</p>
<ul>
<li>将某一个数加上<em>x</em></li>
<li>求出某区间每一个数的和</li>
</ul>
</blockquote>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>单点修改-区间求和</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 用来存储树状数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] prevSumArr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// Scanner sc = new Scanner(new BufferedInputStream(System.in));</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out)));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> rd.nextInt(); <span class="comment">// 数列长度为n</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> rd.nextInt(); <span class="comment">// m次操作（m行）</span></span><br><span class="line">        <span class="comment">// int[] arr = new int[n];</span></span><br><span class="line">        prevSumArr = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 初始化树状数组，下标从1开始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> rd.nextInt();</span><br><span class="line">            add(i, v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> rd.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> rd.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> rd.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1 add</span></span><br><span class="line">            <span class="comment">// 2 query</span></span><br><span class="line">            <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">                add(x, y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pw.println(ask(x, y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bitree的实际下标是从1开始的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (; x &lt;= prevSumArr.length - <span class="number">1</span>; x += (x &amp; -x)) &#123;</span><br><span class="line">            prevSumArr[x] += v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ask</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x &gt; <span class="number">0</span>; x -= (x &amp; -x)) &#123;</span><br><span class="line">            ans += prevSumArr[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// ask(y) 表示下标y到1的和，ask(x - 1) 表示下标x-1到下标1的和，差值即为区间[x, y]和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ask</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ask(y) - ask(x - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">rd</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="keyword">static</span> <span class="type">StringTokenizer</span> <span class="variable">tokenizer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// nextLine()读取字符串</span></span><br><span class="line">        <span class="keyword">static</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> reader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// next()读取字符串</span></span><br><span class="line">        <span class="keyword">static</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">while</span> (!tokenizer.hasMoreTokens()) &#123;</span><br><span class="line">                tokenizer = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(reader.readLine());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tokenizer.nextToken();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取一个int型数值</span></span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取一个double型数值</span></span><br><span class="line">        <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取一个long型数值</span></span><br><span class="line">        <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="2-区间修改-区间求和">2.区间修改-区间求和</h3>
<p>模板题：<a href="https://www.luogu.com.cn/problem/P3368#submit">P3368 【模板】树状数组 2 - 洛谷 </a></p>
<p>把原数组先进行差分，再以此创建树状数组。则对原数组[x, y] 处加1，则变成对差分数组下标x处加1，下标y+1处-1。（若y=n，y+1则会超过树状数组最大下标n越界，会有问题吗？不会，因为add的时候限制了小于n，不会导致越界，丢弃掉差分数组越界那一部分，对差分数组还原无影响）</p>
<blockquote>
<p>如题，已知一个数列，你需要进行下面两种操作：</p>
<ol>
<li>将某区间每一个数加上<em>x</em>；</li>
<li>求出某一个数的值。</li>
</ol>
</blockquote>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>区间修改-区间求和</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] prevSumArr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// Scanner sc = new Scanner(new BufferedInputStream(System.in));</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out)));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Rd.nextInt(); <span class="comment">// 数列长度为n</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> Rd.nextInt(); <span class="comment">// m次操作（m行）</span></span><br><span class="line">        <span class="comment">// int[] arr = new int[n];</span></span><br><span class="line">        prevSumArr = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 区间修改的树状数组，维护的是一个差分（即对差分后的数组构建树状数组）</span></span><br><span class="line">        <span class="comment">// 初始化树状数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> Rd.nextInt();</span><br><span class="line">            <span class="comment">// v - last 差分</span></span><br><span class="line">            add(i, v - last);</span><br><span class="line">            last = v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> Rd.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 区间加值</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Rd.nextInt();</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Rd.nextInt();</span><br><span class="line">                <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> Rd.nextInt();</span><br><span class="line">                add(x, y, v);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 区间求值</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Rd.nextInt();</span><br><span class="line">                pw.println(ask(x));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bitree的实际下标是从1开始的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (; x &lt;= prevSumArr.length - <span class="number">1</span>; x += (x &amp; -x)) &#123;</span><br><span class="line">            prevSumArr[x] += v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对差分数组加，等于x加上v，y + 1减去v</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="comment">// 对下标x处，加上v</span></span><br><span class="line">        add(x, v);</span><br><span class="line">        <span class="comment">// 对下标y+1处，减去v</span></span><br><span class="line">        add(y + <span class="number">1</span>, -v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// x是第x个，表示原数组中下标x-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ask</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x &gt; <span class="number">0</span>; x -= (x &amp; -x)) &#123;</span><br><span class="line">            ans += prevSumArr[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ask</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ask(y) - ask(x - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Rd</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="keyword">static</span> <span class="type">StringTokenizer</span> <span class="variable">tokenizer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// nextLine()读取字符串</span></span><br><span class="line">        <span class="keyword">static</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> reader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// next()读取字符串</span></span><br><span class="line">        <span class="keyword">static</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">while</span> (!tokenizer.hasMoreTokens()) &#123;</span><br><span class="line">                tokenizer = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(reader.readLine());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tokenizer.nextToken();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取一个int型数值</span></span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取一个double型数值</span></span><br><span class="line">        <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取一个long型数值</span></span><br><span class="line">        <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="3-逆序对问题">3.逆序对问题</h3>
<p>模板题：<a href="https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/submissions/491833107/">LCR 170. 交易逆序对的总数 - 力扣（LeetCode）</a></p>
<blockquote>
<p>在股票交易中，如果前一天的股价高于后一天的股价，则可以认为存在一个「交易逆序对」。请设计一个程序，输入一段时间内的股票交易记录 <code>record</code>，返回其中存在的「交易逆序对」总数。</p>
</blockquote>
<p>此题目，除了使用分治算法外，还可以使用树状数组求解。</p>
<p>首先，对原数组nums进行离散化，这里使用排序，排序后得到数组sortArr，就知道每个数离散后的下标。然后按照从左到右的顺序遍历原数组nums，遍历到数num的时候，查找数num在sortArr中最小的下标left和最大right的下标，查找树装数组中比num大的数（即大于right计数）即为答案。然后在left+1计数1，表示添加了一个数num。</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>逆序对问题</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 树状数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] tree;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reversePairs</span><span class="params">(<span class="type">int</span>[] record)</span> &#123;</span><br><span class="line">        <span class="comment">// 第0位不使用，加1</span></span><br><span class="line">        <span class="built_in">this</span>.tree = <span class="keyword">new</span> <span class="title class_">int</span>[record.length + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 离散化</span></span><br><span class="line">        <span class="type">int</span>[] sortArr = Arrays.copyOf(record, record.length);</span><br><span class="line">        Arrays.sort(sortArr);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; record.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> record[i];</span><br><span class="line">            <span class="comment">// 查找到num（v）的左端映射、右端映射</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> binLeftSearch(sortArr, v);</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> binRightSearch(sortArr, v);</span><br><span class="line">            <span class="comment">// 在树状数组中查找比离散后right大的数量（right+1为树状数组加1后映射，再加1就是比right大的）</span></span><br><span class="line">            ans += ask(right + <span class="number">2</span>, tree.length - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 将left计数1（left+1是树状数组映射加1）</span></span><br><span class="line">            add(left + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">binRightSearch</span><span class="params">(<span class="type">int</span>[] sortArr, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> sortArr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + right + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (sortArr[mid] &lt;= v) &#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">binLeftSearch</span><span class="params">(<span class="type">int</span>[] sortArr, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> sortArr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (check(sortArr, mid, v)) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] sortArr, <span class="type">int</span> mid, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sortArr[mid] &gt;= v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在第x位加上v</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (; x &lt; tree.length; x += x &amp; (-x)) &#123;</span><br><span class="line">            tree[x] += v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">ask</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x &gt;= <span class="number">1</span>; x -= x &amp; (-x)) &#123;</span><br><span class="line">            ans += tree[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">ask</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ask(y) - ask(x - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h2 id="2-线段树">2.线段树</h2>
<p>之前在<a href="/2022/09/05/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/" title="经典算法">经典算法</a>中写过线段树的笔记，所以你知道我拖延了多久了吧（懒癌晚期实锤），那段笔记只记叙了单点修改，区间查询。</p>
<h3 id="1-区间修改-区间查询">1.区间修改-区间查询</h3>
<p>模板题目：<a href="https://www.luogu.com.cn/problem/P3372">P3372 【模板】线段树 1 - 洛谷</a></p>
<blockquote>
<p>如题，已知一个数列，你需要进行下面两种操作：</p>
<ol>
<li>将某区间每一个数加上 <em>k</em>。</li>
<li>求出某区间每一个数的和。</li>
</ol>
</blockquote>
<p>如果区间修改时，逐个去修改，单独的修改部分就会<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mi>l</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2lgN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>的，所以采用懒标记法，节点类多了一个lazy标记，在修改、查询的时候，将标记下传，这样就均摊了时间。同时区间修改-区间查询可以完全替代单点修改-区间查询，因为单点修改，等于修改的区间的左右相同。</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>区间修改-区间查询</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span>[] nums;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TreeNode[] tree;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Fr</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fr</span>();</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(System.out));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        tree = <span class="keyword">new</span> <span class="title class_">TreeNode</span>[n * <span class="number">4</span>];</span><br><span class="line">        nums = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            nums[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        build(<span class="number">0</span>, n - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">op</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="comment">// 题目的下标从1开始</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt() - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> sc.nextInt() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                change(x, y, k, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> ask(x, y, <span class="number">1</span>);</span><br><span class="line">                pw.println(ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">ask</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= tree[p].left &amp;&amp; tree[p].right &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span> tree[p].sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 标记下传</span></span><br><span class="line">        pushDown(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> tree[p].left + tree[p].right &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= mid) &#123;</span><br><span class="line">            ans += ask(left, right, p * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &gt; mid) &#123;</span><br><span class="line">            ans += ask(left, right, p * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> val, <span class="type">int</span> p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= tree[p].left &amp;&amp; tree[p].right &lt;= right) &#123;</span><br><span class="line">            tree[p].sum += (<span class="type">long</span>) val * (tree[p].right - tree[p].left + <span class="number">1</span>);</span><br><span class="line">            tree[p].lazy += val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 标记下传</span></span><br><span class="line">        pushDown(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> tree[p].left + tree[p].right &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= mid) &#123;</span><br><span class="line">            change(left, right, val, p * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &gt; mid) &#123;</span><br><span class="line">            change(left, right, val, p * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pushUp(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> p)</span> &#123;</span><br><span class="line">        tree[p] = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(left, right);</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            tree[p].sum = nums[left];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(left, mid, p * <span class="number">2</span>);</span><br><span class="line">        build(mid + <span class="number">1</span>, right, p * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        pushUp(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">pushDown</span><span class="params">(<span class="type">int</span> p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[p].lazy != <span class="number">0</span>) &#123;</span><br><span class="line">            tree[p * <span class="number">2</span>].sum += tree[p].lazy * (tree[p * <span class="number">2</span>].right - tree[p * <span class="number">2</span>].left + <span class="number">1</span>);</span><br><span class="line">            tree[p * <span class="number">2</span> + <span class="number">1</span>].sum += tree[p].lazy * (tree[p * <span class="number">2</span> + <span class="number">1</span>].right - tree[p * <span class="number">2</span> + <span class="number">1</span>].left + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 标记下传</span></span><br><span class="line">            tree[p * <span class="number">2</span>].lazy += tree[p].lazy;</span><br><span class="line">            tree[p * <span class="number">2</span> + <span class="number">1</span>].lazy += tree[p].lazy;</span><br><span class="line">            <span class="comment">// 清除标记</span></span><br><span class="line">            tree[p].lazy = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">pushUp</span><span class="params">(<span class="type">int</span> p)</span> &#123;</span><br><span class="line">        tree[p].sum = tree[p * <span class="number">2</span>].sum + tree[p * <span class="number">2</span> + <span class="number">1</span>].sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> left;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> right;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> sum;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> <span class="variable">lazy</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> sum)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">            <span class="built_in">this</span>.sum = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Fr</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="keyword">static</span> <span class="type">StringTokenizer</span> <span class="variable">tokenizer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// nextLine()读取字符串</span></span><br><span class="line">        <span class="keyword">static</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> reader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// next()读取字符串</span></span><br><span class="line">        <span class="keyword">static</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">while</span> (!tokenizer.hasMoreTokens()) &#123;</span><br><span class="line">                tokenizer = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(reader.readLine());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tokenizer.nextToken();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取一个int型数值</span></span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取一个double型数值</span></span><br><span class="line">        <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取一个long型数值</span></span><br><span class="line">        <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取一个BigInteger</span></span><br><span class="line">        <span class="keyword">static</span> BigInteger <span class="title function_">nextBigInteger</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(Fr.nextLine());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="2-乘法-加法操作">2.乘法-加法操作</h3>
<p>模板题：<a href="https://www.luogu.com.cn/problem/P3373">P3373 【模板】线段树 2 - 洛谷 </a></p>
<blockquote>
<p>如题，已知一个数列，你需要进行下面三种操作：</p>
<ul>
<li>将某区间每一个数乘上 <em>x</em>；</li>
<li>将某区间每一个数加上 <em>x</em>；</li>
<li>求出某区间每一个数的和。</li>
</ul>
</blockquote>
<p>同时包含多个操作时，会有优先级关系，具体的我也不懂，先把模板记着。区间修改的lazy是代表的加法懒标记，现在懒标记具体为加法add，乘法mul。add初始化为0，mul初始化为1。（0加任何数等于其本身，1乘以任何数等于其本身）。乘法的优先级高于加法，所以下移操作，先乘法计算，后加法计算。同时乘法操作（mul方法）时，要把加法计算补上</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>区间修改-区间查询</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span>[] nums;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TreeNode[] trees;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Fr</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fr</span>();</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(System.out));</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt(); <span class="comment">// arr len</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> sc.nextInt(); <span class="comment">// q query</span></span><br><span class="line">        m = sc.nextInt(); <span class="comment">// mod</span></span><br><span class="line"></span><br><span class="line">        nums = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">        trees = <span class="keyword">new</span> <span class="title class_">TreeNode</span>[n &lt;&lt; <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            nums[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        build(<span class="number">0</span>, nums.length - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="comment">// 题目下标从1开始</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt() - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> sc.nextInt() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                add(x, y, k, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                mul(x, y, k, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pw.println(ask(x, y, <span class="number">1</span>) % m);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线段树2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> p)</span> &#123;</span><br><span class="line">        trees[p] = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(left, right);</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            trees[p].sum = nums[left] % m;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(left, mid, p * <span class="number">2</span>);</span><br><span class="line">        build(mid + <span class="number">1</span>, right, p * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        pushUp(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> val, <span class="type">int</span> p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= trees[p].left &amp;&amp; trees[p].right &lt;= right) &#123;</span><br><span class="line">            trees[p].sum = (trees[p].sum + (<span class="type">long</span>) (trees[p].right - trees[p].left + <span class="number">1</span>) * val) % m;</span><br><span class="line">            trees[p].add = (trees[p].add + val) % m;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pushDown(p);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> trees[p].left + trees[p].right &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= mid) &#123;</span><br><span class="line">            add(left, right, val, p * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &gt; mid) &#123;</span><br><span class="line">            add(left, right, val, p * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pushUp(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> rihgt, <span class="type">int</span> val, <span class="type">int</span> p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= trees[p].left &amp;&amp; trees[p].right &lt;= rihgt) &#123;</span><br><span class="line">            trees[p].sum = (trees[p].sum * val) % m;</span><br><span class="line">            trees[p].mul = (trees[p].mul * val) % m;</span><br><span class="line">            <span class="comment">// 乘法的时候，要把之前的没有加的也要加了</span></span><br><span class="line">            trees[p].add = (trees[p].add * val) % m;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pushDown(p);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> trees[p].left + trees[p].right &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= mid) &#123;</span><br><span class="line">            mul(left, rihgt, val, p * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rihgt &gt; mid) &#123;</span><br><span class="line">            mul(left, rihgt, val, p * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pushUp(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">ask</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= trees[p].left &amp;&amp; trees[p].right &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span> trees[p].sum;</span><br><span class="line">        &#125;</span><br><span class="line">        pushDown(p);</span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> trees[p].left + trees[p].right &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= mid) &#123;</span><br><span class="line">            ans = (ans + ask(left, right, p * <span class="number">2</span>)) % m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mid &lt; right) &#123;</span><br><span class="line">            ans = (ans + ask(left, right, p * <span class="number">2</span> + <span class="number">1</span>) % m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 下移操作时，求和后，先乘后加</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">pushDown</span><span class="params">(<span class="type">int</span> p)</span> &#123;</span><br><span class="line">        trees[p * <span class="number">2</span>].sum = (trees[p * <span class="number">2</span>].sum * trees[p].mul + trees[p].add * (trees[p * <span class="number">2</span>].right - trees[p * <span class="number">2</span>].left + <span class="number">1</span>)) % m;</span><br><span class="line">        trees[p * <span class="number">2</span>].mul = (trees[p * <span class="number">2</span>].mul * trees[p].mul) % m;</span><br><span class="line">        trees[p * <span class="number">2</span>].add = (trees[p * <span class="number">2</span>].add * trees[p].mul + trees[p].add) % m;</span><br><span class="line"></span><br><span class="line">        trees[p * <span class="number">2</span> + <span class="number">1</span>].sum = (trees[p * <span class="number">2</span> + <span class="number">1</span>].sum * trees[p].mul + trees[p].add * (trees[p * <span class="number">2</span> + <span class="number">1</span>].right - trees[p * <span class="number">2</span> + <span class="number">1</span>].left + <span class="number">1</span>)) % m;</span><br><span class="line">        trees[p * <span class="number">2</span> + <span class="number">1</span>].mul = (trees[p * <span class="number">2</span> + <span class="number">1</span>].mul * trees[p].mul) % m;</span><br><span class="line">        trees[p * <span class="number">2</span> + <span class="number">1</span>].add = (trees[p * <span class="number">2</span> + <span class="number">1</span>].add * trees[p].mul + trees[p].add) % m;</span><br><span class="line"></span><br><span class="line">        trees[p].mul = <span class="number">1</span>;</span><br><span class="line">        trees[p].add = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">pushUp</span><span class="params">(<span class="type">int</span> p)</span> &#123;</span><br><span class="line">        trees[p].sum = (trees[p * <span class="number">2</span>].sum + trees[p * <span class="number">2</span> + <span class="number">1</span>].sum) % m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> left;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> right;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> sum;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> <span class="variable">add</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> <span class="variable">mul</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Fr</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">StringTokenizer</span> <span class="variable">tokenizer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// nextLine()读取字符串</span></span><br><span class="line">        String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> reader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// next()读取字符串</span></span><br><span class="line">        String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">while</span> (!tokenizer.hasMoreTokens()) &#123;</span><br><span class="line">                tokenizer = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(reader.readLine());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tokenizer.nextToken();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取一个int型数值</span></span><br><span class="line">        <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取一个double型数值</span></span><br><span class="line">        <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取一个long型数值</span></span><br><span class="line">        <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h2 id="3-最小生成树">3.最小生成树</h2>
<p>介绍参见：<a href="https://baike.baidu.com/item/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91">最小生成树_百度百科</a></p>
<blockquote>
<p>n个点，这些点之间有一些有权边，请通过这些有权边，将这n个点连接起来，使得所有点都被连接在一起（即能任意一点到达其他所有的点）。其中满足条件的边权和的最小值的情况，就是最小生成树。</p>
</blockquote>
<p>假设有n个点，m条边。最小生成树一点只有n-1条连接边。且不会成环。</p>
<h3 id="1-kruskal算法">1.kruskal算法</h3>
<p>该算法的思想是选边，每次都选之前未被选择的最小的边。查看该边是与之前选择的边构成环，如果成环则丢弃该边。否则选择这条边。直到选择了n-1条边，就构成了最小生成树。这里采用排序后，使用并查集的方式查询是否成环。</p>
<ol>
<li>排序所有边。</li>
<li>选择最小的未被选择的边。如果不与之前选择的边成环，则选择，否则丢弃</li>
<li>重复2步骤直到选择了n-1条边。</li>
</ol>
<p><strong>时间复杂度</strong>：O(mlogm)，m条边，并查集logm（只采用了路径压缩），适用于稀疏图。</p>
<p>模板题：<a href="https://leetcode.cn/problems/min-cost-to-connect-all-points/description/">1584. 连接所有点的最小费用 - 力扣</a></p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>kruskal</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostConnectPoints</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> points.length;</span><br><span class="line">        List&lt;Edge&gt; edges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">dis</span> <span class="operator">=</span> Math.abs(points[i][<span class="number">0</span>] - points[j][<span class="number">0</span>]) + Math.abs(points[i][<span class="number">1</span>] - points[j][<span class="number">1</span>]);</span><br><span class="line">                    edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(i, j, dis));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        kruskals(edges, n);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Edge&gt; minDisList;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">kruskals</span><span class="params">(List&lt;Edge&gt; edges, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.minDisList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Collections.sort(edges, (a, b) -&gt; a.w - b.w);</span><br><span class="line">        <span class="type">DSU</span> <span class="variable">dsu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DSU</span>(n);</span><br><span class="line">        <span class="comment">// 这里并没有控制加入了n-1条边，因为一旦要加入第n条边，则必定成环，判环的同时顺便控制了</span></span><br><span class="line">        <span class="keyword">for</span> (Edge edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> edge.u;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> edge.v;</span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> edge.w;</span><br><span class="line">            <span class="comment">// 若这条边不会产生环，则加入 mst</span></span><br><span class="line">            <span class="keyword">if</span> (!dsu.isUnion(u, v)) &#123;</span><br><span class="line">                dsu.union(u, v);</span><br><span class="line">                <span class="comment">// 打印出路径最小生成树，u到v的距离为w</span></span><br><span class="line">                <span class="comment">// System.out.println(u + &quot; --&gt; &quot; + v + &quot;  &quot; + w);</span></span><br><span class="line">                ans += w;</span><br><span class="line">                minDisList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(u, v, w));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(minDisList);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> u;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> v;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> w;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.u = u;</span><br><span class="line">            <span class="built_in">this</span>.v = v;</span><br><span class="line">            <span class="built_in">this</span>.w = w;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Edge&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;u=&quot;</span> + u +</span><br><span class="line">                    <span class="string">&quot;, v=&quot;</span> + v +</span><br><span class="line">                    <span class="string">&quot;, w=&quot;</span> + w +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">        <span class="comment">// 联通分量,用来判断环的数量，有setCount个环</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> setCount;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span>[] fa;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DSU</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.fa = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="built_in">this</span>.setCount = n;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fa.length; i++) &#123;</span><br><span class="line">                fa[i] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 是否成环</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUnion</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> findFa(x) == findFa(y);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findFa</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fa[x] == x) &#123;</span><br><span class="line">                <span class="keyword">return</span> x;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootFa</span> <span class="operator">=</span> findFa(<span class="built_in">this</span>.fa[x]);</span><br><span class="line">            fa[x] = rootFa;</span><br><span class="line">            <span class="keyword">return</span> rootFa;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">xFa</span> <span class="operator">=</span> findFa(x);</span><br><span class="line">            <span class="type">int</span> <span class="variable">yFa</span> <span class="operator">=</span> findFa(y);</span><br><span class="line">            <span class="comment">// 连接两个不相连的点，联通分量减1</span></span><br><span class="line">            <span class="keyword">if</span> (xFa != yFa) &#123;</span><br><span class="line">                setCount--;</span><br><span class="line">            &#125;</span><br><span class="line">            fa[xFa] = yFa;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
<h3 id="2-prim算法">2.prim算法</h3>
<p>该算法的思想是选点，先选定一个点1（一般为编号最小的点），加入到选中集合A，未选中的点存在集合B。接着从集合B中的所有点找到距离集合A中任意点距离（权重）最近的点，假设为点3，将3加入集合A，现在集合A中有点1和3。接着再从集合B中的所有点找出一个点，距离集合A中的1或3距离（权重）最近的点。直到所有的点都被加入到集合A。</p>
<ol>
<li>选择编号最小的点从集合B加入集合A</li>
<li>从B中选择一个点，该点距离集合A中的某个点是距离最近的</li>
<li>重复2步骤直到所有点被从集合B加入集合A</li>
</ol>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，如代码的prim的双重for。适合于稠密图。</p>
<p>模板题：<a href="https://leetcode.cn/problems/min-cost-to-connect-all-points/description/">1584. 连接所有点的最小费用 - 力扣</a></p>
<p>注意点编号是从1开始还是从0开始，这里题目没说，默认从0开始，但是模板是从1开始的，所以略有改动。</p>
<div class="xControl">
    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>prim</span></div>
    <div class="xContent"><div class="inner">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] minDisArr;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] fa;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostConnectPoints</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> points.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模板的建图编号从1开始，所以长度加1，后续同理（因为此题没有节点编号，默认第一个节点编号1）</span></span><br><span class="line">        <span class="type">int</span>[][] graphArr = <span class="keyword">new</span> <span class="title class_">int</span>[points.length + <span class="number">1</span>][points.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">                    graphArr[i + <span class="number">1</span>][j + <span class="number">1</span>] = Math.abs(points[i][<span class="number">0</span>] - points[j][<span class="number">0</span>]) + Math.abs(points[i][<span class="number">1</span>] - points[j][<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 到点i的最近的距离,由于点的下标从1开始，这里给数组长度为n+1</span></span><br><span class="line">        <span class="built_in">this</span>.minDisArr = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(minDisArr, INF);</span><br><span class="line">        <span class="comment">// 节点i是否被访问</span></span><br><span class="line">        <span class="type">boolean</span>[] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 节点i的父节点</span></span><br><span class="line">        fa = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设节点1为起始节点，其父亲节点为-1</span></span><br><span class="line">        minDisArr[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        fa[<span class="number">1</span>] = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// prim algo</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">// u表示最小的未被访问的距离最小的点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> findMin(vis, minDisArr);</span><br><span class="line">            <span class="comment">// 接下来u被加入，标记为已访问</span></span><br><span class="line">            vis[u] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 使用u更新到其他点的最小距离，优化后面查找最小值的时间复杂度</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">1</span>; v &lt;= n; v++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v] &amp;&amp; graphArr[u][v] &lt; minDisArr[v]) &#123;</span><br><span class="line">                    <span class="comment">// 更新到v的最小距离</span></span><br><span class="line">                    minDisArr[v] = graphArr[u][v];</span><br><span class="line">                    <span class="comment">// 标记u的父亲节点是v（从v到所有点中，v到u距离最近）</span></span><br><span class="line">                    fa[v] = u;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不可构成最小生成树</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; minDisArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (minDisArr[i] == INF) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; minDisArr.length; i++) &#123;</span><br><span class="line">            ans += minDisArr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 注意，如果minIdx不会返回-1，未访问的点一定会有minDisArr[i]小于INF（即if条件最少会成立一次）</span></span><br><span class="line">    <span class="comment">// 这里找最小值，是用了如下代码优化的。朴素的方法是遍历未被访问集合中的所有点，</span></span><br><span class="line">    <span class="comment">// 然后二重循环遍历已访问集合的所有的点，这样最终会导致n^3时间的复杂度。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(<span class="type">boolean</span>[] vis, <span class="type">int</span>[] minDisArr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minDis</span> <span class="operator">=</span> INF;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minIdx</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 编号从1开始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; minDisArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i] &amp;&amp; minDisArr[i] &lt; minDis) &#123;</span><br><span class="line">                minDis = minDisArr[i];</span><br><span class="line">                minIdx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minIdx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 
    </div></div>
    </div>
]]></content>
      <categories>
        <category>cs基础</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/03/20240303/</url>
    <content><![CDATA[<p>站点突然不能访问了，找了半天原因，耗费了我几个小时，最后发现居然是域名过期了😂。我不怎么看邮件，导致告知过期的邮件全部漏看了。还好发现的及时，立马直接续费几年😎。</p>
<p><img src="/2024/03/03/20240303/image-20240303223036774.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>java异步编程</title>
    <url>/2024/03/09/java%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>CompletableFuture类使用</p>
<span id="more"></span>
<h2 id="异步编程">异步编程</h2>
<p>异步编程相比多线程，更加强调在主任务中开启一条线程去执行另一个任务。得益于jdk8新增的CompletableFuture类，大幅度简化了异步编程的操作，简化了之前使用runable（无法获取返回结果）、Future（可以获取返回结果）类使用的操作。</p>
<p>注意：后文中的关于CompletableFuture的执行方法是否有返回值，特指执行异步的异步任务是否有返回值，具体体现在返回值CompletableFuture&lt;T&gt; 中的T是否是void，若无返回值，则时void，否则是具体的返回值类型。</p>
<p>CompletableFuture需要使用线程池，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; runHello = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello runAsync&quot;</span>);</span><br><span class="line">&#125;, threadPool);</span><br></pre></td></tr></table></figure>
<p>CompletableFuture大多数方法同runAsync一致，需要传入两个参数，第一个是需要异步运行的任务，第二个<code>threadPool</code>是使用的线程池，如果不传第二个参数，则会使用默认的forkjoinpool（不建议使用）。在springboot项目中，我们的线程池一般都是创建配置类，生成配置的bean，需要使用时注入线程池的bean即可。</p>
<h2 id="springboot中的线程池创建">springboot中的线程池创建</h2>
<h3 id="引入依赖">引入依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="参数配置类">参数配置类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池参数配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;microServer.thread&quot;)</span> <span class="comment">// 取配置文件中的参数</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 如果不加入容器，其他类取ThreadPoolConfigProperties类中的值需要加入额外注解</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolConfigProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer coreSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer maxSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer keepAliveTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建自定义线程池bean">创建自定义线程池bean</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// @EnableConfigurationProperties(ThreadPoolConfigProperties.class) // (ThreadPoolConfigProperties)配置类不写component 加入容器需要加入</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadConfig</span> &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建并返回线程池bean对象加入到容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolExecutor <span class="title function_">threadPoolExecutor</span><span class="params">(ThreadPoolConfigProperties pool)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(pool.getCoreSize(), pool.getMaxSize(), pool.getKeepAliveTime(),</span><br><span class="line">                TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">1000</span>),</span><br><span class="line">                Executors.defaultThreadFactory(), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建异步任务">创建异步任务</h2>
<h3 id="runasync-方法">runAsync 方法</h3>
<p>runAsync方法用于开启一个异步任务，此异步任务没有返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; runHello = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello runAsync&quot;</span>);</span><br><span class="line">&#125;, threadPool);</span><br></pre></td></tr></table></figure>
<h3 id="supplyasync方法">supplyAsync方法</h3>
<p>supplyAsync方法用于开启一个异步任务，此异步任务有返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; suphello = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply&quot;</span>);</span><br><span class="line">    <span class="comment">// 异步任务的返回值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;supply&quot;</span>;</span><br><span class="line">&#125;, threadPool);</span><br></pre></td></tr></table></figure>
<h2 id="异步任务回调">异步任务回调</h2>
<p>注意：若回调链的某一个任务出现了异常，会导致后续的任务不执行。</p>
<h3 id="thenrun-thenrunasync方法">thenRun、thenRunAsync方法</h3>
<p>此两个方法用于在前一个任务执行完毕之后，再接着执行一个任务，且</p>
<ol>
<li>链式调用的前面的方法报错时，此方法不会执行</li>
<li>不需要前一个任务的返回值</li>
<li>此任务也无返回值</li>
<li>thenRun与thenRunAsync的区别是，thenRun使用前一个任务的线程池，thenRunAsync需要重新指定一个线程池，如果不指定，则为默认的forkjoinpool线程池（不建议）。后续的thenAccept和thenAcceptAsync，thenApply和thenApplyAsync等，它们之间的区别也是如此</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; runHello = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello runAsync&quot;</span>);</span><br><span class="line">&#125;, threadPool).thenRun(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello thenRun&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Void&gt; runHello2 = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello runAsync&quot;</span>);</span><br><span class="line">&#125;, threadPool).thenRunAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello thenRunAsync&quot;</span>);</span><br><span class="line">    <span class="comment">// 需要重新指定线程池</span></span><br><span class="line">&#125;, threadPool);</span><br></pre></td></tr></table></figure>
<h3 id="thenaccept-thenacceptasync方法">thenAccept、thenAcceptAsync方法</h3>
<p>此两个方法用于在前一个任务执行完毕之后，再接着执行一个任务。且</p>
<ol>
<li>链式调用的前面的方法报错时，此方法不会执行</li>
<li>接收前一个任务的返回值作为入参</li>
<li>此任务没有返回值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; acphello = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;, threadPool).thenAccept(res -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello thenAccept&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="thenapply-thenapplyasync">thenApply、thenApplyAsync</h3>
<p>此两个方法用于在前一个任务执行完毕之后，再接着执行一个任务。且</p>
<ol>
<li>接收前一个任务的返回值作为入参，若前一个任务没有返回值，则为null（下同）</li>
<li>此任务有返回值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; apphello = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;, threadPool).thenApplyAsync(res -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello apphello&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// a = &quot;2&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> apphello.get();</span><br></pre></td></tr></table></figure>
<h3 id="exceptionally">exceptionally</h3>
<p>若某个任务出现异常后，捕获异常信息用于用户后续处理（回调），且</p>
<ol>
<li>链式调用的前面的方法报错时，此方法<strong>才会</strong>执行</li>
<li>异常信息作为入参，</li>
<li>有返回值，且返回值类型必须和调用链上的最后一个正常的返回类型类型一致。</li>
<li>注意，此方法会消费在此方法调用链之前的异常，消费后只要此方法里、后续链式调用方法不再有异常，最终调用get方法获取返回值时不会报错</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; apphello = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply&quot;</span>);</span><br><span class="line">    <span class="comment">// 异常代码</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/ <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;, threadPool).thenApplyAsync(res -&gt; &#123;</span><br><span class="line">    <span class="comment">// 由于调用链上的前一个任务出现了异常，此任务不会执行</span></span><br><span class="line">    System.out.println(<span class="string">&quot;hello apphello&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">&#125;).exceptionally(e -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;异常：&quot;</span> + e);</span><br><span class="line">    <span class="comment">// 返回类型要与调用链的最后一个返回类型保持一致</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若exceptionally方法之前没有报错，则a的值是2，否则为exceptionally方法返回的值（此处为3）</span></span><br><span class="line"><span class="comment">// 若没有调用exceptionally方法消费异常，此get方法会报错</span></span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> apphello.get();</span><br></pre></td></tr></table></figure>
<h3 id="whencomplete方法">whenComplete方法</h3>
<p>一般用于前一个异步任务完成后的后续处理（回调），且</p>
<ol>
<li>无论链式调用前面的方法是否执行成功，此方法<strong>都会</strong>执行。</li>
<li>接收两个参数，前一个任务的返回值作为入参，链式调用上的异常作为入参。</li>
<li>若异常被exceptionally消费了，则此处获取的异常入参会变成null。</li>
<li>此方法不影响异步的返回值。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; apphello2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply&quot;</span>);</span><br><span class="line">    <span class="comment">// 异常代码</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/ <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;, threadPool).thenApplyAsync(res -&gt; &#123;</span><br><span class="line">    <span class="comment">// 不会执行</span></span><br><span class="line">    System.out.println(<span class="string">&quot;hello apphello&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">&#125;).whenComplete((res, exception) -&gt; &#123;</span><br><span class="line">    <span class="comment">// 此处依然会正常调用，其中入参res（返回值）会变成null，exception为具体的异常</span></span><br><span class="line">    <span class="comment">// 注意：此方法无法消费异常，后续的get方法依旧会报错。</span></span><br><span class="line">    System.out.println(<span class="string">&quot;complete&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; apphello2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply&quot;</span>);</span><br><span class="line">    <span class="comment">// 异常代码</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/ <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;, threadPool).thenApplyAsync(res -&gt; &#123;</span><br><span class="line">    <span class="comment">// 不会执行</span></span><br><span class="line">    System.out.println(<span class="string">&quot;hello apphello&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">&#125;).exceptionally(e -&gt; &#123;</span><br><span class="line">    <span class="comment">// 将异常消费掉</span></span><br><span class="line">    System.out.println(<span class="string">&quot;异常：&quot;</span> + e);</span><br><span class="line">    <span class="comment">// 返回&quot;3&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">&#125;).whenComplete((res, exception) -&gt; &#123;</span><br><span class="line">    <span class="comment">// 入参res是返回值（&quot;3&quot;），异常被消费掉后，exception为null</span></span><br><span class="line">    System.out.println(<span class="string">&quot;complete&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无异常报错（异常已被exceptionally消费掉了），a = &quot;3&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> apphello2.get();</span><br></pre></td></tr></table></figure>
<h3 id="handle方法">handle方法</h3>
<p>一般用于前一个异步任务完成后的后续处理（回调），且</p>
<ol>
<li>无论链式调用前面的方法是否执行成功，此方法<strong>都会</strong>执行。</li>
<li>接收两个参数，前一个任务的返回值作为入参，链式调用上的异常作为入参。</li>
<li>若异常被exceptionally消费了，则此处获取的异常入参会变成null。</li>
<li>此方法有的返回值，且影响异步返回值。</li>
<li>此方法会消费掉异常。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; apphello3 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply&quot;</span>);</span><br><span class="line">    <span class="comment">// 异常代码</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/ <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;, threadPool).thenApplyAsync(res -&gt; &#123;</span><br><span class="line">    <span class="comment">// 不会执行</span></span><br><span class="line">    System.out.println(<span class="string">&quot;hello apphello&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">&#125;).handle((res, exception) -&gt; &#123;</span><br><span class="line">    <span class="comment">// 会消费掉异常，且有返回值</span></span><br><span class="line">    System.out.println(<span class="string">&quot;complete&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;4&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异常被handle消费掉了，不会报错，a = &quot;4&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> apphello3.get();</span><br></pre></td></tr></table></figure>
<h2 id="多任务组合处理">多任务组合处理</h2>
<h3 id="两个任务必须都完成">两个任务必须都完成</h3>
<h4 id="runafterboth-runafterbothasync方法">runAfterBoth、runAfterBothAsync方法</h4>
<p>两个异步任务<strong>都执行成功后</strong>，才执行。且</p>
<ol>
<li>两个异步任务的执行不会相互影响（其中一个报错，另一个依旧会执行）。</li>
<li>若有一个异步任务抛出了异常，则此方法不会执行</li>
<li><strong>不接受前面两个方法的入参，且没有返回值</strong>。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步任务1</span></span><br><span class="line">CompletableFuture&lt;String&gt; appHello1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 异常代码</span></span><br><span class="line">    <span class="comment">//int a = 1/ 0;</span></span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;, threadPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步任务2</span></span><br><span class="line">CompletableFuture&lt;String&gt; appHello2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 异常代码</span></span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply2&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">&#125;, threadPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 任务1future.runAfterBoth(任务2future， -&gt;&#123;想要执行的任务&#125;)  调用</span></span><br><span class="line"><span class="comment">// 表示在任务1、任务2都正常执行成功的情况下，再执行想要执行的任务。</span></span><br><span class="line">CompletableFuture&lt;Void&gt; future = appHello1.runAfterBoth(appHello2, () -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;runAfterBoth&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="thenacceptboth-thenacceptbothasync方法">thenAcceptBoth、thenAcceptBothAsync方法</h4>
<p>两个异步任务<strong>都执行成功后</strong>，才执行。且</p>
<ol>
<li>两个异步任务的执行不会相互影响（其中一个报错，另一个依旧会执行）。</li>
<li>若有一个异步任务抛出了异常，则此方法不会执行</li>
<li><strong>接受前面两个方法的入参，但是没有返回值</strong>。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步任务1</span></span><br><span class="line">CompletableFuture&lt;String&gt; appHello1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 异常代码</span></span><br><span class="line">    <span class="comment">//int a = 1/ 0;</span></span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;, threadPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步任务2</span></span><br><span class="line">CompletableFuture&lt;String&gt; appHello2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 异常代码</span></span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply2&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">&#125;, threadPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 任务1future.thenAcceptBoth(任务2future， -&gt;&#123;想要执行的任务&#125;)  调用，接收两个入参，分别为两个任务的返回值</span></span><br><span class="line"><span class="comment">// 表示在任务1、任务2都正常执行成功的情况下，再执行想要执行的任务。</span></span><br><span class="line">CompletableFuture&lt;Void&gt; future = appHello1.thenAcceptBoth(appHello2, (a, b) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;thenAcceptBoth&quot;</span>);</span><br><span class="line">    <span class="comment">// a为appHello1的返回值，此处 a = &quot;1&quot;</span></span><br><span class="line">    System.out.println(a);</span><br><span class="line">    <span class="comment">// b为appHello2的返回值，此处 b = &quot;2&quot;</span></span><br><span class="line">    System.out.println(b);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="thencombine-thencombineasync方法">thenCombine、thenCombineAsync方法</h4>
<p>两个异步任务<strong>都执行成功后</strong>，才执行。且</p>
<ol>
<li>两个异步任务的执行不会相互影响（其中一个报错，另一个依旧会执行）。</li>
<li>若有一个异步任务抛出了异常，则此方法不会执行</li>
<li><strong>接受前面两个方法的入参，但是有返回值</strong>。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步任务1</span></span><br><span class="line">CompletableFuture&lt;String&gt; appHello1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 异常代码</span></span><br><span class="line">    <span class="comment">//int a = 1/ 0;</span></span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;, threadPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步任务2</span></span><br><span class="line">CompletableFuture&lt;String&gt; appHello2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply2&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">&#125;, threadPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 任务1future.thenCombine(任务2future， -&gt;&#123;想要执行的任务&#125;)  调用，接收两个入参，分别为两个任务的返回值</span></span><br><span class="line"><span class="comment">// 表示在任务1、任务2都正常执行成功的情况下，再执行想要执行的任务。</span></span><br><span class="line">CompletableFuture&lt;String&gt; thenCombine = appHello1.thenCombine(appHello2, (a, b) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;thenCombine&quot;</span>);</span><br><span class="line">    <span class="comment">// a为appHello1的返回值，此处 a = &quot;1&quot;</span></span><br><span class="line">    System.out.println(a);</span><br><span class="line">    <span class="comment">// b为appHello2的返回值，此处 b = &quot;2&quot;</span></span><br><span class="line">    System.out.println(b);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为thenCombine的返回值，此处 a = &quot;3&quot;。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> thenCombine.get();</span><br></pre></td></tr></table></figure>
<h3 id="两个任务中任意一个完成">两个任务中任意一个完成</h3>
<p>与都完成类似，分别有三组、六个方法（每组带Async、不带Async两个）。代码只给出applyToEither例子。</p>
<ol>
<li>runAfterEither： 不会把执行结果当做方法入参，且没有返回值。</li>
<li>acceptEither: 会将最先执行完任务的返回值，作为方法入参，传递到指定方法中，且无返回值、</li>
<li>applyToEither：会将最先执行完任务的返回值，作为方法入参，传递到指定方法中，且有返回值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此方法执行出现异常，但是在appHello4执行完毕后才会出现异常</span></span><br><span class="line">CompletableFuture&lt;String&gt; appHello3 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟执行用时，让appHello3方法耗时大于appHello4方法</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// 异常代码</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/ <span class="number">0</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply3&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;, threadPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此异步方法执行正常，且耗时更短</span></span><br><span class="line">CompletableFuture&lt;String&gt; appHello4 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply4&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">&#125;, threadPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在两个方法任意一个执行完毕后，接收一个返回值作为入参a，谁先执行完毕，就是谁的返回值。</span></span><br><span class="line"><span class="comment">// 假设是appHello3先执行完毕，且appHello3抛出了异常，此方法不会执行，且最后的get会报错</span></span><br><span class="line"><span class="comment">// 现在的代码，appHello3报错了，但是报错之前，appHello4已经执行完毕且返回了值，因此applyToEither会执行，且后get方法不会报错</span></span><br><span class="line">CompletableFuture&lt;String&gt; applyToEither = appHello3.applyToEither(appHello4, a -&gt; &#123;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虽然appHello3报错了，但是在其报错之前appHello4就已执行成功且返回了值。</span></span><br><span class="line"><span class="comment">// applyToEither正常执行，且没有报错，此处a = &quot;3&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> applyToEither.get();</span><br></pre></td></tr></table></figure>
<h3 id="多个任务都完成">多个任务都完成</h3>
<p>allOf方法，此方法没有返回值，因此有些需要返回值的调用没有办法使用，(一般也不会这样用)。</p>
<ol>
<li>多个异步任务的执行不会相互影响（其中一个报错，另一个依旧会执行）。</li>
<li>若有一个异步任务抛出了异常，则此方法不会执行</li>
<li>allOf方法没有返回值，因此，接着调用某些需要返回值的方法可能会报错，例如handle方法。</li>
</ol>
<p>用法：接着调用whenComplete方法，在多个异步任务都执行完毕后执行（异步执行）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; appHello3 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply3&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;, threadPool);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; appHello4 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply4&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">&#125;, threadPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用whenComplete方法，在两个任务都执行完毕后执行</span></span><br><span class="line">CompletableFuture.allOf(appHello3, appHello4).whenComplete((res, exception) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>用法：使用join方法，在多个任务都执行完毕后，在主线程中执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; appHello3 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply3&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;, threadPool);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; appHello4 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply4&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">&#125;, threadPool);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Void&gt; allOfFuture = CompletableFuture.allOf(appHello3, appHello4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 在主线程中等待多个allOf的异步任务都执行完毕（阻塞主线程）</span></span><br><span class="line">    allOfFuture.join();</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">    <span class="comment">// when wrong, do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多个任务任意一个完成">多个任务任意一个完成</h3>
<p>anyOf方法，相比于allOf方法，此方法有返回值，类型未Object，同两个任务任意一个完成一样，会接收最先完成的任务的返回值，其他的都会被丢弃掉，即使出现异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此方法执行出现异常，但是在appHello4执行完毕后才会出现异常</span></span><br><span class="line">CompletableFuture&lt;String&gt; appHello3 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 异常代码</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/ <span class="number">0</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply3&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;, threadPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此异步方法执行正常，且耗时更短</span></span><br><span class="line">CompletableFuture&lt;String&gt; appHello4 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply4&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">&#125;, threadPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先返回的appHello4没有报错，此anyOfFuture的后续调用也不会出问题，返回值为appHello4的返回值。类型为Object</span></span><br><span class="line">CompletableFuture&lt;Object&gt; anyOfFuture = CompletableFuture.anyOf(appHello3, appHello4);</span><br><span class="line"><span class="comment">// 有返回值，可以正常调用handle方法</span></span><br><span class="line">anyOfFuture.handle((res, e) -&gt; &#123;</span><br><span class="line">    System.out.println(res);</span><br><span class="line">    System.out.println(e.getMessage());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;4&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="组合任务处理">组合任务处理</h2>
<h3 id="thencompose方法">thenCompose方法</h3>
<p>用于组合两个CompletableFuture方法，并将前一个CompletableFuture方法的返回值作为入参传入下一个CompletableFuture。有先后依赖关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; appHello5 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello supply5&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;, threadPool);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; future1 = appHello5.thenCompose((res -&gt; CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// res是appHello5的返回值，这里是&quot;1&quot;</span></span><br><span class="line">    System.out.println(res + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;hello supply6&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">&#125;, threadPool)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// a = &quot;1:hello supply6&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> future1.get();</span><br></pre></td></tr></table></figure>
<h3 id="与thenapply的区别">与thenApply的区别</h3>
<p>参考自：<a href="https://stackoverflow.com/questions/43019126/completablefuture-thenapply-vs-thencompose">java - CompletableFuture | thenApply vs thenCompose - Stack Overflow</a></p>
<p>supplyAsync类似于stream中的map方法，thenCompose类似有stream的flatMap方法（将结果展平）。</p>
<ul>
<li>如果异步调用方法，返回了一个CompletableFuture&lt;T&gt;，则应该使用thenCompose，若使用supplyAsync，则会返回一个CompletableFuture&lt;CompletableFuture&lt;T&gt;&gt;对象。</li>
<li>如果异步调用的方法，返回了一个T对象，则应该使用supplyAsync。最终会返回一个CompletableFuture&lt;T&gt;对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// thenApply 的返回值，会将原本的返回值使用CompletableFuture包装起来，</span></span><br><span class="line"><span class="comment">// 例如thenApply 中的调用方法的原本返回的是x+1（一个Integer），然后会将其包装返回成CompletableFuture&lt;Integer&gt;</span></span><br><span class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; <span class="number">1</span>)</span><br><span class="line">    .thenApply(x -&gt; x+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// thenCompose 中的调用方法的原本返回值，是一个CompletableFuture&lt;Integer&gt;，直接将其返回</span></span><br><span class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; <span class="number">1</span>)</span><br><span class="line">                     .thenCompose(x -&gt; CompletableFuture.supplyAsync(() -&gt; x+<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<h2 id="get-join方法">get、join方法</h2>
<p>get、join方法用于获取CompletableFuture中包装的具体的值的类型，若CompletableFuture中有异常，则会报错。</p>
<p>get方法会获取返回值，join不会。</p>
<p>注意：get方法会阻塞当前调用的”主线程“。建议使用get的时候，加一个超时时间。CompletableFuture线程池策略<strong>最好使用AbortPolicy</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> future.get(<span class="number">5</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>
<h2 id="异常处理">异常处理</h2>
<ul>
<li>使用 <code>whenComplete</code> 方法可以在任务完成时触发回调函数，并正确地处理异常，而不是让异常被吞噬或丢失。</li>
<li>使用 <code>exceptionally</code> 方法可以处理异常并重新抛出，以便异常能够传播到后续阶段，而不是让异常被忽略或终止。</li>
<li>使用 <code>handle</code> 方法可以处理正常的返回结果和异常，并返回一个新的结果，而不是让异常影响正常的业务逻辑。</li>
<li>使用 <code>CompletableFuture.allOf</code> 方法可以组合多个 <code>CompletableFuture</code>，并统一处理所有任务的异常，而不是让异常处理过于冗长或重复。</li>
</ul>
<p>实际使用中可以使用现成的异步框架，来实现异步编排。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
  </entry>
</search>
